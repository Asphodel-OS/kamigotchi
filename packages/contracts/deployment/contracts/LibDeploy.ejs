// SPDX-License-Identifier: Unlicense
pragma solidity >=0.8.28;

// Foundry
import { DSTest } from "ds-test/test.sol";
import { console } from "forge-std/console.sol";

// Imports (solecs, components, systems)
import "deployment/Imports.sol";

library LibDeploy {
function deploy(
address _world,
address owner,
bool _reuseComponents,
bool hasPerms
) internal returns (World world) {

// ------------------------
// Deploy
// ------------------------

// Deploy world
world = _world == address(0) ? new World() : World(_world);
if(_world == address(0)) world.init(); // Init if it's a fresh world

// Deploy components
if(!_reuseComponents) {
BareComponent comp;
<% components.forEach(component=> { %>
console.log("Deploying <%= component.comp %>Component");
comp = new <%= component.comp %>Component(address(world));
if (hasPerms) {
  world.registerComponent{ gas: 400000 }(address(comp), <%= component.comp %>ComponentID);
} else {
  comp.transferOwnership{ gas: 400000 }(owner);
}
console.log(address(comp));
<% });%>
}

// Deploy systems
deploySystems(world, owner, hasPerms);
}


function authorizeWriter(
IUint256Component components,
uint256 componentId,
address writer
) internal {
Component(getAddrByID(components, componentId)).authorizeWriter{ gas: 400000 }(writer);
}

function unauthorizeWriter(
IUint256Component components,
uint256 componentId,
address writer
) internal {
Component(getAddrByID(components, componentId)).unauthorizeWriter{ gas: 400000 }(writer);
}

function deploySystems(World world, address owner, bool hasPerms) internal {
IUint256Component components = world.components();
IUint256Component systems = world.systems();
System system;

// Deploy systems
<% systems.forEach(system=> { %>
  console.log("Deploying <%= system.name %>");
  system = new <%= system.name %>(world, address(components));
  console.log(address(system));

  // if world owner is deployer, deprecate and register new system 
  if (hasPerms) {
    // unauthorizing previous system (if any)
      if(systems.getEntitiesWithValue(<%= system.name %>ID).length > 0) {
        address prevSysAddr = getAddrByID(systems, <%= system.name %>ID);
        console.log("unauthorizing writer for previous <%= system.name %> at address %s", prevSysAddr);

        <%= system.name %>(prevSysAddr).deprecate{ gas: 400000 }();
        <% system.writeAccess?.forEach(component=> { -%>
          <% if(component==="*" ) { -%>
          <% components.forEach(comp=> { -%>
          unauthorizeWriter(components, <%= comp.comp %>ComponentID, address(prevSysAddr));
          <% });-%>
          <% } else { -%>
          unauthorizeWriter(components, <%= component %>ComponentID, address(prevSysAddr));
          <% } -%>
          <% });-%>
      }

    world.registerSystem{ gas: 400000 }(address(system), <%= system.name %>ID);
    <% system.writeAccess?.forEach(component=> { -%>
    <% if(component==="*" ) { -%>
    <% components.forEach(comp=> { -%>
          <% if(!protectedComponents.includes(comp.comp)) { -%> 
    authorizeWriter(components, <%= comp.comp %>ComponentID, address(system));
          <% } -%> 
    <% });-%>
    <% } else { -%>
    authorizeWriter(components, <%= component %>ComponentID, address(system));
    <% } -%>
    <% });-%>
    }
  else {
    // world owner is multisig, transfer new system owner
    system.transferOwnership{ gas: 400000 }(owner);
  }
<% });%>
}

function transferOwner(World world, address newOwner, bool reuseComps) internal {
  IUint256Component components = world.components();
  IUint256Component systems = world.systems();
  
  System system;
  Component component;

  <% systems.forEach(system=> { -%>
    system = System(getAddrByID(systems, <%= system.name %>ID));
    system.transferOwnership{ gas: 400000 }(newOwner);
    <% });-%> 

  if (!reuseComps) {
    <% components.forEach(component=> { -%>
      component = Component(getAddrByID(components, <%= component.comp %>ComponentID));
      component.transferOwnership{ gas: 400000 }(newOwner);
      <% });-%>
    }
  }
}