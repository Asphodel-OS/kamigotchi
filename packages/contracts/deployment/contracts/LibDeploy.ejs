// SPDX-License-Identifier: Unlicense
pragma solidity >=0.8.28;

// Foundry
import { DSTest } from "ds-test/test.sol";
import { console } from "forge-std/console.sol";

// Imports (solecs, components, systems)
import "deployment/Imports.sol";

struct DeployResult {
World world;
address deployer;
}

library LibDeploy {
function deploy(
address _deployer,
address _world,
bool _reuseComponents
) internal returns (DeployResult memory result) {
result.deployer = _deployer;

// ------------------------
// Deploy
// ------------------------

// Deploy world
result.world = _world == address(0) ? new World() : World(_world);
if(_world == address(0)) result.world.init(); // Init if it's a fresh world

// Deploy components
if(!_reuseComponents) {
IComponent comp;
<% components.forEach(component=> { %>
console.log("Deploying <%= component.comp %>Component");
comp = new <%= component.comp %>Component(address(result.world));
result.world.registerComponent(address(comp), <%= component.comp %>ComponentID);
console.log(address(comp));
<% });%>
}

deploySystems(address(result.world), true);
}


function authorizeWriter(
IUint256Component components,
uint256 componentId,
address writer
) internal {
Component(getAddrByID(components, componentId)).authorizeWriter(writer);
}

function unauthorizeWriter(
IUint256Component components,
uint256 componentId,
address writer
) internal {
Component(getAddrByID(components, componentId)).unauthorizeWriter(writer);
}

function deploySystems(address _world, bool init) internal {
World world = World(_world);
IUint256Component components = world.components();
IUint256Component systems = world.systems();
ISystem system;

// Deploy systems
<% systems.forEach(system=> { %>
// unauthorizing previous system (if any)
if(systems.getEntitiesWithValue(<%= system.name %>ID).length > 0) {
  address prevSysAddr = getAddrByID(systems, <%= system.name %>ID);
  console.log("unauthorizing writer for previous <%= system.name %> at address %s", prevSysAddr);

  //<%= system.name %>(prevSysAddr).deprecate();
  <% system.writeAccess?.forEach(component=> { -%>
    <% if(component==="*" ) { -%>
    <% components.forEach(comp=> { -%>
    unauthorizeWriter(components, <%= comp.comp %>ComponentID, address(prevSysAddr));
    <% });-%>
    <% } else { -%>
    unauthorizeWriter(components, <%= component %>ComponentID, address(prevSysAddr));
    <% } -%>
    <% });-%>
}
console.log("Deploying <%= system.name %>");
system = new <%= system.name %>(world, address(components));
world.registerSystem(address(system), <%= system.name %>ID);
<% system.writeAccess?.forEach(component=> { -%>
<% if(component==="*" ) { -%>
<% components.forEach(comp=> { -%>
      <% if(!protectedComponents.includes(comp.comp)) { -%> 
authorizeWriter(components, <%= comp.comp %>ComponentID, address(system));
      <% } -%> 
<% });-%>
<% } else { -%>
authorizeWriter(components, <%= component %>ComponentID, address(system));
<% } -%>
<% });-%>
<% if(system.initialize) { -%>
if(init) system.execute(<%= system.initialize -%>);
<% } -%>
console.log(address(system));
<% });%>
}

function transferOwner(address newOwner, IWorld world, bool reuseComps) internal {
  IUint256Component components = world.components();
  IUint256Component systems = world.systems();
  
  System system;
  Component component;

  <% systems.forEach(system=> { -%>
    system = System(getAddrByID(systems, <%= system.name %>ID));
    system.transferOwnership(newOwner);
    <% });-%> 

  if (!reuseComps) {
    <% components.forEach(component=> { -%>
      component = Component(getAddrByID(components, <%= component.comp %>ComponentID));
      component.transferOwnership(newOwner);
      <% });-%>
    }
  }
}