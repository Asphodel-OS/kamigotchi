// SPDX-License-Identifier: MIT 
pragma solidity >=0.8.0;

// NOTE: This file is autogenerated via `mud codegen-libdeploy` from `deploy.json`. Do not edit manually.

// Foundry
import { DSTest } from "ds-test/test.sol";
import { console } from "forge-std/console.sol";

// Solecs 
import { IWorld } from "solecs/interfaces/IWorld.sol";
import { World } from "solecs/World.sol";
import { IComponent } from "solecs/interfaces/IComponent.sol";
import { getAddressById } from "solecs/utils.sol";
import { IUint256Component } from "solecs/interfaces/IUint256Component.sol";
import { ISystem } from "solecs/interfaces/ISystem.sol";

// Components (requires 'components=...' remapping in project's remappings.txt)
import { AddressOperatorComponent, ID as AddressOperatorComponentID } from "components/AddressOperatorComponent.sol";
import { AddressOwnerComponent, ID as AddressOwnerComponentID } from "components/AddressOwnerComponent.sol";
import { AffinityComponent, ID as AffinityComponentID } from "components/AffinityComponent.sol";
import { BalanceComponent, ID as BalanceComponentID } from "components/BalanceComponent.sol";
import { BlockLastComponent, ID as BlockLastComponentID } from "components/BlockLastComponent.sol";
import { BlockRevealComponent, ID as BlockRevealComponentID } from "components/BlockRevealComponent.sol";
import { CanNameComponent, ID as CanNameComponentID } from "components/CanNameComponent.sol";
import { CoinComponent, ID as CoinComponentID } from "components/CoinComponent.sol";
import { DescriptionComponent, ID as DescriptionComponentID } from "components/DescriptionComponent.sol";
import { EpochComponent, ID as EpochComponentID } from "components/EpochComponent.sol";
import { ExitsComponent, ID as ExitsComponentID } from "components/ExitsComponent.sol";
import { ExperienceComponent, ID as ExperienceComponentID } from "components/ExperienceComponent.sol";
import { GenusComponent, ID as GenusComponentID } from "components/GenusComponent.sol";
import { HarmonyComponent, ID as HarmonyComponentID } from "components/HarmonyComponent.sol";
import { HealthComponent, ID as HealthComponentID } from "components/HealthComponent.sol";
import { HealthCurrentComponent, ID as HealthCurrentComponentID } from "components/HealthCurrentComponent.sol";
import { IdAccountComponent, ID as IdAccountComponentID } from "components/IdAccountComponent.sol";
import { IdDelegateeComponent, ID as IdDelegateeComponentID } from "components/IdDelegateeComponent.sol";
import { IdDelegatorComponent, ID as IdDelegatorComponentID } from "components/IdDelegatorComponent.sol";
import { IdHolderComponent, ID as IdHolderComponentID } from "components/IdHolderComponent.sol";
import { IdNodeComponent, ID as IdNodeComponentID } from "components/IdNodeComponent.sol";
import { IdPetComponent, ID as IdPetComponentID } from "components/IdPetComponent.sol";
import { IdSourceComponent, ID as IdSourceComponentID } from "components/IdSourceComponent.sol";
import { IdTargetComponent, ID as IdTargetComponentID } from "components/IdTargetComponent.sol";
import { IndexBackgroundComponent, ID as IndexBackgroundComponentID } from "components/IndexBackgroundComponent.sol";
import { IndexBodyComponent, ID as IndexBodyComponentID } from "components/IndexBodyComponent.sol";
import { IndexColorComponent, ID as IndexColorComponentID } from "components/IndexColorComponent.sol";
import { IndexFaceComponent, ID as IndexFaceComponentID } from "components/IndexFaceComponent.sol";
import { IndexFoodComponent, ID as IndexFoodComponentID } from "components/IndexFoodComponent.sol";
import { IndexGearComponent, ID as IndexGearComponentID } from "components/IndexGearComponent.sol";
import { IndexHandComponent, ID as IndexHandComponentID } from "components/IndexHandComponent.sol";
import { IndexItemComponent, ID as IndexItemComponentID } from "components/IndexItemComponent.sol";
import { IndexMerchantComponent, ID as IndexMerchantComponentID } from "components/IndexMerchantComponent.sol";
import { IndexModComponent, ID as IndexModComponentID } from "components/IndexModComponent.sol";
import { IndexNodeComponent, ID as IndexNodeComponentID } from "components/IndexNodeComponent.sol";
import { IndexPetComponent, ID as IndexPetComponentID } from "components/IndexPetComponent.sol";
import { IndexReviveComponent, ID as IndexReviveComponentID } from "components/IndexReviveComponent.sol";
import { IndexTraitComponent, ID as IndexTraitComponentID } from "components/IndexTraitComponent.sol";
import { IsAccountComponent, ID as IsAccountComponentID } from "components/IsAccountComponent.sol";
import { IsConfigComponent, ID as IsConfigComponentID } from "components/IsConfigComponent.sol";
import { IsDataComponent, ID as IsDataComponentID } from "components/IsDataComponent.sol";
import { IsEquippedComponent, ID as IsEquippedComponentID } from "components/IsEquippedComponent.sol";
import { IsFungibleComponent, ID as IsFungibleComponentID } from "components/IsFungibleComponent.sol";
import { IsInventoryComponent, ID as IsInventoryComponentID } from "components/IsInventoryComponent.sol";
import { IsKillComponent, ID as IsKillComponentID } from "components/IsKillComponent.sol";
import { IsListingComponent, ID as IsListingComponentID } from "components/IsListingComponent.sol";
import { IsMerchantComponent, ID as IsMerchantComponentID } from "components/IsMerchantComponent.sol";
import { IsNodeComponent, ID as IsNodeComponentID } from "components/IsNodeComponent.sol";
import { IsNonFungibleComponent, ID as IsNonFungibleComponentID } from "components/IsNonFungibleComponent.sol";
import { IsPetComponent, ID as IsPetComponentID } from "components/IsPetComponent.sol";
import { IsProductionComponent, ID as IsProductionComponentID } from "components/IsProductionComponent.sol";
import { IsRegistryComponent, ID as IsRegistryComponentID } from "components/IsRegistryComponent.sol";
import { IsRoomComponent, ID as IsRoomComponentID } from "components/IsRoomComponent.sol";
import { IsScoreComponent, ID as IsScoreComponentID } from "components/IsScoreComponent.sol";
import { IsTraitComponent, ID as IsTraitComponentID } from "components/IsTraitComponent.sol";
import { LocationComponent, ID as LocationComponentID } from "components/LocationComponent.sol";
import { MediaURIComponent, ID as MediaURIComponentID } from "components/MediaURIComponent.sol";
import { NameComponent, ID as NameComponentID } from "components/NameComponent.sol";
import { PowerComponent, ID as PowerComponentID } from "components/PowerComponent.sol";
import { PriceBuyComponent, ID as PriceBuyComponentID } from "components/PriceBuyComponent.sol";
import { PriceSellComponent, ID as PriceSellComponentID } from "components/PriceSellComponent.sol";
import { PrototypeComponent, ID as PrototypeComponentID } from "components/PrototypeComponent.sol";
import { ProxyPermissionsFarm20Component, ID as ProxyPermissionsFarm20ComponentID } from "components/ProxyPermissionsFarm20Component.sol";
import { ProxyPermissionsERC721Component, ID as ProxyPermissionsERC721ComponentID } from "components/ProxyPermissionsERC721Component.sol";
import { ProxyPermissionsMint20Component, ID as ProxyPermissionsMint20ComponentID } from "components/ProxyPermissionsMint20Component.sol";
import { RarityComponent, ID as RarityComponentID } from "components/RarityComponent.sol";
import { RateComponent, ID as RateComponentID } from "components/RateComponent.sol";
import { SlotsComponent, ID as SlotsComponentID } from "components/SlotsComponent.sol";
import { StaminaComponent, ID as StaminaComponentID } from "components/StaminaComponent.sol";
import { StaminaCurrentComponent, ID as StaminaCurrentComponentID } from "components/StaminaCurrentComponent.sol";
import { StateComponent, ID as StateComponentID } from "components/StateComponent.sol";
import { TimeComponent, ID as TimeComponentID } from "components/TimeComponent.sol";
import { TimeLastActionComponent, ID as TimeLastActionComponentID } from "components/TimeLastActionComponent.sol";
import { TimeStartComponent, ID as TimeStartComponentID } from "components/TimeStartComponent.sol";
import { TypeComponent, ID as TypeComponentID } from "components/TypeComponent.sol";
import { UpgradesComponent, ID as UpgradesComponentID } from "components/UpgradesComponent.sol";
import { ValueComponent, ID as ValueComponentID } from "components/ValueComponent.sol";
import { ViolenceComponent, ID as ViolenceComponentID } from "components/ViolenceComponent.sol";

// Systems (requires 'systems=...' remapping in project's remappings.txt)
import { _InitSystem, ID as _InitSystemID } from "systems/_InitSystem.sol";
import { _devGiveTokensSystem, ID as _devGiveTokensSystemID } from "systems/_devGiveTokensSystem.sol";
import { _ConfigSetSystem, ID as _ConfigSetSystemID } from "systems/_ConfigSetSystem.sol";
import { _ConfigSetStringSystem, ID as _ConfigSetStringSystemID } from "systems/_ConfigSetStringSystem.sol";
import { _ListingSetSystem, ID as _ListingSetSystemID } from "systems/_ListingSetSystem.sol";
import { _MerchantCreateSystem, ID as _MerchantCreateSystemID } from "systems/_MerchantCreateSystem.sol";
import { _MerchantSetLocationSystem, ID as _MerchantSetLocationSystemID } from "systems/_MerchantSetLocationSystem.sol";
import { _MerchantSetNameSystem, ID as _MerchantSetNameSystemID } from "systems/_MerchantSetNameSystem.sol";
import { _NodeCreateSystem, ID as _NodeCreateSystemID } from "systems/_NodeCreateSystem.sol";
import { _NodeSetAffinitySystem, ID as _NodeSetAffinitySystemID } from "systems/_NodeSetAffinitySystem.sol";
import { _NodeSetDescriptionSystem, ID as _NodeSetDescriptionSystemID } from "systems/_NodeSetDescriptionSystem.sol";
import { _NodeSetLocationSystem, ID as _NodeSetLocationSystemID } from "systems/_NodeSetLocationSystem.sol";
import { _NodeSetNameSystem, ID as _NodeSetNameSystemID } from "systems/_NodeSetNameSystem.sol";
import { _RegistryCreateFoodSystem, ID as _RegistryCreateFoodSystemID } from "systems/_RegistryCreateFoodSystem.sol";
import { _RegistryCreateGearSystem, ID as _RegistryCreateGearSystemID } from "systems/_RegistryCreateGearSystem.sol";
import { _RegistryCreateModSystem, ID as _RegistryCreateModSystemID } from "systems/_RegistryCreateModSystem.sol";
import { _RegistryCreateReviveSystem, ID as _RegistryCreateReviveSystemID } from "systems/_RegistryCreateReviveSystem.sol";
import { _RegistryCreateTraitSystem, ID as _RegistryCreateTraitSystemID } from "systems/_RegistryCreateTraitSystem.sol";
import { _RegistryUpdateFoodSystem, ID as _RegistryUpdateFoodSystemID } from "systems/_RegistryUpdateFoodSystem.sol";
import { _RegistryUpdateGearSystem, ID as _RegistryUpdateGearSystemID } from "systems/_RegistryUpdateGearSystem.sol";
import { _RegistryUpdateModSystem, ID as _RegistryUpdateModSystemID } from "systems/_RegistryUpdateModSystem.sol";
import { _RegistryUpdateReviveSystem, ID as _RegistryUpdateReviveSystemID } from "systems/_RegistryUpdateReviveSystem.sol";
import { _RegistryUpdateTraitSystem, ID as _RegistryUpdateTraitSystemID } from "systems/_RegistryUpdateTraitSystem.sol";
import { _RoomCreateSystem, ID as _RoomCreateSystemID } from "systems/_RoomCreateSystem.sol";
import { _RoomSetExitsSystem, ID as _RoomSetExitsSystemID } from "systems/_RoomSetExitsSystem.sol";
import { _RoomSetNameSystem, ID as _RoomSetNameSystemID } from "systems/_RoomSetNameSystem.sol";
import { AccountFundSystem, ID as AccountFundSystemID } from "systems/AccountFundSystem.sol";
import { AccountMoveSystem, ID as AccountMoveSystemID } from "systems/AccountMoveSystem.sol";
import { AccountSetNameSystem, ID as AccountSetNameSystemID } from "systems/AccountSetNameSystem.sol";
import { AccountSetOperatorSystem, ID as AccountSetOperatorSystemID } from "systems/AccountSetOperatorSystem.sol";
import { AccountRegisterSystem, ID as AccountRegisterSystemID } from "systems/AccountRegisterSystem.sol";
import { Farm20ProxySystem, ID as Farm20ProxySystemID } from "systems/Farm20ProxySystem.sol";
import { Farm20WithdrawSystem, ID as Farm20WithdrawSystemID } from "systems/Farm20WithdrawSystem.sol";
import { Farm20DepositSystem, ID as Farm20DepositSystemID } from "systems/Farm20DepositSystem.sol";
import { ERC721MetadataSystem, ID as ERC721MetadataSystemID } from "systems/ERC721MetadataSystem.sol";
import { ERC721MintSystem, ID as ERC721MintSystemID } from "systems/ERC721MintSystem.sol";
import { ERC721RevealSystem, ID as ERC721RevealSystemID } from "systems/ERC721RevealSystem.sol";
import { ERC721TransferSystem, ID as ERC721TransferSystemID } from "systems/ERC721TransferSystem.sol";
import { ERC721ProxySystem, ID as ERC721ProxySystemID } from "systems/ERC721ProxySystem.sol";
import { ERC721UnstakeSystem, ID as ERC721UnstakeSystemID } from "systems/ERC721UnstakeSystem.sol";
import { ERC721StakeSystem, ID as ERC721StakeSystemID } from "systems/ERC721StakeSystem.sol";
import { ListingBuySystem, ID as ListingBuySystemID } from "systems/ListingBuySystem.sol";
import { ListingSellSystem, ID as ListingSellSystemID } from "systems/ListingSellSystem.sol";
import { NodeCollectSystem, ID as NodeCollectSystemID } from "systems/NodeCollectSystem.sol";
import { Mint20ProxySystem, ID as Mint20ProxySystemID } from "systems/Mint20ProxySystem.sol";
import { Mint20MintSystem, ID as Mint20MintSystemID } from "systems/Mint20MintSystem.sol";
import { PetFeedSystem, ID as PetFeedSystemID } from "systems/PetFeedSystem.sol";
import { PetNameSystem, ID as PetNameSystemID } from "systems/PetNameSystem.sol";
import { PetReviveSystem, ID as PetReviveSystemID } from "systems/PetReviveSystem.sol";
import { PetSetAccountSystem, ID as PetSetAccountSystemID } from "systems/PetSetAccountSystem.sol";
import { ProductionCollectSystem, ID as ProductionCollectSystemID } from "systems/ProductionCollectSystem.sol";
import { ProductionLiquidateSystem, ID as ProductionLiquidateSystemID } from "systems/ProductionLiquidateSystem.sol";
import { ProductionStartSystem, ID as ProductionStartSystemID } from "systems/ProductionStartSystem.sol";
import { ProductionStopSystem, ID as ProductionStopSystemID } from "systems/ProductionStopSystem.sol";

struct DeployResult {
  IWorld world;
  address deployer;
}

library LibDeploy {
  function deploy(
    address _deployer,
    address _world,
    bool _reuseComponents
  ) internal returns (DeployResult memory result) {
    result.deployer = _deployer;

    // ------------------------
    // Deploy 
    // ------------------------

    // Deploy world
    result.world = _world == address(0) ? new World() : IWorld(_world);
    if (_world == address(0)) result.world.init(); // Init if it's a fresh world

    // Deploy components
    if (!_reuseComponents) {
      IComponent comp;

      console.log("Deploying AddressOperatorComponent");
      comp = new AddressOperatorComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying AddressOwnerComponent");
      comp = new AddressOwnerComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying AffinityComponent");
      comp = new AffinityComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying BalanceComponent");
      comp = new BalanceComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying BlockLastComponent");
      comp = new BlockLastComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying BlockRevealComponent");
      comp = new BlockRevealComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying CanNameComponent");
      comp = new CanNameComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying CoinComponent");
      comp = new CoinComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying DescriptionComponent");
      comp = new DescriptionComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying EpochComponent");
      comp = new EpochComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying ExitsComponent");
      comp = new ExitsComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying ExperienceComponent");
      comp = new ExperienceComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying GenusComponent");
      comp = new GenusComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying HarmonyComponent");
      comp = new HarmonyComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying HealthComponent");
      comp = new HealthComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying HealthCurrentComponent");
      comp = new HealthCurrentComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IdAccountComponent");
      comp = new IdAccountComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IdDelegateeComponent");
      comp = new IdDelegateeComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IdDelegatorComponent");
      comp = new IdDelegatorComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IdHolderComponent");
      comp = new IdHolderComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IdNodeComponent");
      comp = new IdNodeComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IdPetComponent");
      comp = new IdPetComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IdSourceComponent");
      comp = new IdSourceComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IdTargetComponent");
      comp = new IdTargetComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IndexBackgroundComponent");
      comp = new IndexBackgroundComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IndexBodyComponent");
      comp = new IndexBodyComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IndexColorComponent");
      comp = new IndexColorComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IndexFaceComponent");
      comp = new IndexFaceComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IndexFoodComponent");
      comp = new IndexFoodComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IndexGearComponent");
      comp = new IndexGearComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IndexHandComponent");
      comp = new IndexHandComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IndexItemComponent");
      comp = new IndexItemComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IndexMerchantComponent");
      comp = new IndexMerchantComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IndexModComponent");
      comp = new IndexModComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IndexNodeComponent");
      comp = new IndexNodeComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IndexPetComponent");
      comp = new IndexPetComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IndexReviveComponent");
      comp = new IndexReviveComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IndexTraitComponent");
      comp = new IndexTraitComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IsAccountComponent");
      comp = new IsAccountComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IsConfigComponent");
      comp = new IsConfigComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IsDataComponent");
      comp = new IsDataComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IsEquippedComponent");
      comp = new IsEquippedComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IsFungibleComponent");
      comp = new IsFungibleComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IsInventoryComponent");
      comp = new IsInventoryComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IsKillComponent");
      comp = new IsKillComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IsListingComponent");
      comp = new IsListingComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IsMerchantComponent");
      comp = new IsMerchantComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IsNodeComponent");
      comp = new IsNodeComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IsNonFungibleComponent");
      comp = new IsNonFungibleComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IsPetComponent");
      comp = new IsPetComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IsProductionComponent");
      comp = new IsProductionComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IsRegistryComponent");
      comp = new IsRegistryComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IsRoomComponent");
      comp = new IsRoomComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IsScoreComponent");
      comp = new IsScoreComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying IsTraitComponent");
      comp = new IsTraitComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying LocationComponent");
      comp = new LocationComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying MediaURIComponent");
      comp = new MediaURIComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying NameComponent");
      comp = new NameComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying PowerComponent");
      comp = new PowerComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying PriceBuyComponent");
      comp = new PriceBuyComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying PriceSellComponent");
      comp = new PriceSellComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying PrototypeComponent");
      comp = new PrototypeComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying ProxyPermissionsFarm20Component");
      comp = new ProxyPermissionsFarm20Component(address(result.world));
      console.log(address(comp));

      console.log("Deploying ProxyPermissionsERC721Component");
      comp = new ProxyPermissionsERC721Component(address(result.world));
      console.log(address(comp));

      console.log("Deploying ProxyPermissionsMint20Component");
      comp = new ProxyPermissionsMint20Component(address(result.world));
      console.log(address(comp));

      console.log("Deploying RarityComponent");
      comp = new RarityComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying RateComponent");
      comp = new RateComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying SlotsComponent");
      comp = new SlotsComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying StaminaComponent");
      comp = new StaminaComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying StaminaCurrentComponent");
      comp = new StaminaCurrentComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying StateComponent");
      comp = new StateComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying TimeComponent");
      comp = new TimeComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying TimeLastActionComponent");
      comp = new TimeLastActionComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying TimeStartComponent");
      comp = new TimeStartComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying TypeComponent");
      comp = new TypeComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying UpgradesComponent");
      comp = new UpgradesComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying ValueComponent");
      comp = new ValueComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying ViolenceComponent");
      comp = new ViolenceComponent(address(result.world));
      console.log(address(comp));
    } 
    
    // Deploy systems 
    deploySystems(address(result.world), true);
  }
  
  function authorizeWriter(
    IUint256Component components,
    uint256 componentId,
    address writer
  ) internal {
    IComponent(getAddressById(components, componentId)).authorizeWriter(writer);
  }
  
  /**
   * Deploy systems to the given world.
   * If `init` flag is set, systems with `initialize` setting in `deploy.json` will be executed.
   */
  function deploySystems(
    address _world,
    bool init
  ) internal {
    IWorld world = IWorld(_world);
    // Deploy systems
    ISystem system; 
    IUint256Component components = world.components();

    console.log("Deploying _InitSystem");
    system = new _InitSystem(world, address(components));
    world.registerSystem(address(system), _InitSystemID);
    authorizeWriter(components, AddressOperatorComponentID, address(system));
    authorizeWriter(components, AddressOwnerComponentID, address(system));
    authorizeWriter(components, AffinityComponentID, address(system));
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, BlockRevealComponentID, address(system));
    authorizeWriter(components, CanNameComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, DescriptionComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, ExitsComponentID, address(system));
    authorizeWriter(components, ExperienceComponentID, address(system));
    authorizeWriter(components, GenusComponentID, address(system));
    authorizeWriter(components, HarmonyComponentID, address(system));
    authorizeWriter(components, HealthComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, IdAccountComponentID, address(system));
    authorizeWriter(components, IdDelegateeComponentID, address(system));
    authorizeWriter(components, IdDelegatorComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IdNodeComponentID, address(system));
    authorizeWriter(components, IdPetComponentID, address(system));
    authorizeWriter(components, IdSourceComponentID, address(system));
    authorizeWriter(components, IdTargetComponentID, address(system));
    authorizeWriter(components, IndexBackgroundComponentID, address(system));
    authorizeWriter(components, IndexBodyComponentID, address(system));
    authorizeWriter(components, IndexColorComponentID, address(system));
    authorizeWriter(components, IndexFaceComponentID, address(system));
    authorizeWriter(components, IndexFoodComponentID, address(system));
    authorizeWriter(components, IndexGearComponentID, address(system));
    authorizeWriter(components, IndexHandComponentID, address(system));
    authorizeWriter(components, IndexItemComponentID, address(system));
    authorizeWriter(components, IndexMerchantComponentID, address(system));
    authorizeWriter(components, IndexModComponentID, address(system));
    authorizeWriter(components, IndexNodeComponentID, address(system));
    authorizeWriter(components, IndexPetComponentID, address(system));
    authorizeWriter(components, IndexReviveComponentID, address(system));
    authorizeWriter(components, IndexTraitComponentID, address(system));
    authorizeWriter(components, IsAccountComponentID, address(system));
    authorizeWriter(components, IsConfigComponentID, address(system));
    authorizeWriter(components, IsDataComponentID, address(system));
    authorizeWriter(components, IsEquippedComponentID, address(system));
    authorizeWriter(components, IsFungibleComponentID, address(system));
    authorizeWriter(components, IsInventoryComponentID, address(system));
    authorizeWriter(components, IsKillComponentID, address(system));
    authorizeWriter(components, IsListingComponentID, address(system));
    authorizeWriter(components, IsMerchantComponentID, address(system));
    authorizeWriter(components, IsNodeComponentID, address(system));
    authorizeWriter(components, IsNonFungibleComponentID, address(system));
    authorizeWriter(components, IsPetComponentID, address(system));
    authorizeWriter(components, IsProductionComponentID, address(system));
    authorizeWriter(components, IsRegistryComponentID, address(system));
    authorizeWriter(components, IsRoomComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, IsTraitComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, MediaURIComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, PowerComponentID, address(system));
    authorizeWriter(components, PriceBuyComponentID, address(system));
    authorizeWriter(components, PriceSellComponentID, address(system));
    authorizeWriter(components, PrototypeComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
    authorizeWriter(components, RarityComponentID, address(system));
    authorizeWriter(components, RateComponentID, address(system));
    authorizeWriter(components, SlotsComponentID, address(system));
    authorizeWriter(components, StaminaComponentID, address(system));
    authorizeWriter(components, StaminaCurrentComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    authorizeWriter(components, TimeComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TimeStartComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    authorizeWriter(components, UpgradesComponentID, address(system));
    authorizeWriter(components, ValueComponentID, address(system));
    authorizeWriter(components, ViolenceComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _devGiveTokensSystem");
    system = new _devGiveTokensSystem(world, address(components));
    world.registerSystem(address(system), _devGiveTokensSystemID);
    authorizeWriter(components, CoinComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _ConfigSetSystem");
    system = new _ConfigSetSystem(world, address(components));
    world.registerSystem(address(system), _ConfigSetSystemID);
    authorizeWriter(components, IsConfigComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, ValueComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _ConfigSetStringSystem");
    system = new _ConfigSetStringSystem(world, address(components));
    world.registerSystem(address(system), _ConfigSetStringSystemID);
    authorizeWriter(components, IsConfigComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, ValueComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _ListingSetSystem");
    system = new _ListingSetSystem(world, address(components));
    world.registerSystem(address(system), _ListingSetSystemID);
    authorizeWriter(components, IsListingComponentID, address(system));
    authorizeWriter(components, IndexItemComponentID, address(system));
    authorizeWriter(components, IndexMerchantComponentID, address(system));
    authorizeWriter(components, PriceBuyComponentID, address(system));
    authorizeWriter(components, PriceSellComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _MerchantCreateSystem");
    system = new _MerchantCreateSystem(world, address(components));
    world.registerSystem(address(system), _MerchantCreateSystemID);
    authorizeWriter(components, IsMerchantComponentID, address(system));
    authorizeWriter(components, IndexMerchantComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _MerchantSetLocationSystem");
    system = new _MerchantSetLocationSystem(world, address(components));
    world.registerSystem(address(system), _MerchantSetLocationSystemID);
    authorizeWriter(components, LocationComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _MerchantSetNameSystem");
    system = new _MerchantSetNameSystem(world, address(components));
    world.registerSystem(address(system), _MerchantSetNameSystemID);
    authorizeWriter(components, NameComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _NodeCreateSystem");
    system = new _NodeCreateSystem(world, address(components));
    world.registerSystem(address(system), _NodeCreateSystemID);
    authorizeWriter(components, IsNodeComponentID, address(system));
    authorizeWriter(components, AffinityComponentID, address(system));
    authorizeWriter(components, DescriptionComponentID, address(system));
    authorizeWriter(components, IndexNodeComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _NodeSetAffinitySystem");
    system = new _NodeSetAffinitySystem(world, address(components));
    world.registerSystem(address(system), _NodeSetAffinitySystemID);
    authorizeWriter(components, AffinityComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _NodeSetDescriptionSystem");
    system = new _NodeSetDescriptionSystem(world, address(components));
    world.registerSystem(address(system), _NodeSetDescriptionSystemID);
    authorizeWriter(components, DescriptionComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _NodeSetLocationSystem");
    system = new _NodeSetLocationSystem(world, address(components));
    world.registerSystem(address(system), _NodeSetLocationSystemID);
    authorizeWriter(components, LocationComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _NodeSetNameSystem");
    system = new _NodeSetNameSystem(world, address(components));
    world.registerSystem(address(system), _NodeSetNameSystemID);
    authorizeWriter(components, NameComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _RegistryCreateFoodSystem");
    system = new _RegistryCreateFoodSystem(world, address(components));
    world.registerSystem(address(system), _RegistryCreateFoodSystemID);
    authorizeWriter(components, AddressOperatorComponentID, address(system));
    authorizeWriter(components, AddressOwnerComponentID, address(system));
    authorizeWriter(components, AffinityComponentID, address(system));
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, BlockRevealComponentID, address(system));
    authorizeWriter(components, CanNameComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, DescriptionComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, ExitsComponentID, address(system));
    authorizeWriter(components, ExperienceComponentID, address(system));
    authorizeWriter(components, GenusComponentID, address(system));
    authorizeWriter(components, HarmonyComponentID, address(system));
    authorizeWriter(components, HealthComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, IdAccountComponentID, address(system));
    authorizeWriter(components, IdDelegateeComponentID, address(system));
    authorizeWriter(components, IdDelegatorComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IdNodeComponentID, address(system));
    authorizeWriter(components, IdPetComponentID, address(system));
    authorizeWriter(components, IdSourceComponentID, address(system));
    authorizeWriter(components, IdTargetComponentID, address(system));
    authorizeWriter(components, IndexBackgroundComponentID, address(system));
    authorizeWriter(components, IndexBodyComponentID, address(system));
    authorizeWriter(components, IndexColorComponentID, address(system));
    authorizeWriter(components, IndexFaceComponentID, address(system));
    authorizeWriter(components, IndexFoodComponentID, address(system));
    authorizeWriter(components, IndexGearComponentID, address(system));
    authorizeWriter(components, IndexHandComponentID, address(system));
    authorizeWriter(components, IndexItemComponentID, address(system));
    authorizeWriter(components, IndexMerchantComponentID, address(system));
    authorizeWriter(components, IndexModComponentID, address(system));
    authorizeWriter(components, IndexNodeComponentID, address(system));
    authorizeWriter(components, IndexPetComponentID, address(system));
    authorizeWriter(components, IndexReviveComponentID, address(system));
    authorizeWriter(components, IndexTraitComponentID, address(system));
    authorizeWriter(components, IsAccountComponentID, address(system));
    authorizeWriter(components, IsConfigComponentID, address(system));
    authorizeWriter(components, IsDataComponentID, address(system));
    authorizeWriter(components, IsEquippedComponentID, address(system));
    authorizeWriter(components, IsFungibleComponentID, address(system));
    authorizeWriter(components, IsInventoryComponentID, address(system));
    authorizeWriter(components, IsKillComponentID, address(system));
    authorizeWriter(components, IsListingComponentID, address(system));
    authorizeWriter(components, IsMerchantComponentID, address(system));
    authorizeWriter(components, IsNodeComponentID, address(system));
    authorizeWriter(components, IsNonFungibleComponentID, address(system));
    authorizeWriter(components, IsPetComponentID, address(system));
    authorizeWriter(components, IsProductionComponentID, address(system));
    authorizeWriter(components, IsRegistryComponentID, address(system));
    authorizeWriter(components, IsRoomComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, IsTraitComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, MediaURIComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, PowerComponentID, address(system));
    authorizeWriter(components, PriceBuyComponentID, address(system));
    authorizeWriter(components, PriceSellComponentID, address(system));
    authorizeWriter(components, PrototypeComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
    authorizeWriter(components, RarityComponentID, address(system));
    authorizeWriter(components, RateComponentID, address(system));
    authorizeWriter(components, SlotsComponentID, address(system));
    authorizeWriter(components, StaminaComponentID, address(system));
    authorizeWriter(components, StaminaCurrentComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    authorizeWriter(components, TimeComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TimeStartComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    authorizeWriter(components, UpgradesComponentID, address(system));
    authorizeWriter(components, ValueComponentID, address(system));
    authorizeWriter(components, ViolenceComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _RegistryCreateGearSystem");
    system = new _RegistryCreateGearSystem(world, address(components));
    world.registerSystem(address(system), _RegistryCreateGearSystemID);
    authorizeWriter(components, AddressOperatorComponentID, address(system));
    authorizeWriter(components, AddressOwnerComponentID, address(system));
    authorizeWriter(components, AffinityComponentID, address(system));
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, BlockRevealComponentID, address(system));
    authorizeWriter(components, CanNameComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, DescriptionComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, ExitsComponentID, address(system));
    authorizeWriter(components, ExperienceComponentID, address(system));
    authorizeWriter(components, GenusComponentID, address(system));
    authorizeWriter(components, HarmonyComponentID, address(system));
    authorizeWriter(components, HealthComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, IdAccountComponentID, address(system));
    authorizeWriter(components, IdDelegateeComponentID, address(system));
    authorizeWriter(components, IdDelegatorComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IdNodeComponentID, address(system));
    authorizeWriter(components, IdPetComponentID, address(system));
    authorizeWriter(components, IdSourceComponentID, address(system));
    authorizeWriter(components, IdTargetComponentID, address(system));
    authorizeWriter(components, IndexBackgroundComponentID, address(system));
    authorizeWriter(components, IndexBodyComponentID, address(system));
    authorizeWriter(components, IndexColorComponentID, address(system));
    authorizeWriter(components, IndexFaceComponentID, address(system));
    authorizeWriter(components, IndexFoodComponentID, address(system));
    authorizeWriter(components, IndexGearComponentID, address(system));
    authorizeWriter(components, IndexHandComponentID, address(system));
    authorizeWriter(components, IndexItemComponentID, address(system));
    authorizeWriter(components, IndexMerchantComponentID, address(system));
    authorizeWriter(components, IndexModComponentID, address(system));
    authorizeWriter(components, IndexNodeComponentID, address(system));
    authorizeWriter(components, IndexPetComponentID, address(system));
    authorizeWriter(components, IndexReviveComponentID, address(system));
    authorizeWriter(components, IndexTraitComponentID, address(system));
    authorizeWriter(components, IsAccountComponentID, address(system));
    authorizeWriter(components, IsConfigComponentID, address(system));
    authorizeWriter(components, IsDataComponentID, address(system));
    authorizeWriter(components, IsEquippedComponentID, address(system));
    authorizeWriter(components, IsFungibleComponentID, address(system));
    authorizeWriter(components, IsInventoryComponentID, address(system));
    authorizeWriter(components, IsKillComponentID, address(system));
    authorizeWriter(components, IsListingComponentID, address(system));
    authorizeWriter(components, IsMerchantComponentID, address(system));
    authorizeWriter(components, IsNodeComponentID, address(system));
    authorizeWriter(components, IsNonFungibleComponentID, address(system));
    authorizeWriter(components, IsPetComponentID, address(system));
    authorizeWriter(components, IsProductionComponentID, address(system));
    authorizeWriter(components, IsRegistryComponentID, address(system));
    authorizeWriter(components, IsRoomComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, IsTraitComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, MediaURIComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, PowerComponentID, address(system));
    authorizeWriter(components, PriceBuyComponentID, address(system));
    authorizeWriter(components, PriceSellComponentID, address(system));
    authorizeWriter(components, PrototypeComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
    authorizeWriter(components, RarityComponentID, address(system));
    authorizeWriter(components, RateComponentID, address(system));
    authorizeWriter(components, SlotsComponentID, address(system));
    authorizeWriter(components, StaminaComponentID, address(system));
    authorizeWriter(components, StaminaCurrentComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    authorizeWriter(components, TimeComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TimeStartComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    authorizeWriter(components, UpgradesComponentID, address(system));
    authorizeWriter(components, ValueComponentID, address(system));
    authorizeWriter(components, ViolenceComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _RegistryCreateModSystem");
    system = new _RegistryCreateModSystem(world, address(components));
    world.registerSystem(address(system), _RegistryCreateModSystemID);
    authorizeWriter(components, AddressOperatorComponentID, address(system));
    authorizeWriter(components, AddressOwnerComponentID, address(system));
    authorizeWriter(components, AffinityComponentID, address(system));
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, BlockRevealComponentID, address(system));
    authorizeWriter(components, CanNameComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, DescriptionComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, ExitsComponentID, address(system));
    authorizeWriter(components, ExperienceComponentID, address(system));
    authorizeWriter(components, GenusComponentID, address(system));
    authorizeWriter(components, HarmonyComponentID, address(system));
    authorizeWriter(components, HealthComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, IdAccountComponentID, address(system));
    authorizeWriter(components, IdDelegateeComponentID, address(system));
    authorizeWriter(components, IdDelegatorComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IdNodeComponentID, address(system));
    authorizeWriter(components, IdPetComponentID, address(system));
    authorizeWriter(components, IdSourceComponentID, address(system));
    authorizeWriter(components, IdTargetComponentID, address(system));
    authorizeWriter(components, IndexBackgroundComponentID, address(system));
    authorizeWriter(components, IndexBodyComponentID, address(system));
    authorizeWriter(components, IndexColorComponentID, address(system));
    authorizeWriter(components, IndexFaceComponentID, address(system));
    authorizeWriter(components, IndexFoodComponentID, address(system));
    authorizeWriter(components, IndexGearComponentID, address(system));
    authorizeWriter(components, IndexHandComponentID, address(system));
    authorizeWriter(components, IndexItemComponentID, address(system));
    authorizeWriter(components, IndexMerchantComponentID, address(system));
    authorizeWriter(components, IndexModComponentID, address(system));
    authorizeWriter(components, IndexNodeComponentID, address(system));
    authorizeWriter(components, IndexPetComponentID, address(system));
    authorizeWriter(components, IndexReviveComponentID, address(system));
    authorizeWriter(components, IndexTraitComponentID, address(system));
    authorizeWriter(components, IsAccountComponentID, address(system));
    authorizeWriter(components, IsConfigComponentID, address(system));
    authorizeWriter(components, IsDataComponentID, address(system));
    authorizeWriter(components, IsEquippedComponentID, address(system));
    authorizeWriter(components, IsFungibleComponentID, address(system));
    authorizeWriter(components, IsInventoryComponentID, address(system));
    authorizeWriter(components, IsKillComponentID, address(system));
    authorizeWriter(components, IsListingComponentID, address(system));
    authorizeWriter(components, IsMerchantComponentID, address(system));
    authorizeWriter(components, IsNodeComponentID, address(system));
    authorizeWriter(components, IsNonFungibleComponentID, address(system));
    authorizeWriter(components, IsPetComponentID, address(system));
    authorizeWriter(components, IsProductionComponentID, address(system));
    authorizeWriter(components, IsRegistryComponentID, address(system));
    authorizeWriter(components, IsRoomComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, IsTraitComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, MediaURIComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, PowerComponentID, address(system));
    authorizeWriter(components, PriceBuyComponentID, address(system));
    authorizeWriter(components, PriceSellComponentID, address(system));
    authorizeWriter(components, PrototypeComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
    authorizeWriter(components, RarityComponentID, address(system));
    authorizeWriter(components, RateComponentID, address(system));
    authorizeWriter(components, SlotsComponentID, address(system));
    authorizeWriter(components, StaminaComponentID, address(system));
    authorizeWriter(components, StaminaCurrentComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    authorizeWriter(components, TimeComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TimeStartComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    authorizeWriter(components, UpgradesComponentID, address(system));
    authorizeWriter(components, ValueComponentID, address(system));
    authorizeWriter(components, ViolenceComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _RegistryCreateReviveSystem");
    system = new _RegistryCreateReviveSystem(world, address(components));
    world.registerSystem(address(system), _RegistryCreateReviveSystemID);
    authorizeWriter(components, AddressOperatorComponentID, address(system));
    authorizeWriter(components, AddressOwnerComponentID, address(system));
    authorizeWriter(components, AffinityComponentID, address(system));
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, BlockRevealComponentID, address(system));
    authorizeWriter(components, CanNameComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, DescriptionComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, ExitsComponentID, address(system));
    authorizeWriter(components, ExperienceComponentID, address(system));
    authorizeWriter(components, GenusComponentID, address(system));
    authorizeWriter(components, HarmonyComponentID, address(system));
    authorizeWriter(components, HealthComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, IdAccountComponentID, address(system));
    authorizeWriter(components, IdDelegateeComponentID, address(system));
    authorizeWriter(components, IdDelegatorComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IdNodeComponentID, address(system));
    authorizeWriter(components, IdPetComponentID, address(system));
    authorizeWriter(components, IdSourceComponentID, address(system));
    authorizeWriter(components, IdTargetComponentID, address(system));
    authorizeWriter(components, IndexBackgroundComponentID, address(system));
    authorizeWriter(components, IndexBodyComponentID, address(system));
    authorizeWriter(components, IndexColorComponentID, address(system));
    authorizeWriter(components, IndexFaceComponentID, address(system));
    authorizeWriter(components, IndexFoodComponentID, address(system));
    authorizeWriter(components, IndexGearComponentID, address(system));
    authorizeWriter(components, IndexHandComponentID, address(system));
    authorizeWriter(components, IndexItemComponentID, address(system));
    authorizeWriter(components, IndexMerchantComponentID, address(system));
    authorizeWriter(components, IndexModComponentID, address(system));
    authorizeWriter(components, IndexNodeComponentID, address(system));
    authorizeWriter(components, IndexPetComponentID, address(system));
    authorizeWriter(components, IndexReviveComponentID, address(system));
    authorizeWriter(components, IndexTraitComponentID, address(system));
    authorizeWriter(components, IsAccountComponentID, address(system));
    authorizeWriter(components, IsConfigComponentID, address(system));
    authorizeWriter(components, IsDataComponentID, address(system));
    authorizeWriter(components, IsEquippedComponentID, address(system));
    authorizeWriter(components, IsFungibleComponentID, address(system));
    authorizeWriter(components, IsInventoryComponentID, address(system));
    authorizeWriter(components, IsKillComponentID, address(system));
    authorizeWriter(components, IsListingComponentID, address(system));
    authorizeWriter(components, IsMerchantComponentID, address(system));
    authorizeWriter(components, IsNodeComponentID, address(system));
    authorizeWriter(components, IsNonFungibleComponentID, address(system));
    authorizeWriter(components, IsPetComponentID, address(system));
    authorizeWriter(components, IsProductionComponentID, address(system));
    authorizeWriter(components, IsRegistryComponentID, address(system));
    authorizeWriter(components, IsRoomComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, IsTraitComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, MediaURIComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, PowerComponentID, address(system));
    authorizeWriter(components, PriceBuyComponentID, address(system));
    authorizeWriter(components, PriceSellComponentID, address(system));
    authorizeWriter(components, PrototypeComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
    authorizeWriter(components, RarityComponentID, address(system));
    authorizeWriter(components, RateComponentID, address(system));
    authorizeWriter(components, SlotsComponentID, address(system));
    authorizeWriter(components, StaminaComponentID, address(system));
    authorizeWriter(components, StaminaCurrentComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    authorizeWriter(components, TimeComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TimeStartComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    authorizeWriter(components, UpgradesComponentID, address(system));
    authorizeWriter(components, ValueComponentID, address(system));
    authorizeWriter(components, ViolenceComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _RegistryCreateTraitSystem");
    system = new _RegistryCreateTraitSystem(world, address(components));
    world.registerSystem(address(system), _RegistryCreateTraitSystemID);
    authorizeWriter(components, AddressOperatorComponentID, address(system));
    authorizeWriter(components, AddressOwnerComponentID, address(system));
    authorizeWriter(components, AffinityComponentID, address(system));
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, BlockRevealComponentID, address(system));
    authorizeWriter(components, CanNameComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, DescriptionComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, ExitsComponentID, address(system));
    authorizeWriter(components, ExperienceComponentID, address(system));
    authorizeWriter(components, GenusComponentID, address(system));
    authorizeWriter(components, HarmonyComponentID, address(system));
    authorizeWriter(components, HealthComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, IdAccountComponentID, address(system));
    authorizeWriter(components, IdDelegateeComponentID, address(system));
    authorizeWriter(components, IdDelegatorComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IdNodeComponentID, address(system));
    authorizeWriter(components, IdPetComponentID, address(system));
    authorizeWriter(components, IdSourceComponentID, address(system));
    authorizeWriter(components, IdTargetComponentID, address(system));
    authorizeWriter(components, IndexBackgroundComponentID, address(system));
    authorizeWriter(components, IndexBodyComponentID, address(system));
    authorizeWriter(components, IndexColorComponentID, address(system));
    authorizeWriter(components, IndexFaceComponentID, address(system));
    authorizeWriter(components, IndexFoodComponentID, address(system));
    authorizeWriter(components, IndexGearComponentID, address(system));
    authorizeWriter(components, IndexHandComponentID, address(system));
    authorizeWriter(components, IndexItemComponentID, address(system));
    authorizeWriter(components, IndexMerchantComponentID, address(system));
    authorizeWriter(components, IndexModComponentID, address(system));
    authorizeWriter(components, IndexNodeComponentID, address(system));
    authorizeWriter(components, IndexPetComponentID, address(system));
    authorizeWriter(components, IndexReviveComponentID, address(system));
    authorizeWriter(components, IndexTraitComponentID, address(system));
    authorizeWriter(components, IsAccountComponentID, address(system));
    authorizeWriter(components, IsConfigComponentID, address(system));
    authorizeWriter(components, IsDataComponentID, address(system));
    authorizeWriter(components, IsEquippedComponentID, address(system));
    authorizeWriter(components, IsFungibleComponentID, address(system));
    authorizeWriter(components, IsInventoryComponentID, address(system));
    authorizeWriter(components, IsKillComponentID, address(system));
    authorizeWriter(components, IsListingComponentID, address(system));
    authorizeWriter(components, IsMerchantComponentID, address(system));
    authorizeWriter(components, IsNodeComponentID, address(system));
    authorizeWriter(components, IsNonFungibleComponentID, address(system));
    authorizeWriter(components, IsPetComponentID, address(system));
    authorizeWriter(components, IsProductionComponentID, address(system));
    authorizeWriter(components, IsRegistryComponentID, address(system));
    authorizeWriter(components, IsRoomComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, IsTraitComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, MediaURIComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, PowerComponentID, address(system));
    authorizeWriter(components, PriceBuyComponentID, address(system));
    authorizeWriter(components, PriceSellComponentID, address(system));
    authorizeWriter(components, PrototypeComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
    authorizeWriter(components, RarityComponentID, address(system));
    authorizeWriter(components, RateComponentID, address(system));
    authorizeWriter(components, SlotsComponentID, address(system));
    authorizeWriter(components, StaminaComponentID, address(system));
    authorizeWriter(components, StaminaCurrentComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    authorizeWriter(components, TimeComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TimeStartComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    authorizeWriter(components, UpgradesComponentID, address(system));
    authorizeWriter(components, ValueComponentID, address(system));
    authorizeWriter(components, ViolenceComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _RegistryUpdateFoodSystem");
    system = new _RegistryUpdateFoodSystem(world, address(components));
    world.registerSystem(address(system), _RegistryUpdateFoodSystemID);
    authorizeWriter(components, AddressOperatorComponentID, address(system));
    authorizeWriter(components, AddressOwnerComponentID, address(system));
    authorizeWriter(components, AffinityComponentID, address(system));
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, BlockRevealComponentID, address(system));
    authorizeWriter(components, CanNameComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, DescriptionComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, ExitsComponentID, address(system));
    authorizeWriter(components, ExperienceComponentID, address(system));
    authorizeWriter(components, GenusComponentID, address(system));
    authorizeWriter(components, HarmonyComponentID, address(system));
    authorizeWriter(components, HealthComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, IdAccountComponentID, address(system));
    authorizeWriter(components, IdDelegateeComponentID, address(system));
    authorizeWriter(components, IdDelegatorComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IdNodeComponentID, address(system));
    authorizeWriter(components, IdPetComponentID, address(system));
    authorizeWriter(components, IdSourceComponentID, address(system));
    authorizeWriter(components, IdTargetComponentID, address(system));
    authorizeWriter(components, IndexBackgroundComponentID, address(system));
    authorizeWriter(components, IndexBodyComponentID, address(system));
    authorizeWriter(components, IndexColorComponentID, address(system));
    authorizeWriter(components, IndexFaceComponentID, address(system));
    authorizeWriter(components, IndexFoodComponentID, address(system));
    authorizeWriter(components, IndexGearComponentID, address(system));
    authorizeWriter(components, IndexHandComponentID, address(system));
    authorizeWriter(components, IndexItemComponentID, address(system));
    authorizeWriter(components, IndexMerchantComponentID, address(system));
    authorizeWriter(components, IndexModComponentID, address(system));
    authorizeWriter(components, IndexNodeComponentID, address(system));
    authorizeWriter(components, IndexPetComponentID, address(system));
    authorizeWriter(components, IndexReviveComponentID, address(system));
    authorizeWriter(components, IndexTraitComponentID, address(system));
    authorizeWriter(components, IsAccountComponentID, address(system));
    authorizeWriter(components, IsConfigComponentID, address(system));
    authorizeWriter(components, IsDataComponentID, address(system));
    authorizeWriter(components, IsEquippedComponentID, address(system));
    authorizeWriter(components, IsFungibleComponentID, address(system));
    authorizeWriter(components, IsInventoryComponentID, address(system));
    authorizeWriter(components, IsKillComponentID, address(system));
    authorizeWriter(components, IsListingComponentID, address(system));
    authorizeWriter(components, IsMerchantComponentID, address(system));
    authorizeWriter(components, IsNodeComponentID, address(system));
    authorizeWriter(components, IsNonFungibleComponentID, address(system));
    authorizeWriter(components, IsPetComponentID, address(system));
    authorizeWriter(components, IsProductionComponentID, address(system));
    authorizeWriter(components, IsRegistryComponentID, address(system));
    authorizeWriter(components, IsRoomComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, IsTraitComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, MediaURIComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, PowerComponentID, address(system));
    authorizeWriter(components, PriceBuyComponentID, address(system));
    authorizeWriter(components, PriceSellComponentID, address(system));
    authorizeWriter(components, PrototypeComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
    authorizeWriter(components, RarityComponentID, address(system));
    authorizeWriter(components, RateComponentID, address(system));
    authorizeWriter(components, SlotsComponentID, address(system));
    authorizeWriter(components, StaminaComponentID, address(system));
    authorizeWriter(components, StaminaCurrentComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    authorizeWriter(components, TimeComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TimeStartComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    authorizeWriter(components, UpgradesComponentID, address(system));
    authorizeWriter(components, ValueComponentID, address(system));
    authorizeWriter(components, ViolenceComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _RegistryUpdateGearSystem");
    system = new _RegistryUpdateGearSystem(world, address(components));
    world.registerSystem(address(system), _RegistryUpdateGearSystemID);
    authorizeWriter(components, AddressOperatorComponentID, address(system));
    authorizeWriter(components, AddressOwnerComponentID, address(system));
    authorizeWriter(components, AffinityComponentID, address(system));
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, BlockRevealComponentID, address(system));
    authorizeWriter(components, CanNameComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, DescriptionComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, ExitsComponentID, address(system));
    authorizeWriter(components, ExperienceComponentID, address(system));
    authorizeWriter(components, GenusComponentID, address(system));
    authorizeWriter(components, HarmonyComponentID, address(system));
    authorizeWriter(components, HealthComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, IdAccountComponentID, address(system));
    authorizeWriter(components, IdDelegateeComponentID, address(system));
    authorizeWriter(components, IdDelegatorComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IdNodeComponentID, address(system));
    authorizeWriter(components, IdPetComponentID, address(system));
    authorizeWriter(components, IdSourceComponentID, address(system));
    authorizeWriter(components, IdTargetComponentID, address(system));
    authorizeWriter(components, IndexBackgroundComponentID, address(system));
    authorizeWriter(components, IndexBodyComponentID, address(system));
    authorizeWriter(components, IndexColorComponentID, address(system));
    authorizeWriter(components, IndexFaceComponentID, address(system));
    authorizeWriter(components, IndexFoodComponentID, address(system));
    authorizeWriter(components, IndexGearComponentID, address(system));
    authorizeWriter(components, IndexHandComponentID, address(system));
    authorizeWriter(components, IndexItemComponentID, address(system));
    authorizeWriter(components, IndexMerchantComponentID, address(system));
    authorizeWriter(components, IndexModComponentID, address(system));
    authorizeWriter(components, IndexNodeComponentID, address(system));
    authorizeWriter(components, IndexPetComponentID, address(system));
    authorizeWriter(components, IndexReviveComponentID, address(system));
    authorizeWriter(components, IndexTraitComponentID, address(system));
    authorizeWriter(components, IsAccountComponentID, address(system));
    authorizeWriter(components, IsConfigComponentID, address(system));
    authorizeWriter(components, IsDataComponentID, address(system));
    authorizeWriter(components, IsEquippedComponentID, address(system));
    authorizeWriter(components, IsFungibleComponentID, address(system));
    authorizeWriter(components, IsInventoryComponentID, address(system));
    authorizeWriter(components, IsKillComponentID, address(system));
    authorizeWriter(components, IsListingComponentID, address(system));
    authorizeWriter(components, IsMerchantComponentID, address(system));
    authorizeWriter(components, IsNodeComponentID, address(system));
    authorizeWriter(components, IsNonFungibleComponentID, address(system));
    authorizeWriter(components, IsPetComponentID, address(system));
    authorizeWriter(components, IsProductionComponentID, address(system));
    authorizeWriter(components, IsRegistryComponentID, address(system));
    authorizeWriter(components, IsRoomComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, IsTraitComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, MediaURIComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, PowerComponentID, address(system));
    authorizeWriter(components, PriceBuyComponentID, address(system));
    authorizeWriter(components, PriceSellComponentID, address(system));
    authorizeWriter(components, PrototypeComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
    authorizeWriter(components, RarityComponentID, address(system));
    authorizeWriter(components, RateComponentID, address(system));
    authorizeWriter(components, SlotsComponentID, address(system));
    authorizeWriter(components, StaminaComponentID, address(system));
    authorizeWriter(components, StaminaCurrentComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    authorizeWriter(components, TimeComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TimeStartComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    authorizeWriter(components, UpgradesComponentID, address(system));
    authorizeWriter(components, ValueComponentID, address(system));
    authorizeWriter(components, ViolenceComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _RegistryUpdateModSystem");
    system = new _RegistryUpdateModSystem(world, address(components));
    world.registerSystem(address(system), _RegistryUpdateModSystemID);
    authorizeWriter(components, AddressOperatorComponentID, address(system));
    authorizeWriter(components, AddressOwnerComponentID, address(system));
    authorizeWriter(components, AffinityComponentID, address(system));
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, BlockRevealComponentID, address(system));
    authorizeWriter(components, CanNameComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, DescriptionComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, ExitsComponentID, address(system));
    authorizeWriter(components, ExperienceComponentID, address(system));
    authorizeWriter(components, GenusComponentID, address(system));
    authorizeWriter(components, HarmonyComponentID, address(system));
    authorizeWriter(components, HealthComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, IdAccountComponentID, address(system));
    authorizeWriter(components, IdDelegateeComponentID, address(system));
    authorizeWriter(components, IdDelegatorComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IdNodeComponentID, address(system));
    authorizeWriter(components, IdPetComponentID, address(system));
    authorizeWriter(components, IdSourceComponentID, address(system));
    authorizeWriter(components, IdTargetComponentID, address(system));
    authorizeWriter(components, IndexBackgroundComponentID, address(system));
    authorizeWriter(components, IndexBodyComponentID, address(system));
    authorizeWriter(components, IndexColorComponentID, address(system));
    authorizeWriter(components, IndexFaceComponentID, address(system));
    authorizeWriter(components, IndexFoodComponentID, address(system));
    authorizeWriter(components, IndexGearComponentID, address(system));
    authorizeWriter(components, IndexHandComponentID, address(system));
    authorizeWriter(components, IndexItemComponentID, address(system));
    authorizeWriter(components, IndexMerchantComponentID, address(system));
    authorizeWriter(components, IndexModComponentID, address(system));
    authorizeWriter(components, IndexNodeComponentID, address(system));
    authorizeWriter(components, IndexPetComponentID, address(system));
    authorizeWriter(components, IndexReviveComponentID, address(system));
    authorizeWriter(components, IndexTraitComponentID, address(system));
    authorizeWriter(components, IsAccountComponentID, address(system));
    authorizeWriter(components, IsConfigComponentID, address(system));
    authorizeWriter(components, IsDataComponentID, address(system));
    authorizeWriter(components, IsEquippedComponentID, address(system));
    authorizeWriter(components, IsFungibleComponentID, address(system));
    authorizeWriter(components, IsInventoryComponentID, address(system));
    authorizeWriter(components, IsKillComponentID, address(system));
    authorizeWriter(components, IsListingComponentID, address(system));
    authorizeWriter(components, IsMerchantComponentID, address(system));
    authorizeWriter(components, IsNodeComponentID, address(system));
    authorizeWriter(components, IsNonFungibleComponentID, address(system));
    authorizeWriter(components, IsPetComponentID, address(system));
    authorizeWriter(components, IsProductionComponentID, address(system));
    authorizeWriter(components, IsRegistryComponentID, address(system));
    authorizeWriter(components, IsRoomComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, IsTraitComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, MediaURIComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, PowerComponentID, address(system));
    authorizeWriter(components, PriceBuyComponentID, address(system));
    authorizeWriter(components, PriceSellComponentID, address(system));
    authorizeWriter(components, PrototypeComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
    authorizeWriter(components, RarityComponentID, address(system));
    authorizeWriter(components, RateComponentID, address(system));
    authorizeWriter(components, SlotsComponentID, address(system));
    authorizeWriter(components, StaminaComponentID, address(system));
    authorizeWriter(components, StaminaCurrentComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    authorizeWriter(components, TimeComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TimeStartComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    authorizeWriter(components, UpgradesComponentID, address(system));
    authorizeWriter(components, ValueComponentID, address(system));
    authorizeWriter(components, ViolenceComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _RegistryUpdateReviveSystem");
    system = new _RegistryUpdateReviveSystem(world, address(components));
    world.registerSystem(address(system), _RegistryUpdateReviveSystemID);
    authorizeWriter(components, AddressOperatorComponentID, address(system));
    authorizeWriter(components, AddressOwnerComponentID, address(system));
    authorizeWriter(components, AffinityComponentID, address(system));
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, BlockRevealComponentID, address(system));
    authorizeWriter(components, CanNameComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, DescriptionComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, ExitsComponentID, address(system));
    authorizeWriter(components, ExperienceComponentID, address(system));
    authorizeWriter(components, GenusComponentID, address(system));
    authorizeWriter(components, HarmonyComponentID, address(system));
    authorizeWriter(components, HealthComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, IdAccountComponentID, address(system));
    authorizeWriter(components, IdDelegateeComponentID, address(system));
    authorizeWriter(components, IdDelegatorComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IdNodeComponentID, address(system));
    authorizeWriter(components, IdPetComponentID, address(system));
    authorizeWriter(components, IdSourceComponentID, address(system));
    authorizeWriter(components, IdTargetComponentID, address(system));
    authorizeWriter(components, IndexBackgroundComponentID, address(system));
    authorizeWriter(components, IndexBodyComponentID, address(system));
    authorizeWriter(components, IndexColorComponentID, address(system));
    authorizeWriter(components, IndexFaceComponentID, address(system));
    authorizeWriter(components, IndexFoodComponentID, address(system));
    authorizeWriter(components, IndexGearComponentID, address(system));
    authorizeWriter(components, IndexHandComponentID, address(system));
    authorizeWriter(components, IndexItemComponentID, address(system));
    authorizeWriter(components, IndexMerchantComponentID, address(system));
    authorizeWriter(components, IndexModComponentID, address(system));
    authorizeWriter(components, IndexNodeComponentID, address(system));
    authorizeWriter(components, IndexPetComponentID, address(system));
    authorizeWriter(components, IndexReviveComponentID, address(system));
    authorizeWriter(components, IndexTraitComponentID, address(system));
    authorizeWriter(components, IsAccountComponentID, address(system));
    authorizeWriter(components, IsConfigComponentID, address(system));
    authorizeWriter(components, IsDataComponentID, address(system));
    authorizeWriter(components, IsEquippedComponentID, address(system));
    authorizeWriter(components, IsFungibleComponentID, address(system));
    authorizeWriter(components, IsInventoryComponentID, address(system));
    authorizeWriter(components, IsKillComponentID, address(system));
    authorizeWriter(components, IsListingComponentID, address(system));
    authorizeWriter(components, IsMerchantComponentID, address(system));
    authorizeWriter(components, IsNodeComponentID, address(system));
    authorizeWriter(components, IsNonFungibleComponentID, address(system));
    authorizeWriter(components, IsPetComponentID, address(system));
    authorizeWriter(components, IsProductionComponentID, address(system));
    authorizeWriter(components, IsRegistryComponentID, address(system));
    authorizeWriter(components, IsRoomComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, IsTraitComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, MediaURIComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, PowerComponentID, address(system));
    authorizeWriter(components, PriceBuyComponentID, address(system));
    authorizeWriter(components, PriceSellComponentID, address(system));
    authorizeWriter(components, PrototypeComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
    authorizeWriter(components, RarityComponentID, address(system));
    authorizeWriter(components, RateComponentID, address(system));
    authorizeWriter(components, SlotsComponentID, address(system));
    authorizeWriter(components, StaminaComponentID, address(system));
    authorizeWriter(components, StaminaCurrentComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    authorizeWriter(components, TimeComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TimeStartComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    authorizeWriter(components, UpgradesComponentID, address(system));
    authorizeWriter(components, ValueComponentID, address(system));
    authorizeWriter(components, ViolenceComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _RegistryUpdateTraitSystem");
    system = new _RegistryUpdateTraitSystem(world, address(components));
    world.registerSystem(address(system), _RegistryUpdateTraitSystemID);
    authorizeWriter(components, AddressOperatorComponentID, address(system));
    authorizeWriter(components, AddressOwnerComponentID, address(system));
    authorizeWriter(components, AffinityComponentID, address(system));
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, BlockRevealComponentID, address(system));
    authorizeWriter(components, CanNameComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, DescriptionComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, ExitsComponentID, address(system));
    authorizeWriter(components, ExperienceComponentID, address(system));
    authorizeWriter(components, GenusComponentID, address(system));
    authorizeWriter(components, HarmonyComponentID, address(system));
    authorizeWriter(components, HealthComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, IdAccountComponentID, address(system));
    authorizeWriter(components, IdDelegateeComponentID, address(system));
    authorizeWriter(components, IdDelegatorComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IdNodeComponentID, address(system));
    authorizeWriter(components, IdPetComponentID, address(system));
    authorizeWriter(components, IdSourceComponentID, address(system));
    authorizeWriter(components, IdTargetComponentID, address(system));
    authorizeWriter(components, IndexBackgroundComponentID, address(system));
    authorizeWriter(components, IndexBodyComponentID, address(system));
    authorizeWriter(components, IndexColorComponentID, address(system));
    authorizeWriter(components, IndexFaceComponentID, address(system));
    authorizeWriter(components, IndexFoodComponentID, address(system));
    authorizeWriter(components, IndexGearComponentID, address(system));
    authorizeWriter(components, IndexHandComponentID, address(system));
    authorizeWriter(components, IndexItemComponentID, address(system));
    authorizeWriter(components, IndexMerchantComponentID, address(system));
    authorizeWriter(components, IndexModComponentID, address(system));
    authorizeWriter(components, IndexNodeComponentID, address(system));
    authorizeWriter(components, IndexPetComponentID, address(system));
    authorizeWriter(components, IndexReviveComponentID, address(system));
    authorizeWriter(components, IndexTraitComponentID, address(system));
    authorizeWriter(components, IsAccountComponentID, address(system));
    authorizeWriter(components, IsConfigComponentID, address(system));
    authorizeWriter(components, IsDataComponentID, address(system));
    authorizeWriter(components, IsEquippedComponentID, address(system));
    authorizeWriter(components, IsFungibleComponentID, address(system));
    authorizeWriter(components, IsInventoryComponentID, address(system));
    authorizeWriter(components, IsKillComponentID, address(system));
    authorizeWriter(components, IsListingComponentID, address(system));
    authorizeWriter(components, IsMerchantComponentID, address(system));
    authorizeWriter(components, IsNodeComponentID, address(system));
    authorizeWriter(components, IsNonFungibleComponentID, address(system));
    authorizeWriter(components, IsPetComponentID, address(system));
    authorizeWriter(components, IsProductionComponentID, address(system));
    authorizeWriter(components, IsRegistryComponentID, address(system));
    authorizeWriter(components, IsRoomComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, IsTraitComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, MediaURIComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, PowerComponentID, address(system));
    authorizeWriter(components, PriceBuyComponentID, address(system));
    authorizeWriter(components, PriceSellComponentID, address(system));
    authorizeWriter(components, PrototypeComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
    authorizeWriter(components, RarityComponentID, address(system));
    authorizeWriter(components, RateComponentID, address(system));
    authorizeWriter(components, SlotsComponentID, address(system));
    authorizeWriter(components, StaminaComponentID, address(system));
    authorizeWriter(components, StaminaCurrentComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    authorizeWriter(components, TimeComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TimeStartComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    authorizeWriter(components, UpgradesComponentID, address(system));
    authorizeWriter(components, ValueComponentID, address(system));
    authorizeWriter(components, ViolenceComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _RoomCreateSystem");
    system = new _RoomCreateSystem(world, address(components));
    world.registerSystem(address(system), _RoomCreateSystemID);
    authorizeWriter(components, IsRoomComponentID, address(system));
    authorizeWriter(components, ExitsComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _RoomSetExitsSystem");
    system = new _RoomSetExitsSystem(world, address(components));
    world.registerSystem(address(system), _RoomSetExitsSystemID);
    authorizeWriter(components, ExitsComponentID, address(system));
    console.log(address(system));

    console.log("Deploying _RoomSetNameSystem");
    system = new _RoomSetNameSystem(world, address(components));
    world.registerSystem(address(system), _RoomSetNameSystemID);
    authorizeWriter(components, NameComponentID, address(system));
    console.log(address(system));

    console.log("Deploying AccountFundSystem");
    system = new AccountFundSystem(world, address(components));
    world.registerSystem(address(system), AccountFundSystemID);
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    authorizeWriter(components, BalanceComponentID, address(system));
    console.log(address(system));

    console.log("Deploying AccountMoveSystem");
    system = new AccountMoveSystem(world, address(components));
    world.registerSystem(address(system), AccountMoveSystemID);
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, StaminaComponentID, address(system));
    authorizeWriter(components, StaminaCurrentComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    console.log(address(system));

    console.log("Deploying AccountSetNameSystem");
    system = new AccountSetNameSystem(world, address(components));
    world.registerSystem(address(system), AccountSetNameSystemID);
    authorizeWriter(components, NameComponentID, address(system));
    console.log(address(system));

    console.log("Deploying AccountSetOperatorSystem");
    system = new AccountSetOperatorSystem(world, address(components));
    world.registerSystem(address(system), AccountSetOperatorSystemID);
    authorizeWriter(components, AddressOperatorComponentID, address(system));
    console.log(address(system));

    console.log("Deploying AccountRegisterSystem");
    system = new AccountRegisterSystem(world, address(components));
    world.registerSystem(address(system), AccountRegisterSystemID);
    authorizeWriter(components, IsAccountComponentID, address(system));
    authorizeWriter(components, AddressOperatorComponentID, address(system));
    authorizeWriter(components, AddressOwnerComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, StaminaComponentID, address(system));
    authorizeWriter(components, StaminaCurrentComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    console.log(address(system));

    console.log("Deploying Farm20ProxySystem");
    system = new Farm20ProxySystem(world, address(components));
    world.registerSystem(address(system), Farm20ProxySystemID);
    console.log(address(system));

    console.log("Deploying Farm20WithdrawSystem");
    system = new Farm20WithdrawSystem(world, address(components));
    world.registerSystem(address(system), Farm20WithdrawSystemID);
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
    console.log(address(system));

    console.log("Deploying Farm20DepositSystem");
    system = new Farm20DepositSystem(world, address(components));
    world.registerSystem(address(system), Farm20DepositSystemID);
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
    console.log(address(system));

    console.log("Deploying ERC721MetadataSystem");
    system = new ERC721MetadataSystem(world, address(components));
    world.registerSystem(address(system), ERC721MetadataSystemID);
    console.log(address(system));

    console.log("Deploying ERC721MintSystem");
    system = new ERC721MintSystem(world, address(components));
    world.registerSystem(address(system), ERC721MintSystemID);
    authorizeWriter(components, AddressOperatorComponentID, address(system));
    authorizeWriter(components, AddressOwnerComponentID, address(system));
    authorizeWriter(components, AffinityComponentID, address(system));
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, BlockRevealComponentID, address(system));
    authorizeWriter(components, CanNameComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, DescriptionComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, ExitsComponentID, address(system));
    authorizeWriter(components, ExperienceComponentID, address(system));
    authorizeWriter(components, GenusComponentID, address(system));
    authorizeWriter(components, HarmonyComponentID, address(system));
    authorizeWriter(components, HealthComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, IdAccountComponentID, address(system));
    authorizeWriter(components, IdDelegateeComponentID, address(system));
    authorizeWriter(components, IdDelegatorComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IdNodeComponentID, address(system));
    authorizeWriter(components, IdPetComponentID, address(system));
    authorizeWriter(components, IdSourceComponentID, address(system));
    authorizeWriter(components, IdTargetComponentID, address(system));
    authorizeWriter(components, IndexBackgroundComponentID, address(system));
    authorizeWriter(components, IndexBodyComponentID, address(system));
    authorizeWriter(components, IndexColorComponentID, address(system));
    authorizeWriter(components, IndexFaceComponentID, address(system));
    authorizeWriter(components, IndexFoodComponentID, address(system));
    authorizeWriter(components, IndexGearComponentID, address(system));
    authorizeWriter(components, IndexHandComponentID, address(system));
    authorizeWriter(components, IndexItemComponentID, address(system));
    authorizeWriter(components, IndexMerchantComponentID, address(system));
    authorizeWriter(components, IndexModComponentID, address(system));
    authorizeWriter(components, IndexNodeComponentID, address(system));
    authorizeWriter(components, IndexPetComponentID, address(system));
    authorizeWriter(components, IndexReviveComponentID, address(system));
    authorizeWriter(components, IndexTraitComponentID, address(system));
    authorizeWriter(components, IsAccountComponentID, address(system));
    authorizeWriter(components, IsConfigComponentID, address(system));
    authorizeWriter(components, IsDataComponentID, address(system));
    authorizeWriter(components, IsEquippedComponentID, address(system));
    authorizeWriter(components, IsFungibleComponentID, address(system));
    authorizeWriter(components, IsInventoryComponentID, address(system));
    authorizeWriter(components, IsKillComponentID, address(system));
    authorizeWriter(components, IsListingComponentID, address(system));
    authorizeWriter(components, IsMerchantComponentID, address(system));
    authorizeWriter(components, IsNodeComponentID, address(system));
    authorizeWriter(components, IsNonFungibleComponentID, address(system));
    authorizeWriter(components, IsPetComponentID, address(system));
    authorizeWriter(components, IsProductionComponentID, address(system));
    authorizeWriter(components, IsRegistryComponentID, address(system));
    authorizeWriter(components, IsRoomComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, IsTraitComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, MediaURIComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, PowerComponentID, address(system));
    authorizeWriter(components, PriceBuyComponentID, address(system));
    authorizeWriter(components, PriceSellComponentID, address(system));
    authorizeWriter(components, PrototypeComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
    authorizeWriter(components, RarityComponentID, address(system));
    authorizeWriter(components, RateComponentID, address(system));
    authorizeWriter(components, SlotsComponentID, address(system));
    authorizeWriter(components, StaminaComponentID, address(system));
    authorizeWriter(components, StaminaCurrentComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    authorizeWriter(components, TimeComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TimeStartComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    authorizeWriter(components, UpgradesComponentID, address(system));
    authorizeWriter(components, ValueComponentID, address(system));
    authorizeWriter(components, ViolenceComponentID, address(system));
    console.log(address(system));

    console.log("Deploying ERC721RevealSystem");
    system = new ERC721RevealSystem(world, address(components));
    world.registerSystem(address(system), ERC721RevealSystemID);
    authorizeWriter(components, AddressOperatorComponentID, address(system));
    authorizeWriter(components, AddressOwnerComponentID, address(system));
    authorizeWriter(components, AffinityComponentID, address(system));
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, BlockRevealComponentID, address(system));
    authorizeWriter(components, CanNameComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, DescriptionComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, ExitsComponentID, address(system));
    authorizeWriter(components, ExperienceComponentID, address(system));
    authorizeWriter(components, GenusComponentID, address(system));
    authorizeWriter(components, HarmonyComponentID, address(system));
    authorizeWriter(components, HealthComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, IdAccountComponentID, address(system));
    authorizeWriter(components, IdDelegateeComponentID, address(system));
    authorizeWriter(components, IdDelegatorComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IdNodeComponentID, address(system));
    authorizeWriter(components, IdPetComponentID, address(system));
    authorizeWriter(components, IdSourceComponentID, address(system));
    authorizeWriter(components, IdTargetComponentID, address(system));
    authorizeWriter(components, IndexBackgroundComponentID, address(system));
    authorizeWriter(components, IndexBodyComponentID, address(system));
    authorizeWriter(components, IndexColorComponentID, address(system));
    authorizeWriter(components, IndexFaceComponentID, address(system));
    authorizeWriter(components, IndexFoodComponentID, address(system));
    authorizeWriter(components, IndexGearComponentID, address(system));
    authorizeWriter(components, IndexHandComponentID, address(system));
    authorizeWriter(components, IndexItemComponentID, address(system));
    authorizeWriter(components, IndexMerchantComponentID, address(system));
    authorizeWriter(components, IndexModComponentID, address(system));
    authorizeWriter(components, IndexNodeComponentID, address(system));
    authorizeWriter(components, IndexPetComponentID, address(system));
    authorizeWriter(components, IndexReviveComponentID, address(system));
    authorizeWriter(components, IndexTraitComponentID, address(system));
    authorizeWriter(components, IsAccountComponentID, address(system));
    authorizeWriter(components, IsConfigComponentID, address(system));
    authorizeWriter(components, IsDataComponentID, address(system));
    authorizeWriter(components, IsEquippedComponentID, address(system));
    authorizeWriter(components, IsFungibleComponentID, address(system));
    authorizeWriter(components, IsInventoryComponentID, address(system));
    authorizeWriter(components, IsKillComponentID, address(system));
    authorizeWriter(components, IsListingComponentID, address(system));
    authorizeWriter(components, IsMerchantComponentID, address(system));
    authorizeWriter(components, IsNodeComponentID, address(system));
    authorizeWriter(components, IsNonFungibleComponentID, address(system));
    authorizeWriter(components, IsPetComponentID, address(system));
    authorizeWriter(components, IsProductionComponentID, address(system));
    authorizeWriter(components, IsRegistryComponentID, address(system));
    authorizeWriter(components, IsRoomComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, IsTraitComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, MediaURIComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, PowerComponentID, address(system));
    authorizeWriter(components, PriceBuyComponentID, address(system));
    authorizeWriter(components, PriceSellComponentID, address(system));
    authorizeWriter(components, PrototypeComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
    authorizeWriter(components, RarityComponentID, address(system));
    authorizeWriter(components, RateComponentID, address(system));
    authorizeWriter(components, SlotsComponentID, address(system));
    authorizeWriter(components, StaminaComponentID, address(system));
    authorizeWriter(components, StaminaCurrentComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    authorizeWriter(components, TimeComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TimeStartComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    authorizeWriter(components, UpgradesComponentID, address(system));
    authorizeWriter(components, ValueComponentID, address(system));
    authorizeWriter(components, ViolenceComponentID, address(system));
    console.log(address(system));

    console.log("Deploying ERC721TransferSystem");
    system = new ERC721TransferSystem(world, address(components));
    world.registerSystem(address(system), ERC721TransferSystemID);
    authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
    console.log(address(system));

    console.log("Deploying ERC721ProxySystem");
    system = new ERC721ProxySystem(world, address(components));
    world.registerSystem(address(system), ERC721ProxySystemID);
    console.log(address(system));

    console.log("Deploying ERC721UnstakeSystem");
    system = new ERC721UnstakeSystem(world, address(components));
    world.registerSystem(address(system), ERC721UnstakeSystemID);
    authorizeWriter(components, IdAccountComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    console.log(address(system));

    console.log("Deploying ERC721StakeSystem");
    system = new ERC721StakeSystem(world, address(components));
    world.registerSystem(address(system), ERC721StakeSystemID);
    authorizeWriter(components, IsAccountComponentID, address(system));
    authorizeWriter(components, AddressOperatorComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, AddressOwnerComponentID, address(system));
    authorizeWriter(components, IdAccountComponentID, address(system));
    authorizeWriter(components, LocationComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
    authorizeWriter(components, StaminaComponentID, address(system));
    authorizeWriter(components, StaminaCurrentComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    console.log(address(system));

    console.log("Deploying ListingBuySystem");
    system = new ListingBuySystem(world, address(components));
    world.registerSystem(address(system), ListingBuySystemID);
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IndexItemComponentID, address(system));
    authorizeWriter(components, IsFungibleComponentID, address(system));
    authorizeWriter(components, IsInventoryComponentID, address(system));
    console.log(address(system));

    console.log("Deploying ListingSellSystem");
    system = new ListingSellSystem(world, address(components));
    world.registerSystem(address(system), ListingSellSystemID);
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    console.log(address(system));

    console.log("Deploying NodeCollectSystem");
    system = new NodeCollectSystem(world, address(components));
    world.registerSystem(address(system), NodeCollectSystemID);
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, ExperienceComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TimeStartComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    console.log(address(system));

    console.log("Deploying Mint20ProxySystem");
    system = new Mint20ProxySystem(world, address(components));
    world.registerSystem(address(system), Mint20ProxySystemID);
    console.log(address(system));

    console.log("Deploying Mint20MintSystem");
    system = new Mint20MintSystem(world, address(components));
    world.registerSystem(address(system), Mint20MintSystemID);
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
    console.log(address(system));

    console.log("Deploying PetFeedSystem");
    system = new PetFeedSystem(world, address(components));
    world.registerSystem(address(system), PetFeedSystemID);
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    console.log(address(system));

    console.log("Deploying PetNameSystem");
    system = new PetNameSystem(world, address(components));
    world.registerSystem(address(system), PetNameSystemID);
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, CanNameComponentID, address(system));
    authorizeWriter(components, NameComponentID, address(system));
    console.log(address(system));

    console.log("Deploying PetReviveSystem");
    system = new PetReviveSystem(world, address(components));
    world.registerSystem(address(system), PetReviveSystemID);
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    console.log(address(system));

    console.log("Deploying PetSetAccountSystem");
    system = new PetSetAccountSystem(world, address(components));
    world.registerSystem(address(system), PetSetAccountSystemID);
    authorizeWriter(components, IdAccountComponentID, address(system));
    console.log(address(system));

    console.log("Deploying ProductionCollectSystem");
    system = new ProductionCollectSystem(world, address(components));
    world.registerSystem(address(system), ProductionCollectSystemID);
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, ExperienceComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TimeStartComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    console.log(address(system));

    console.log("Deploying ProductionLiquidateSystem");
    system = new ProductionLiquidateSystem(world, address(components));
    world.registerSystem(address(system), ProductionLiquidateSystemID);
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, ExperienceComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IdNodeComponentID, address(system));
    authorizeWriter(components, IdSourceComponentID, address(system));
    authorizeWriter(components, IdTargetComponentID, address(system));
    authorizeWriter(components, IsKillComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, RateComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    authorizeWriter(components, TimeComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    console.log(address(system));

    console.log("Deploying ProductionStartSystem");
    system = new ProductionStartSystem(world, address(components));
    world.registerSystem(address(system), ProductionStartSystemID);
    authorizeWriter(components, IsProductionComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, IdNodeComponentID, address(system));
    authorizeWriter(components, IdPetComponentID, address(system));
    authorizeWriter(components, RateComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TimeStartComponentID, address(system));
    console.log(address(system));

    console.log("Deploying ProductionStopSystem");
    system = new ProductionStopSystem(world, address(components));
    world.registerSystem(address(system), ProductionStopSystemID);
    authorizeWriter(components, BalanceComponentID, address(system));
    authorizeWriter(components, BlockLastComponentID, address(system));
    authorizeWriter(components, CoinComponentID, address(system));
    authorizeWriter(components, EpochComponentID, address(system));
    authorizeWriter(components, ExperienceComponentID, address(system));
    authorizeWriter(components, HealthCurrentComponentID, address(system));
    authorizeWriter(components, IdHolderComponentID, address(system));
    authorizeWriter(components, IsScoreComponentID, address(system));
    authorizeWriter(components, RateComponentID, address(system));
    authorizeWriter(components, StateComponentID, address(system));
    authorizeWriter(components, TimeLastActionComponentID, address(system));
    authorizeWriter(components, TypeComponentID, address(system));
    console.log(address(system));
  }
}
