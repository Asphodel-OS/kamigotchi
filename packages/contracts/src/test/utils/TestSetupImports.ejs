// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "test/utils/MudTest.t.sol";

// Libraries
<% libraries.forEach(library => { -%>
import { <%=library%> } from "libraries/<%= library %>.sol";
<% }); -%>
import { LibBoolean } from "libraries/utils/LibBoolean.sol";
import { LibHash } from "libraries/utils/LibHash.sol";
import { LibPack } from "libraries/utils/LibPack.sol";
import { LibRandom } from "libraries/utils/LibRandom.sol";
import { LibSafeQuery } from "libraries/utils/LibSafeQuery.sol";

// Components
<% components.forEach(component => { -%>
import { <%= component %>, ID as <%= component %>ID } from "components/<%- component %>.sol";
<% }); -%>

// Systems
<% systems.forEach(system => { -%>
import { <%= system.name %>, ID as <%= system.name %>ID } from "systems/<%- system.name %>.sol";
<% }); -%>

// Tokens
import { Farm20 } from "tokens/Farm20.sol";
import { Mint20 } from "tokens/Mint20.sol";
import { Pet721 } from "tokens/Pet721.sol";

abstract contract TestSetupImports is MudTest {
  // Components vars
<% components.forEach(component => { -%>
  <%= component %> _<%= component %>;
<% }); -%>

  // System vars
<% systems.forEach(system => { -%>
  <%= system.name %> _<%= system.name %>;
<% }); -%>

  // Token vars
  Farm20 _Farm20;
  Mint20 _Mint20;
  Pet721 _Pet721;

  function setUp() public virtual override {
    super.setUp();

<% components.forEach(component => { -%>
    _<%= component %> = <%= component %>(component(<%= component %>ID));
<% }); -%>

<% systems.forEach(system => { -%>
    _<%= system.name %> = <%= system.name %>(system(<%= system.name %>ID));
<% }); -%>

    _Farm20 = _Farm20ProxySystem.getToken();
    _Pet721 = _Pet721ProxySystem.getToken();
    _Mint20 = _Mint20ProxySystem.getToken();
  }
}