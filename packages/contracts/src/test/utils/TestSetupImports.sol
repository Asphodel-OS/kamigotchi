// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "test/utils/MudTest.t.sol";
import "deployment/Imports.sol";

// Utils
import { WrapCaller } from "test/utils/WrapCaller.sol";

abstract contract TestSetupImports is MudTest {
  // Components vars
  AddressOperatorComponent _AddressOperatorComponent;
  AddressOwnerComponent _AddressOwnerComponent;
  AffinityComponent _AffinityComponent;
  BlacklistComponent _BlacklistComponent;
  BlockRevealComponent _BlockRevealComponent;
  CacheOperatorComponent _CacheOperatorComponent;
  CostComponent _CostComponent;
  DescriptionAltComponent _DescriptionAltComponent;
  DescriptionComponent _DescriptionComponent;
  EntityTypeComponent _EntityTypeComponent;
  ExitsComponent _ExitsComponent;
  ExperienceComponent _ExperienceComponent;
  FarcasterIndexComponent _FarcasterIndexComponent;
  ForComponent _ForComponent;
  HasFlagComponent _HasFlagComponent;
  HarmonyComponent _HarmonyComponent;
  HealthComponent _HealthComponent;
  IDFromComponent _IDFromComponent;
  IdHolderComponent _IdHolderComponent;
  IDParentComponent _IDParentComponent;
  IDOwnsInventoryComponent _IDOwnsInventoryComponent;
  IDOwnsQuestComponent _IDOwnsQuestComponent;
  IDOwnsRelationshipComponent _IDOwnsRelationshipComponent;
  IDOwnsSkillComponent _IDOwnsSkillComponent;
  IDOwnsKamiComponent _IDOwnsKamiComponent;
  IDRoomComponent _IDRoomComponent;
  IdSourceComponent _IdSourceComponent;
  IDTypeComponent _IDTypeComponent;
  IdTargetComponent _IdTargetComponent;
  IDToComponent _IDToComponent;
  IndexComponent _IndexComponent;
  IndexAccountComponent _IndexAccountComponent;
  IndexBackgroundComponent _IndexBackgroundComponent;
  IndexBodyComponent _IndexBodyComponent;
  IndexColorComponent _IndexColorComponent;
  IndexFaceComponent _IndexFaceComponent;
  IndexFactionComponent _IndexFactionComponent;
  IndexHandComponent _IndexHandComponent;
  IndexItemComponent _IndexItemComponent;
  IndexNodeComponent _IndexNodeComponent;
  IndexNPCComponent _IndexNPCComponent;
  IndexKamiComponent _IndexKamiComponent;
  IndexQuestComponent _IndexQuestComponent;
  IndexRecipeComponent _IndexRecipeComponent;
  IndexRelationshipComponent _IndexRelationshipComponent;
  IndexRoomComponent _IndexRoomComponent;
  IndexSkillComponent _IndexSkillComponent;
  IsCompleteComponent _IsCompleteComponent;
  IsKillComponent _IsKillComponent;
  IsRegistryComponent _IsRegistryComponent;
  IsRepeatableComponent _IsRepeatableComponent;
  KeysComponent _KeysComponent;
  LevelComponent _LevelComponent;
  LocationComponent _LocationComponent;
  LogicTypeComponent _LogicTypeComponent;
  MaxComponent _MaxComponent;
  MediaURIComponent _MediaURIComponent;
  NameComponent _NameComponent;
  PowerComponent _PowerComponent;
  ProxyPermissionsERC721Component _ProxyPermissionsERC721Component;
  RarityComponent _RarityComponent;
  RateComponent _RateComponent;
  RerollComponent _RerollComponent;
  SkillPointComponent _SkillPointComponent;
  SlotsComponent _SlotsComponent;
  StaminaComponent _StaminaComponent;
  StateComponent _StateComponent;
  SubtypeComponent _SubtypeComponent;
  TimeComponent _TimeComponent;
  TimeLastActionComponent _TimeLastActionComponent;
  TimeLastComponent _TimeLastComponent;
  TimelockComponent _TimelockComponent;
  TimeResetComponent _TimeResetComponent;
  TimeStartComponent _TimeStartComponent;
  TypeComponent _TypeComponent;
  ValueComponent _ValueComponent;
  ValuesComponent _ValuesComponent;
  ViolenceComponent _ViolenceComponent;
  WeightsComponent _WeightsComponent;
  WhitelistComponent _WhitelistComponent;

  // System vars
  _AdminGiveSystem __AdminGiveSystem;
  _AuthManageRoleSystem __AuthManageRoleSystem;
  _CreatePetSystem __CreatePetSystem;
  _ConfigSetSystem __ConfigSetSystem;
  _FactionRegistrySystem __FactionRegistrySystem;
  _GoalRegistrySystem __GoalRegistrySystem;
  _ItemRegistrySystem __ItemRegistrySystem;
  _ListingRegistrySystem __ListingRegistrySystem;
  _NodeRegistrySystem __NodeRegistrySystem;
  _NPCRegistrySystem __NPCRegistrySystem;
  _QuestRegistrySystem __QuestRegistrySystem;
  _RecipeRegistrySystem __RecipeRegistrySystem;
  _RelationshipRegistrySystem __RelationshipRegistrySystem;
  _RoomRegistrySystem __RoomRegistrySystem;
  _SkillRegistrySystem __SkillRegistrySystem;
  _TraitRegistrySystem __TraitRegistrySystem;
  AccountFundSystem _AccountFundSystem;
  AccountUseFoodSystem _AccountUseFoodSystem;
  AccountUseTeleportSystem _AccountUseTeleportSystem;
  AccountMoveSystem _AccountMoveSystem;
  AccountRegisterSystem _AccountRegisterSystem;
  AccountSetNameSystem _AccountSetNameSystem;
  AccountSetOperatorSystem _AccountSetOperatorSystem;
  AccountSetFarcasterDataSystem _AccountSetFarcasterDataSystem;
  CraftSystem _CraftSystem;
  DroptableRevealSystem _DroptableRevealSystem;
  EchoKamisSystem _EchoKamisSystem;
  EchoRoomSystem _EchoRoomSystem;
  ItemBurnSystem _ItemBurnSystem;
  FriendAcceptSystem _FriendAcceptSystem;
  FriendBlockSystem _FriendBlockSystem;
  FriendCancelSystem _FriendCancelSystem;
  FriendRequestSystem _FriendRequestSystem;
  GoalContributeSystem _GoalContributeSystem;
  GoalClaimSystem _GoalClaimSystem;
  ListingBuySystem _ListingBuySystem;
  ListingSellSystem _ListingSellSystem;
  LootboxCommitSystem _LootboxCommitSystem;
  Kami721IsInWorldSystem _Kami721IsInWorldSystem;
  Kami721MetadataSystem _Kami721MetadataSystem;
  KamiGachaMintSystem _KamiGachaMintSystem;
  KamiGachaRerollSystem _KamiGachaRerollSystem;
  KamiGachaRevealSystem _KamiGachaRevealSystem;
  KamiLevelSystem _KamiLevelSystem;
  KamiNameSystem _KamiNameSystem;
  KamiUseFoodSystem _KamiUseFoodSystem;
  KamiUseRenamePotionSystem _KamiUseRenamePotionSystem;
  KamiUseReviveSystem _KamiUseReviveSystem;
  KamiUseSkillResetSystem _KamiUseSkillResetSystem;
  HarvestCollectSystem _HarvestCollectSystem;
  HarvestLiquidateSystem _HarvestLiquidateSystem;
  HarvestStartSystem _HarvestStartSystem;
  HarvestStopSystem _HarvestStopSystem;
  QuestAcceptSystem _QuestAcceptSystem;
  QuestCompleteSystem _QuestCompleteSystem;
  QuestDropSystem _QuestDropSystem;
  RelationshipAdvanceSystem _RelationshipAdvanceSystem;
  ScavengeClaimSystem _ScavengeClaimSystem;
  SkillUpgradeSystem _SkillUpgradeSystem;
  _721BatchMinterSystem __721BatchMinterSystem;

  WrapCaller ExternalCaller;

  function setUp() public virtual override {
    super.setUp();
    ExternalCaller = new WrapCaller(world, components);

    _AddressOperatorComponent = AddressOperatorComponent(component(AddressOperatorComponentID));
    _AddressOwnerComponent = AddressOwnerComponent(component(AddressOwnerComponentID));
    _AffinityComponent = AffinityComponent(component(AffinityComponentID));
    _BlacklistComponent = BlacklistComponent(component(BlacklistComponentID));
    _BlockRevealComponent = BlockRevealComponent(component(BlockRevealComponentID));
    _CacheOperatorComponent = CacheOperatorComponent(component(CacheOperatorComponentID));
    _CostComponent = CostComponent(component(CostComponentID));
    _DescriptionAltComponent = DescriptionAltComponent(component(DescriptionAltComponentID));
    _DescriptionComponent = DescriptionComponent(component(DescriptionComponentID));
    _EntityTypeComponent = EntityTypeComponent(component(EntityTypeComponentID));
    _ExitsComponent = ExitsComponent(component(ExitsComponentID));
    _ExperienceComponent = ExperienceComponent(component(ExperienceComponentID));
    _FarcasterIndexComponent = FarcasterIndexComponent(component(FarcasterIndexComponentID));
    _ForComponent = ForComponent(component(ForComponentID));
    _HasFlagComponent = HasFlagComponent(component(HasFlagComponentID));
    _HarmonyComponent = HarmonyComponent(component(HarmonyComponentID));
    _HealthComponent = HealthComponent(component(HealthComponentID));
    _IDFromComponent = IDFromComponent(component(IDFromComponentID));
    _IdHolderComponent = IdHolderComponent(component(IdHolderComponentID));
    _IDParentComponent = IDParentComponent(component(IDParentComponentID));
    _IDOwnsInventoryComponent = IDOwnsInventoryComponent(component(IDOwnsInventoryComponentID));
    _IDOwnsQuestComponent = IDOwnsQuestComponent(component(IDOwnsQuestComponentID));
    _IDOwnsRelationshipComponent = IDOwnsRelationshipComponent(component(IDOwnsRelationshipComponentID));
    _IDOwnsSkillComponent = IDOwnsSkillComponent(component(IDOwnsSkillComponentID));
    _IDOwnsKamiComponent = IDOwnsKamiComponent(component(IDOwnsKamiComponentID));
    _IDRoomComponent = IDRoomComponent(component(IDRoomComponentID));
    _IdSourceComponent = IdSourceComponent(component(IdSourceComponentID));
    _IDTypeComponent = IDTypeComponent(component(IDTypeComponentID));
    _IdTargetComponent = IdTargetComponent(component(IdTargetComponentID));
    _IDToComponent = IDToComponent(component(IDToComponentID));
    _IndexComponent = IndexComponent(component(IndexComponentID));
    _IndexAccountComponent = IndexAccountComponent(component(IndexAccountComponentID));
    _IndexBackgroundComponent = IndexBackgroundComponent(component(IndexBackgroundComponentID));
    _IndexBodyComponent = IndexBodyComponent(component(IndexBodyComponentID));
    _IndexColorComponent = IndexColorComponent(component(IndexColorComponentID));
    _IndexFaceComponent = IndexFaceComponent(component(IndexFaceComponentID));
    _IndexFactionComponent = IndexFactionComponent(component(IndexFactionComponentID));
    _IndexHandComponent = IndexHandComponent(component(IndexHandComponentID));
    _IndexItemComponent = IndexItemComponent(component(IndexItemComponentID));
    _IndexNodeComponent = IndexNodeComponent(component(IndexNodeComponentID));
    _IndexNPCComponent = IndexNPCComponent(component(IndexNPCComponentID));
    _IndexKamiComponent = IndexKamiComponent(component(IndexKamiComponentID));
    _IndexQuestComponent = IndexQuestComponent(component(IndexQuestComponentID));
    _IndexRecipeComponent = IndexRecipeComponent(component(IndexRecipeComponentID));
    _IndexRelationshipComponent = IndexRelationshipComponent(component(IndexRelationshipComponentID));
    _IndexRoomComponent = IndexRoomComponent(component(IndexRoomComponentID));
    _IndexSkillComponent = IndexSkillComponent(component(IndexSkillComponentID));
    _IsCompleteComponent = IsCompleteComponent(component(IsCompleteComponentID));
    _IsKillComponent = IsKillComponent(component(IsKillComponentID));
    _IsRegistryComponent = IsRegistryComponent(component(IsRegistryComponentID));
    _IsRepeatableComponent = IsRepeatableComponent(component(IsRepeatableComponentID));
    _KeysComponent = KeysComponent(component(KeysComponentID));
    _LevelComponent = LevelComponent(component(LevelComponentID));
    _LocationComponent = LocationComponent(component(LocationComponentID));
    _LogicTypeComponent = LogicTypeComponent(component(LogicTypeComponentID));
    _MaxComponent = MaxComponent(component(MaxComponentID));
    _MediaURIComponent = MediaURIComponent(component(MediaURIComponentID));
    _NameComponent = NameComponent(component(NameComponentID));
    _PowerComponent = PowerComponent(component(PowerComponentID));
    _ProxyPermissionsERC721Component = ProxyPermissionsERC721Component(component(ProxyPermissionsERC721ComponentID));
    _RarityComponent = RarityComponent(component(RarityComponentID));
    _RateComponent = RateComponent(component(RateComponentID));
    _RerollComponent = RerollComponent(component(RerollComponentID));
    _SkillPointComponent = SkillPointComponent(component(SkillPointComponentID));
    _SlotsComponent = SlotsComponent(component(SlotsComponentID));
    _StaminaComponent = StaminaComponent(component(StaminaComponentID));
    _StateComponent = StateComponent(component(StateComponentID));
    _SubtypeComponent = SubtypeComponent(component(SubtypeComponentID));
    _TimeComponent = TimeComponent(component(TimeComponentID));
    _TimeLastActionComponent = TimeLastActionComponent(component(TimeLastActionComponentID));
    _TimeLastComponent = TimeLastComponent(component(TimeLastComponentID));
    _TimelockComponent = TimelockComponent(component(TimelockComponentID));
    _TimeResetComponent = TimeResetComponent(component(TimeResetComponentID));
    _TimeStartComponent = TimeStartComponent(component(TimeStartComponentID));
    _TypeComponent = TypeComponent(component(TypeComponentID));
    _ValueComponent = ValueComponent(component(ValueComponentID));
    _ValuesComponent = ValuesComponent(component(ValuesComponentID));
    _ViolenceComponent = ViolenceComponent(component(ViolenceComponentID));
    _WeightsComponent = WeightsComponent(component(WeightsComponentID));
    _WhitelistComponent = WhitelistComponent(component(WhitelistComponentID));

    __AdminGiveSystem = _AdminGiveSystem(system(_AdminGiveSystemID));
    __AuthManageRoleSystem = _AuthManageRoleSystem(system(_AuthManageRoleSystemID));
    __CreatePetSystem = _CreatePetSystem(system(_CreatePetSystemID));
    __ConfigSetSystem = _ConfigSetSystem(system(_ConfigSetSystemID));
    __FactionRegistrySystem = _FactionRegistrySystem(system(_FactionRegistrySystemID));
    __GoalRegistrySystem = _GoalRegistrySystem(system(_GoalRegistrySystemID));
    __ItemRegistrySystem = _ItemRegistrySystem(system(_ItemRegistrySystemID));
    __ListingRegistrySystem = _ListingRegistrySystem(system(_ListingRegistrySystemID));
    __NodeRegistrySystem = _NodeRegistrySystem(system(_NodeRegistrySystemID));
    __NPCRegistrySystem = _NPCRegistrySystem(system(_NPCRegistrySystemID));
    __QuestRegistrySystem = _QuestRegistrySystem(system(_QuestRegistrySystemID));
    __RecipeRegistrySystem = _RecipeRegistrySystem(system(_RecipeRegistrySystemID));
    __RelationshipRegistrySystem = _RelationshipRegistrySystem(system(_RelationshipRegistrySystemID));
    __RoomRegistrySystem = _RoomRegistrySystem(system(_RoomRegistrySystemID));
    __SkillRegistrySystem = _SkillRegistrySystem(system(_SkillRegistrySystemID));
    __TraitRegistrySystem = _TraitRegistrySystem(system(_TraitRegistrySystemID));
    _AccountFundSystem = AccountFundSystem(system(AccountFundSystemID));
    _AccountUseFoodSystem = AccountUseFoodSystem(system(AccountUseFoodSystemID));
    _AccountUseTeleportSystem = AccountUseTeleportSystem(system(AccountUseTeleportSystemID));
    _AccountMoveSystem = AccountMoveSystem(system(AccountMoveSystemID));
    _AccountRegisterSystem = AccountRegisterSystem(system(AccountRegisterSystemID));
    _AccountSetNameSystem = AccountSetNameSystem(system(AccountSetNameSystemID));
    _AccountSetOperatorSystem = AccountSetOperatorSystem(system(AccountSetOperatorSystemID));
    _AccountSetFarcasterDataSystem = AccountSetFarcasterDataSystem(system(AccountSetFarcasterDataSystemID));
    _CraftSystem = CraftSystem(system(CraftSystemID));
    _DroptableRevealSystem = DroptableRevealSystem(system(DroptableRevealSystemID));
    _EchoKamisSystem = EchoKamisSystem(system(EchoKamisSystemID));
    _EchoRoomSystem = EchoRoomSystem(system(EchoRoomSystemID));
    _ItemBurnSystem = ItemBurnSystem(system(ItemBurnSystemID));
    _FriendAcceptSystem = FriendAcceptSystem(system(FriendAcceptSystemID));
    _FriendBlockSystem = FriendBlockSystem(system(FriendBlockSystemID));
    _FriendCancelSystem = FriendCancelSystem(system(FriendCancelSystemID));
    _FriendRequestSystem = FriendRequestSystem(system(FriendRequestSystemID));
    _GoalContributeSystem = GoalContributeSystem(system(GoalContributeSystemID));
    _GoalClaimSystem = GoalClaimSystem(system(GoalClaimSystemID));
    _ListingBuySystem = ListingBuySystem(system(ListingBuySystemID));
    _ListingSellSystem = ListingSellSystem(system(ListingSellSystemID));
    _LootboxCommitSystem = LootboxCommitSystem(system(LootboxCommitSystemID));
    _Kami721IsInWorldSystem = Kami721IsInWorldSystem(system(Kami721IsInWorldSystemID));
    _Kami721MetadataSystem = Kami721MetadataSystem(system(Kami721MetadataSystemID));
    _KamiGachaMintSystem = KamiGachaMintSystem(system(KamiGachaMintSystemID));
    _KamiGachaRerollSystem = KamiGachaRerollSystem(system(KamiGachaRerollSystemID));
    _KamiGachaRevealSystem = KamiGachaRevealSystem(system(KamiGachaRevealSystemID));
    _KamiLevelSystem = KamiLevelSystem(system(KamiLevelSystemID));
    _KamiNameSystem = KamiNameSystem(system(KamiNameSystemID));
    _KamiUseFoodSystem = KamiUseFoodSystem(system(KamiUseFoodSystemID));
    _KamiUseRenamePotionSystem = KamiUseRenamePotionSystem(system(KamiUseRenamePotionSystemID));
    _KamiUseReviveSystem = KamiUseReviveSystem(system(KamiUseReviveSystemID));
    _KamiUseSkillResetSystem = KamiUseSkillResetSystem(system(KamiUseSkillResetSystemID));
    _HarvestCollectSystem = HarvestCollectSystem(system(HarvestCollectSystemID));
    _HarvestLiquidateSystem = HarvestLiquidateSystem(system(HarvestLiquidateSystemID));
    _HarvestStartSystem = HarvestStartSystem(system(HarvestStartSystemID));
    _HarvestStopSystem = HarvestStopSystem(system(HarvestStopSystemID));
    _QuestAcceptSystem = QuestAcceptSystem(system(QuestAcceptSystemID));
    _QuestCompleteSystem = QuestCompleteSystem(system(QuestCompleteSystemID));
    _QuestDropSystem = QuestDropSystem(system(QuestDropSystemID));
    _RelationshipAdvanceSystem = RelationshipAdvanceSystem(system(RelationshipAdvanceSystemID));
    _ScavengeClaimSystem = ScavengeClaimSystem(system(ScavengeClaimSystemID));
    _SkillUpgradeSystem = SkillUpgradeSystem(system(SkillUpgradeSystemID));
    __721BatchMinterSystem = _721BatchMinterSystem(system(_721BatchMinterSystemID));

    vm.startPrank(deployer);
    _AddressOperatorComponent.authorizeWriter(address(ExternalCaller));
    _AddressOwnerComponent.authorizeWriter(address(ExternalCaller));
    _AffinityComponent.authorizeWriter(address(ExternalCaller));
    _BlacklistComponent.authorizeWriter(address(ExternalCaller));
    _BlockRevealComponent.authorizeWriter(address(ExternalCaller));
    _CacheOperatorComponent.authorizeWriter(address(ExternalCaller));
    _CostComponent.authorizeWriter(address(ExternalCaller));
    _DescriptionAltComponent.authorizeWriter(address(ExternalCaller));
    _DescriptionComponent.authorizeWriter(address(ExternalCaller));
    _EntityTypeComponent.authorizeWriter(address(ExternalCaller));
    _ExitsComponent.authorizeWriter(address(ExternalCaller));
    _ExperienceComponent.authorizeWriter(address(ExternalCaller));
    _FarcasterIndexComponent.authorizeWriter(address(ExternalCaller));
    _ForComponent.authorizeWriter(address(ExternalCaller));
    _HasFlagComponent.authorizeWriter(address(ExternalCaller));
    _HarmonyComponent.authorizeWriter(address(ExternalCaller));
    _HealthComponent.authorizeWriter(address(ExternalCaller));
    _IDFromComponent.authorizeWriter(address(ExternalCaller));
    _IdHolderComponent.authorizeWriter(address(ExternalCaller));
    _IDParentComponent.authorizeWriter(address(ExternalCaller));
    _IDOwnsInventoryComponent.authorizeWriter(address(ExternalCaller));
    _IDOwnsQuestComponent.authorizeWriter(address(ExternalCaller));
    _IDOwnsRelationshipComponent.authorizeWriter(address(ExternalCaller));
    _IDOwnsSkillComponent.authorizeWriter(address(ExternalCaller));
    _IDOwnsKamiComponent.authorizeWriter(address(ExternalCaller));
    _IDRoomComponent.authorizeWriter(address(ExternalCaller));
    _IdSourceComponent.authorizeWriter(address(ExternalCaller));
    _IDTypeComponent.authorizeWriter(address(ExternalCaller));
    _IdTargetComponent.authorizeWriter(address(ExternalCaller));
    _IDToComponent.authorizeWriter(address(ExternalCaller));
    _IndexComponent.authorizeWriter(address(ExternalCaller));
    _IndexAccountComponent.authorizeWriter(address(ExternalCaller));
    _IndexBackgroundComponent.authorizeWriter(address(ExternalCaller));
    _IndexBodyComponent.authorizeWriter(address(ExternalCaller));
    _IndexColorComponent.authorizeWriter(address(ExternalCaller));
    _IndexFaceComponent.authorizeWriter(address(ExternalCaller));
    _IndexFactionComponent.authorizeWriter(address(ExternalCaller));
    _IndexHandComponent.authorizeWriter(address(ExternalCaller));
    _IndexItemComponent.authorizeWriter(address(ExternalCaller));
    _IndexNodeComponent.authorizeWriter(address(ExternalCaller));
    _IndexNPCComponent.authorizeWriter(address(ExternalCaller));
    _IndexKamiComponent.authorizeWriter(address(ExternalCaller));
    _IndexQuestComponent.authorizeWriter(address(ExternalCaller));
    _IndexRecipeComponent.authorizeWriter(address(ExternalCaller));
    _IndexRelationshipComponent.authorizeWriter(address(ExternalCaller));
    _IndexRoomComponent.authorizeWriter(address(ExternalCaller));
    _IndexSkillComponent.authorizeWriter(address(ExternalCaller));
    _IsCompleteComponent.authorizeWriter(address(ExternalCaller));
    _IsKillComponent.authorizeWriter(address(ExternalCaller));
    _IsRegistryComponent.authorizeWriter(address(ExternalCaller));
    _IsRepeatableComponent.authorizeWriter(address(ExternalCaller));
    _KeysComponent.authorizeWriter(address(ExternalCaller));
    _LevelComponent.authorizeWriter(address(ExternalCaller));
    _LocationComponent.authorizeWriter(address(ExternalCaller));
    _LogicTypeComponent.authorizeWriter(address(ExternalCaller));
    _MaxComponent.authorizeWriter(address(ExternalCaller));
    _MediaURIComponent.authorizeWriter(address(ExternalCaller));
    _NameComponent.authorizeWriter(address(ExternalCaller));
    _PowerComponent.authorizeWriter(address(ExternalCaller));
    _ProxyPermissionsERC721Component.authorizeWriter(address(ExternalCaller));
    _RarityComponent.authorizeWriter(address(ExternalCaller));
    _RateComponent.authorizeWriter(address(ExternalCaller));
    _RerollComponent.authorizeWriter(address(ExternalCaller));
    _SkillPointComponent.authorizeWriter(address(ExternalCaller));
    _SlotsComponent.authorizeWriter(address(ExternalCaller));
    _StaminaComponent.authorizeWriter(address(ExternalCaller));
    _StateComponent.authorizeWriter(address(ExternalCaller));
    _SubtypeComponent.authorizeWriter(address(ExternalCaller));
    _TimeComponent.authorizeWriter(address(ExternalCaller));
    _TimeLastActionComponent.authorizeWriter(address(ExternalCaller));
    _TimeLastComponent.authorizeWriter(address(ExternalCaller));
    _TimelockComponent.authorizeWriter(address(ExternalCaller));
    _TimeResetComponent.authorizeWriter(address(ExternalCaller));
    _TimeStartComponent.authorizeWriter(address(ExternalCaller));
    _TypeComponent.authorizeWriter(address(ExternalCaller));
    _ValueComponent.authorizeWriter(address(ExternalCaller));
    _ValuesComponent.authorizeWriter(address(ExternalCaller));
    _ViolenceComponent.authorizeWriter(address(ExternalCaller));
    _WeightsComponent.authorizeWriter(address(ExternalCaller));
    _WhitelistComponent.authorizeWriter(address(ExternalCaller));
    vm.stopPrank();
  }
}