// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "./TestSetupImports.sol";

import { Deploy } from "test/Deploy.sol";
import "std-contracts/test/MudTest.t.sol";

import { LibString } from "solady/utils/LibString.sol";

abstract contract SetupTemplate is TestSetupImports {
  uint256 petOneEntityID;
  uint256 petTwoEntityID;
  uint256 petThreeEntityID;

  constructor() MudTest(new Deploy()) {}

  function setUp() public virtual override {
    super.setUp();

    // during setup we want to:
    // - set the world configs
    // - create rooms
    // - create accounts

    // - initialize traits
    // - mint pets

    // we also want to expose functions for:
    // - registering traits
    // - registering items
    // - registering
    // - minting pets

    _initMetadata();
    _initTraits();
    _initConfigs();
  }

  /***********************
   *   minting pets
   ************************/

  // mints and reveals
  function _mintPets(uint256 n) internal virtual {
    require(n <= 3, "MUDTest: max three non-admin test accounts");
    if (n > 0) petOneEntityID = _mintSinglePet(alice);
    if (n > 1) petTwoEntityID = _mintSinglePet(bob);
    if (n > 2) petThreeEntityID = _mintSinglePet(eve);
  }

  // mints to Owner
  function _mintSinglePet(address addy) internal virtual returns (uint256 entityID) {
    if (LibAccount.getByOwner(components, addy) == 0) {
      _registerAccount(addy, addy);
    }
    vm.startPrank(addy, addy);
    entityID = abi.decode(_ERC721MintSystem.executeTyped(addy, 1), (uint256[]))[0];
    vm.roll(block.number + 1);
    _ERC721RevealSystem.executeTyped(LibPet.idToIndex(components, entityID));
    vm.stopPrank();
  }

  /***********************
   *   room create
   ************************/
  function _roomCreate(string memory name, uint256 location, uint256[] memory exits) internal {
    vm.prank(deployer);
    __RoomCreateSystem.executeTyped(name, location, exits);
  }

  /***********************
   *   accounts
   ************************/

  // similar to _mintPets, but accounts
  function _registerAccounts(uint256 n) internal virtual {
    require(n <= 3, "MUDTest: max three non-admin test accounts");
    if (n > 0) _registerAccount(alice, alice);
    if (n > 1) _registerAccount(bob, bob);
    if (n > 2) _registerAccount(eve, eve);
  }

  // for simplicity, account names are autogenerated by the address
  function _registerAccount(address owner, address operator) internal {
    vm.startPrank(owner, owner);
    // name has to be sliced to keep <16 chars
    _AccountRegisterSystem.executeTyped(
      operator,
      LibString.slice(LibString.toHexString(owner), 0, 15)
    );
    vm.stopPrank();
  }

  /***********************
   *   configs
   ************************/
  function _setConfig(string memory key, uint256 value) internal {
    vm.prank(deployer);
    __ConfigSetSystem.executeTyped(key, value);
  }

  function _setConfigString(string memory key, string memory value) internal {
    vm.prank(deployer);
    __ConfigSetStringSystem.executeTyped(key, value);
  }

  /***********************
   *   inits
   ************************/
  function _initMetadata() internal {
    vm.startPrank(deployer);
    _ERC721RevealSystem._setBaseURI("baseURI.com/");
    vm.stopPrank();
  }

  // creates bare minimum traits (1 of each)
  // PLACEHOLDER
  function _initTraits() internal {
    vm.startPrank(deployer);
    __RegistryCreateTraitSystem.executeTyped(
      1, // index
      100, // health
      100, // power
      100, // violence
      100, // harmony
      0, // slots
      1, // rarity tier
      "INSECT", // affinity
      "NAME", // name
      "BODY" // trait type
    );

    __RegistryCreateTraitSystem.executeTyped(
      1, // index
      100, // health
      100, // power
      100, // violence
      100, // harmony
      0, // slots
      1, // rarity tier
      "INSECT", // affinity
      "NAME", // name
      "BACKGROUND" // trait type
    );

    __RegistryCreateTraitSystem.executeTyped(
      1, // index
      100, // health
      100, // power
      100, // violence
      100, // harmony
      0, // slots
      1, // rarity tier
      "INSECT", // affinity
      "NAME", // name
      "COLOR" // trait type
    );

    __RegistryCreateTraitSystem.executeTyped(
      1, // index
      100, // health
      100, // power
      100, // violence
      100, // harmony
      0, // slots
      1, // rarity tier
      "INSECT", // affinity
      "NAME", // name
      "FACE" // trait type
    );

    __RegistryCreateTraitSystem.executeTyped(
      2, // index
      100, // health
      100, // power
      100, // violence
      100, // harmony
      0, // slots
      1, // rarity tier
      "NORMAL", // affinity
      "NAME", // name
      "FACE" // trait type
    );

    __RegistryCreateTraitSystem.executeTyped(
      3, // index
      100, // health
      100, // power
      100, // violence
      100, // harmony
      0, // slots
      1, // rarity tier
      "EERIE", // affinity
      "NAME", // name
      "FACE" // trait type
    );

    __RegistryCreateTraitSystem.executeTyped(
      4, // index
      100, // health
      100, // power
      100, // violence
      100, // harmony
      0, // slots
      1, // rarity tier
      "SCRAP", // affinity
      "NAME", // name
      "FACE" // trait type
    );

    __RegistryCreateTraitSystem.executeTyped(
      1, // index
      100, // health
      100, // power
      100, // violence
      100, // harmony
      0, // slots
      1, // rarity tier
      "INSECT", // affinity
      "NAME", // name
      "HAND" // trait type
    );

    vm.stopPrank();
  }

  function _initConfigs() internal {
    // Account Stamina
    _setConfig("ACCOUNT_STAMINA_BASE", 20);
    _setConfig("ACCOUNT_STAMINA_RECOVERY_PERIOD", 300);

    // Kami Stats
    _setConfig("KAMI_BASE_HEALTH", 50);
    _setConfig("KAMI_BASE_POWER", 10);
    _setConfig("KAMI_BASE_VIOLENCE", 10);
    _setConfig("KAMI_BASE_HARMONY", 10);
    _setConfig("KAMI_BASE_SLOTS", 0);

    // Harvest Rates
    _setConfig("HARVEST_RATE_PREC", 9);
    _setConfig("HARVEST_RATE_BASE", 100);
    _setConfig("HARVEST_RATE_BASE_PREC", 3);
    _setConfig("HARVEST_RATE_MULT_PREC", 4);
    _setConfig("HARVEST_RATE_MULT_AFF_BASE", 100);
    _setConfig("HARVEST_RATE_MULT_AFF_UP", 150);
    _setConfig("HARVEST_RATE_MULT_AFF_DOWN", 50);
    _setConfig("HARVEST_RATE_MULT_AFF_PREC", 2);

    // Kami Health Drain/Heal Rates
    _setConfig("HEALTH_RATE_DRAIN_BASE", 5000); // in respect to harvest rate
    _setConfig("HEALTH_RATE_DRAIN_BASE_PREC", 3);
    _setConfig("HEALTH_RATE_HEAL_PREC", 6);
    _setConfig("HEALTH_RATE_HEAL_BASE", 100); // in respect to harmony
    _setConfig("HEALTH_RATE_HEAL_BASE_PREC", 3);

    // Liquidation Idle Requirements
    _setConfig("LIQ_IDLE_REQ", 300);

    // Liquidation Calcs
    _setConfig("LIQ_THRESH_BASE", 20);
    _setConfig("LIQ_THRESH_BASE_PREC", 2);
    _setConfig("LIQ_THRESH_MULT_AFF_BASE", 100);
    _setConfig("LIQ_THRESH_MULT_AFF_UP", 200);
    _setConfig("LIQ_THRESH_MULT_AFF_DOWN", 50);
    _setConfig("LIQ_THRESH_MULT_AFF_PREC", 2);

    // Liquidation Bounty
    _setConfig("LIQ_BOUNTY_BASE", 50);
    _setConfig("LIQ_BOUNTY_BASE_PREC", 3);
  }
}
