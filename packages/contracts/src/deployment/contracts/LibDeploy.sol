// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

// Foundry
import { DSTest } from "ds-test/test.sol";
import { console } from "forge-std/console.sol";

// Solecs
import { World } from "solecs/World.sol";
import { Component } from "solecs/Component.sol";
import { getAddressById } from "solecs/utils.sol";
import { IUint256Component } from "solecs/interfaces/IUint256Component.sol";
import { ISystem } from "solecs/interfaces/ISystem.sol";
import { IComponent } from "solecs/interfaces/IComponent.sol";

// Components
import { AddressOperatorComponent, ID as AddressOperatorComponentID } from "components/AddressOperatorComponent.sol";
import { AddressOwnerComponent, ID as AddressOwnerComponentID } from "components/AddressOwnerComponent.sol";
import { AffinityComponent, ID as AffinityComponentID } from "components/AffinityComponent.sol";
import { BalanceComponent, ID as BalanceComponentID } from "components/BalanceComponent.sol";
import { BalancesComponent, ID as BalancesComponentID } from "components/BalancesComponent.sol";
import { BareValueComponent, ID as BareValueComponentID } from "components/BareValueComponent.sol";
import { BlacklistComponent, ID as BlacklistComponentID } from "components/BlacklistComponent.sol";
import { BlockRevealComponent, ID as BlockRevealComponentID } from "components/BlockRevealComponent.sol";
import { CanNameComponent, ID as CanNameComponentID } from "components/CanNameComponent.sol";
import { CoinComponent, ID as CoinComponentID } from "components/CoinComponent.sol";
import { CostComponent, ID as CostComponentID } from "components/CostComponent.sol";
import { DescriptionComponent, ID as DescriptionComponentID } from "components/DescriptionComponent.sol";
import { EpochComponent, ID as EpochComponentID } from "components/EpochComponent.sol";
import { ExitsComponent, ID as ExitsComponentID } from "components/ExitsComponent.sol";
import { ExperienceComponent, ID as ExperienceComponentID } from "components/ExperienceComponent.sol";
import { FavoriteFoodComponent, ID as FavoriteFoodComponentID } from "components/FavoriteFoodComponent.sol";
import { ForComponent, ID as ForComponentID } from "components/ForComponent.sol";
import { GachaOrderComponent, ID as GachaOrderComponentID } from "components/GachaOrderComponent.sol";
import { HarmonyComponent, ID as HarmonyComponentID } from "components/HarmonyComponent.sol";
import { HealthComponent, ID as HealthComponentID } from "components/HealthComponent.sol";
import { IdAccountComponent, ID as IdAccountComponentID } from "components/IdAccountComponent.sol";
import { IdDelegateeComponent, ID as IdDelegateeComponentID } from "components/IdDelegateeComponent.sol";
import { IdDelegatorComponent, ID as IdDelegatorComponentID } from "components/IdDelegatorComponent.sol";
import { IdHolderComponent, ID as IdHolderComponentID } from "components/IdHolderComponent.sol";
import { IdNodeComponent, ID as IdNodeComponentID } from "components/IdNodeComponent.sol";
import { IdPetComponent, ID as IdPetComponentID } from "components/IdPetComponent.sol";
import { IdSourceComponent, ID as IdSourceComponentID } from "components/IdSourceComponent.sol";
import { IdTargetComponent, ID as IdTargetComponentID } from "components/IdTargetComponent.sol";
import { IndexComponent, ID as IndexComponentID } from "components/IndexComponent.sol";
import { IndexAccountComponent, ID as IndexAccountComponentID } from "components/IndexAccountComponent.sol";
import { IndexBackgroundComponent, ID as IndexBackgroundComponentID } from "components/IndexBackgroundComponent.sol";
import { IndexBodyComponent, ID as IndexBodyComponentID } from "components/IndexBodyComponent.sol";
import { IndexColorComponent, ID as IndexColorComponentID } from "components/IndexColorComponent.sol";
import { IndexFaceComponent, ID as IndexFaceComponentID } from "components/IndexFaceComponent.sol";
import { IndexFarcasterComponent, ID as IndexFarcasterComponentID } from "components/IndexFarcasterComponent.sol";
import { IndexHandComponent, ID as IndexHandComponentID } from "components/IndexHandComponent.sol";
import { IndexItemComponent, ID as IndexItemComponentID } from "components/IndexItemComponent.sol";
import { IndexNodeComponent, ID as IndexNodeComponentID } from "components/IndexNodeComponent.sol";
import { IndexNPCComponent, ID as IndexNPCComponentID } from "components/IndexNPCComponent.sol";
import { IndexObjectiveComponent, ID as IndexObjectiveComponentID } from "components/IndexObjectiveComponent.sol";
import { IndexPetComponent, ID as IndexPetComponentID } from "components/IndexPetComponent.sol";
import { IndexRelationshipComponent, ID as IndexRelationshipComponentID } from "components/IndexRelationshipComponent.sol";
import { IndexQuestComponent, ID as IndexQuestComponentID } from "components/IndexQuestComponent.sol";
import { IndexSkillComponent, ID as IndexSkillComponentID } from "components/IndexSkillComponent.sol";
import { IndexSourceComponent, ID as IndexSourceComponentID } from "components/IndexSourceComponent.sol";
import { IndexTraitComponent, ID as IndexTraitComponentID } from "components/IndexTraitComponent.sol";
import { IsAccountComponent, ID as IsAccountComponentID } from "components/IsAccountComponent.sol";
import { IsBonusComponent, ID as IsBonusComponentID } from "components/IsBonusComponent.sol";
import { IsCompleteComponent, ID as IsCompleteComponentID } from "components/IsCompleteComponent.sol";
import { IsConditionComponent, ID as IsConditionComponentID } from "components/IsConditionComponent.sol";
import { IsConsumableComponent, ID as IsConsumableComponentID } from "components/IsConsumableComponent.sol";
import { IsEffectComponent, ID as IsEffectComponentID } from "components/IsEffectComponent.sol";
import { IsEquippedComponent, ID as IsEquippedComponentID } from "components/IsEquippedComponent.sol";
import { IsFriendshipComponent, ID as IsFriendshipComponentID } from "components/IsFriendshipComponent.sol";
import { IsFungibleComponent, ID as IsFungibleComponentID } from "components/IsFungibleComponent.sol";
import { IsInventoryComponent, ID as IsInventoryComponentID } from "components/IsInventoryComponent.sol";
import { IsKillComponent, ID as IsKillComponentID } from "components/IsKillComponent.sol";
import { IsListingComponent, ID as IsListingComponentID } from "components/IsListingComponent.sol";
import { IsLogComponent, ID as IsLogComponentID } from "components/IsLogComponent.sol";
import { IsLootboxComponent, ID as IsLootboxComponentID } from "components/IsLootboxComponent.sol";
import { IsNodeComponent, ID as IsNodeComponentID } from "components/IsNodeComponent.sol";
import { IsNPCComponent, ID as IsNPCComponentID } from "components/IsNPCComponent.sol";
import { IsPetComponent, ID as IsPetComponentID } from "components/IsPetComponent.sol";
import { IsProductionComponent, ID as IsProductionComponentID } from "components/IsProductionComponent.sol";
import { IsRegistryComponent, ID as IsRegistryComponentID } from "components/IsRegistryComponent.sol";
import { IsRelationshipComponent, ID as IsRelationshipComponentID } from "components/IsRelationshipComponent.sol";
import { IsRepeatableComponent, ID as IsRepeatableComponentID } from "components/IsRepeatableComponent.sol";
import { IsRequirementComponent, ID as IsRequirementComponentID } from "components/IsRequirementComponent.sol";
import { IsRewardComponent, ID as IsRewardComponentID } from "components/IsRewardComponent.sol";
import { IsRoomComponent, ID as IsRoomComponentID } from "components/IsRoomComponent.sol";
import { IsObjectiveComponent, ID as IsObjectiveComponentID } from "components/IsObjectiveComponent.sol";
import { IsQuestComponent, ID as IsQuestComponentID } from "components/IsQuestComponent.sol";
import { IsScoreComponent, ID as IsScoreComponentID } from "components/IsScoreComponent.sol";
import { IsSkillComponent, ID as IsSkillComponentID } from "components/IsSkillComponent.sol";
import { KeysComponent, ID as KeysComponentID } from "components/KeysComponent.sol";
import { LevelComponent, ID as LevelComponentID } from "components/LevelComponent.sol";
import { LocationComponent, ID as LocationComponentID } from "components/LocationComponent.sol";
import { IndexRoomComponent, ID as IndexRoomComponentID } from "components/IndexRoomComponent.sol";
import { LogicTypeComponent, ID as LogicTypeComponentID } from "components/LogicTypeComponent.sol";
import { MaxComponent, ID as MaxComponentID } from "components/MaxComponent.sol";
import { MediaURIComponent, ID as MediaURIComponentID } from "components/MediaURIComponent.sol";
import { NameComponent, ID as NameComponentID } from "components/NameComponent.sol";
import { PowerComponent, ID as PowerComponentID } from "components/PowerComponent.sol";
import { PriceBuyComponent, ID as PriceBuyComponentID } from "components/PriceBuyComponent.sol";
import { PriceSellComponent, ID as PriceSellComponentID } from "components/PriceSellComponent.sol";
import { ProxyPermissionsFarm20Component, ID as ProxyPermissionsFarm20ComponentID } from "components/ProxyPermissionsFarm20Component.sol";
import { ProxyPermissionsERC721Component, ID as ProxyPermissionsERC721ComponentID } from "components/ProxyPermissionsERC721Component.sol";
import { ProxyPermissionsMint20Component, ID as ProxyPermissionsMint20ComponentID } from "components/ProxyPermissionsMint20Component.sol";
import { QuestPointComponent, ID as QuestPointComponentID } from "components/QuestPointComponent.sol";
import { RarityComponent, ID as RarityComponentID } from "components/RarityComponent.sol";
import { RateComponent, ID as RateComponentID } from "components/RateComponent.sol";
import { RerollComponent, ID as RerollComponentID } from "components/RerollComponent.sol";
import { SkillPointComponent, ID as SkillPointComponentID } from "components/SkillPointComponent.sol";
import { SlotsComponent, ID as SlotsComponentID } from "components/SlotsComponent.sol";
import { StaminaComponent, ID as StaminaComponentID } from "components/StaminaComponent.sol";
import { StateComponent, ID as StateComponentID } from "components/StateComponent.sol";
import { SubtypeComponent, ID as SubtypeComponentID } from "components/SubtypeComponent.sol";
import { TimeComponent, ID as TimeComponentID } from "components/TimeComponent.sol";
import { TimelockComponent, ID as TimelockComponentID } from "components/TimelockComponent.sol";
import { TimeLastActionComponent, ID as TimeLastActionComponentID } from "components/TimeLastActionComponent.sol";
import { TimeLastComponent, ID as TimeLastComponentID } from "components/TimeLastComponent.sol";
import { TimeStartComponent, ID as TimeStartComponentID } from "components/TimeStartComponent.sol";
import { TypeComponent, ID as TypeComponentID } from "components/TypeComponent.sol";
import { ValueComponent, ID as ValueComponentID } from "components/ValueComponent.sol";
import { ViolenceComponent, ID as ViolenceComponentID } from "components/ViolenceComponent.sol";
import { WeightsComponent, ID as WeightsComponentID } from "components/WeightsComponent.sol";
import { WhitelistComponent, ID as WhitelistComponentID } from "components/WhitelistComponent.sol";

// Systems
import { _devGiveTokensSystem, ID as _devGiveTokensSystemID } from "systems/_devGiveTokensSystem.sol";
import { _ConfigSetSystem, ID as _ConfigSetSystemID } from "systems/_ConfigSetSystem.sol";
import { _ListingSetSystem, ID as _ListingSetSystemID } from "systems/_ListingSetSystem.sol";
import { _NodeCreateSystem, ID as _NodeCreateSystemID } from "systems/_NodeCreateSystem.sol";
import { _NodeDeleteSystem, ID as _NodeDeleteSystemID } from "systems/_NodeDeleteSystem.sol";
import { _NPCCreateSystem, ID as _NPCCreateSystemID } from "systems/_NPCCreateSystem.sol";
import { _NPCSetRoomSystem, ID as _NPCSetRoomSystemID } from "systems/_NPCSetRoomSystem.sol";
import { _NPCSetNameSystem, ID as _NPCSetNameSystemID } from "systems/_NPCSetNameSystem.sol";
import { _RegistryCreateItemConsumableSystem, ID as _RegistryCreateItemConsumableSystemID } from "systems/_RegistryCreateItemConsumableSystem.sol";
import { _RegistryCreateFoodSystem, ID as _RegistryCreateFoodSystemID } from "systems/_RegistryCreateFoodSystem.sol";
import { _RegistryCreateLootboxSystem, ID as _RegistryCreateLootboxSystemID } from "systems/_RegistryCreateLootboxSystem.sol";
import { _RegistryCreateQuestSystem, ID as _RegistryCreateQuestSystemID } from "systems/_RegistryCreateQuestSystem.sol";
import { _RegistryCreateQuestObjectiveSystem, ID as _RegistryCreateQuestObjectiveSystemID } from "systems/_RegistryCreateQuestObjectiveSystem.sol";
import { _RegistryCreateQuestRequirementSystem, ID as _RegistryCreateQuestRequirementSystemID } from "systems/_RegistryCreateQuestRequirementSystem.sol";
import { _RegistryCreateQuestRewardSystem, ID as _RegistryCreateQuestRewardSystemID } from "systems/_RegistryCreateQuestRewardSystem.sol";
import { _RegistryCreateRelationshipSystem, ID as _RegistryCreateRelationshipSystemID } from "systems/_RegistryCreateRelationshipSystem.sol";
import { _RegistryCreateReviveSystem, ID as _RegistryCreateReviveSystemID } from "systems/_RegistryCreateReviveSystem.sol";
import { _RegistryCreateSkillSystem, ID as _RegistryCreateSkillSystemID } from "systems/_RegistryCreateSkillSystem.sol";
import { _RegistryCreateSkillEffectSystem, ID as _RegistryCreateSkillEffectSystemID } from "systems/_RegistryCreateSkillEffectSystem.sol";
import { _RegistryCreateSkillRequirementSystem, ID as _RegistryCreateSkillRequirementSystemID } from "systems/_RegistryCreateSkillRequirementSystem.sol";
import { _RegistryCreateTraitSystem, ID as _RegistryCreateTraitSystemID } from "systems/_RegistryCreateTraitSystem.sol";
import { _RegistryDeleteTraitSystem, ID as _RegistryDeleteTraitSystemID } from "systems/_RegistryDeleteTraitSystem.sol";
import { _RegistryDeleteItemSystem, ID as _RegistryDeleteItemSystemID } from "systems/_RegistryDeleteItemSystem.sol";
import { _RegistryDeleteQuestSystem, ID as _RegistryDeleteQuestSystemID } from "systems/_RegistryDeleteQuestSystem.sol";
import { _RegistryDeleteSkillSystem, ID as _RegistryDeleteSkillSystemID } from "systems/_RegistryDeleteSkillSystem.sol";
import { _RegistryUpdateRelationshipSystem, ID as _RegistryUpdateRelationshipSystemID } from "systems/_RegistryUpdateRelationshipSystem.sol";
import { _RoomCreateGateSystem, ID as _RoomCreateGateSystemID } from "systems/_RoomCreateGateSystem.sol";
import { _RoomCreateSystem, ID as _RoomCreateSystemID } from "systems/_RoomCreateSystem.sol";
import { _RoomDeleteSystem, ID as _RoomDeleteSystemID } from "systems/_RoomDeleteSystem.sol";
import { AccountFundSystem, ID as AccountFundSystemID } from "systems/AccountFundSystem.sol";
import { AccountMoveSystem, ID as AccountMoveSystemID } from "systems/AccountMoveSystem.sol";
import { AccountRegisterSystem, ID as AccountRegisterSystemID } from "systems/AccountRegisterSystem.sol";
import { AccountSetNameSystem, ID as AccountSetNameSystemID } from "systems/AccountSetNameSystem.sol";
import { AccountSetOperatorSystem, ID as AccountSetOperatorSystemID } from "systems/AccountSetOperatorSystem.sol";
import { AccountSetFarcasterDataSystem, ID as AccountSetFarcasterDataSystemID } from "systems/AccountSetFarcasterDataSystem.sol";
import { AccountUpgradeSkillSystem, ID as AccountUpgradeSkillSystemID } from "systems/AccountUpgradeSkillSystem.sol";
import { Farm20ProxySystem, ID as Farm20ProxySystemID } from "systems/Farm20ProxySystem.sol";
import { Farm20DepositSystem, ID as Farm20DepositSystemID } from "systems/Farm20DepositSystem.sol";
import { Farm20WithdrawSystem, ID as Farm20WithdrawSystemID } from "systems/Farm20WithdrawSystem.sol";
import { FriendAcceptSystem, ID as FriendAcceptSystemID } from "systems/FriendAcceptSystem.sol";
import { FriendBlockSystem, ID as FriendBlockSystemID } from "systems/FriendBlockSystem.sol";
import { FriendCancelSystem, ID as FriendCancelSystemID } from "systems/FriendCancelSystem.sol";
import { FriendRequestSystem, ID as FriendRequestSystemID } from "systems/FriendRequestSystem.sol";
import { ListingBuySystem, ID as ListingBuySystemID } from "systems/ListingBuySystem.sol";
import { ListingSellSystem, ID as ListingSellSystemID } from "systems/ListingSellSystem.sol";
import { LootboxExecuteRevealSystem, ID as LootboxExecuteRevealSystemID } from "systems/LootboxExecuteRevealSystem.sol";
import { LootboxStartRevealSystem, ID as LootboxStartRevealSystemID } from "systems/LootboxStartRevealSystem.sol";
import { Mint20ProxySystem, ID as Mint20ProxySystemID } from "systems/Mint20ProxySystem.sol";
import { Mint20MintSystem, ID as Mint20MintSystemID } from "systems/Mint20MintSystem.sol";
import { NodeCollectSystem, ID as NodeCollectSystemID } from "systems/NodeCollectSystem.sol";
import { Pet721IsInWorldSystem, ID as Pet721IsInWorldSystemID } from "systems/Pet721IsInWorldSystem.sol";
import { Pet721MetadataSystem, ID as Pet721MetadataSystemID } from "systems/Pet721MetadataSystem.sol";
import { Pet721ProxySystem, ID as Pet721ProxySystemID } from "systems/Pet721ProxySystem.sol";
import { Pet721UnstakeSystem, ID as Pet721UnstakeSystemID } from "systems/Pet721UnstakeSystem.sol";
import { Pet721StakeSystem, ID as Pet721StakeSystemID } from "systems/Pet721StakeSystem.sol";
import { PetFeedSystem, ID as PetFeedSystemID } from "systems/PetFeedSystem.sol";
import { PetGachaMintSystem, ID as PetGachaMintSystemID } from "systems/PetGachaMintSystem.sol";
import { PetGachaRerollSystem, ID as PetGachaRerollSystemID } from "systems/PetGachaRerollSystem.sol";
import { PetGachaRevealSystem, ID as PetGachaRevealSystemID } from "systems/PetGachaRevealSystem.sol";
import { PetLevelSystem, ID as PetLevelSystemID } from "systems/PetLevelSystem.sol";
import { PetNameSystem, ID as PetNameSystemID } from "systems/PetNameSystem.sol";
import { PetReviveSystem, ID as PetReviveSystemID } from "systems/PetReviveSystem.sol";
import { PetSetAccountSystem, ID as PetSetAccountSystemID } from "systems/PetSetAccountSystem.sol";
import { PetUpgradeSkillSystem, ID as PetUpgradeSkillSystemID } from "systems/PetUpgradeSkillSystem.sol";
import { PetUseItemSystem, ID as PetUseItemSystemID } from "systems/PetUseItemSystem.sol";
import { ProductionCollectSystem, ID as ProductionCollectSystemID } from "systems/ProductionCollectSystem.sol";
import { ProductionLiquidateSystem, ID as ProductionLiquidateSystemID } from "systems/ProductionLiquidateSystem.sol";
import { ProductionStartSystem, ID as ProductionStartSystemID } from "systems/ProductionStartSystem.sol";
import { ProductionStopSystem, ID as ProductionStopSystemID } from "systems/ProductionStopSystem.sol";
import { QuestAcceptSystem, ID as QuestAcceptSystemID } from "systems/QuestAcceptSystem.sol";
import { QuestCompleteSystem, ID as QuestCompleteSystemID } from "systems/QuestCompleteSystem.sol";
import { QuestDropSystem, ID as QuestDropSystemID } from "systems/QuestDropSystem.sol";
import { RelationshipAdvanceSystem, ID as RelationshipAdvanceSystemID } from "systems/RelationshipAdvanceSystem.sol";
import { SkillUpgradeSystem, ID as SkillUpgradeSystemID } from "systems/SkillUpgradeSystem.sol";
import { _721BatchMinterSystem, ID as _721BatchMinterSystemID } from "systems/_721BatchMinterSystem.sol";

struct DeployResult {
World world;
address deployer;
}

library LibDeploy {
function deploy(
address _deployer,
address _world,
bool _reuseComponents
) internal returns (DeployResult memory result) {
result.deployer = _deployer;

// ------------------------
// Deploy
// ------------------------

// Deploy world
result.world = _world == address(0) ? new World() : World(_world);
if(_world == address(0)) result.world.init(); // Init if it's a fresh world

// Deploy components
if(!_reuseComponents) {
IComponent comp;

console.log("Deploying AddressOperatorComponent");
comp = new AddressOperatorComponent(address(result.world));
console.log(address(comp));

console.log("Deploying AddressOwnerComponent");
comp = new AddressOwnerComponent(address(result.world));
console.log(address(comp));

console.log("Deploying AffinityComponent");
comp = new AffinityComponent(address(result.world));
console.log(address(comp));

console.log("Deploying BalanceComponent");
comp = new BalanceComponent(address(result.world));
console.log(address(comp));

console.log("Deploying BalancesComponent");
comp = new BalancesComponent(address(result.world));
console.log(address(comp));

console.log("Deploying BareValueComponent");
comp = new BareValueComponent(address(result.world));
console.log(address(comp));

console.log("Deploying BlacklistComponent");
comp = new BlacklistComponent(address(result.world));
console.log(address(comp));

console.log("Deploying BlockRevealComponent");
comp = new BlockRevealComponent(address(result.world));
console.log(address(comp));

console.log("Deploying CanNameComponent");
comp = new CanNameComponent(address(result.world));
console.log(address(comp));

console.log("Deploying CoinComponent");
comp = new CoinComponent(address(result.world));
console.log(address(comp));

console.log("Deploying CostComponent");
comp = new CostComponent(address(result.world));
console.log(address(comp));

console.log("Deploying DescriptionComponent");
comp = new DescriptionComponent(address(result.world));
console.log(address(comp));

console.log("Deploying EpochComponent");
comp = new EpochComponent(address(result.world));
console.log(address(comp));

console.log("Deploying ExitsComponent");
comp = new ExitsComponent(address(result.world));
console.log(address(comp));

console.log("Deploying ExperienceComponent");
comp = new ExperienceComponent(address(result.world));
console.log(address(comp));

console.log("Deploying FavoriteFoodComponent");
comp = new FavoriteFoodComponent(address(result.world));
console.log(address(comp));

console.log("Deploying ForComponent");
comp = new ForComponent(address(result.world));
console.log(address(comp));

console.log("Deploying GachaOrderComponent");
comp = new GachaOrderComponent(address(result.world));
console.log(address(comp));

console.log("Deploying HarmonyComponent");
comp = new HarmonyComponent(address(result.world));
console.log(address(comp));

console.log("Deploying HealthComponent");
comp = new HealthComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IdAccountComponent");
comp = new IdAccountComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IdDelegateeComponent");
comp = new IdDelegateeComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IdDelegatorComponent");
comp = new IdDelegatorComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IdHolderComponent");
comp = new IdHolderComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IdNodeComponent");
comp = new IdNodeComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IdPetComponent");
comp = new IdPetComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IdSourceComponent");
comp = new IdSourceComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IdTargetComponent");
comp = new IdTargetComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexComponent");
comp = new IndexComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexAccountComponent");
comp = new IndexAccountComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexBackgroundComponent");
comp = new IndexBackgroundComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexBodyComponent");
comp = new IndexBodyComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexColorComponent");
comp = new IndexColorComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexFaceComponent");
comp = new IndexFaceComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexFarcasterComponent");
comp = new IndexFarcasterComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexHandComponent");
comp = new IndexHandComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexItemComponent");
comp = new IndexItemComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexNodeComponent");
comp = new IndexNodeComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexNPCComponent");
comp = new IndexNPCComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexObjectiveComponent");
comp = new IndexObjectiveComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexPetComponent");
comp = new IndexPetComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexRelationshipComponent");
comp = new IndexRelationshipComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexQuestComponent");
comp = new IndexQuestComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexSkillComponent");
comp = new IndexSkillComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexSourceComponent");
comp = new IndexSourceComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexTraitComponent");
comp = new IndexTraitComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsAccountComponent");
comp = new IsAccountComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsBonusComponent");
comp = new IsBonusComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsCompleteComponent");
comp = new IsCompleteComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsConditionComponent");
comp = new IsConditionComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsConsumableComponent");
comp = new IsConsumableComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsEffectComponent");
comp = new IsEffectComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsEquippedComponent");
comp = new IsEquippedComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsFriendshipComponent");
comp = new IsFriendshipComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsFungibleComponent");
comp = new IsFungibleComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsInventoryComponent");
comp = new IsInventoryComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsKillComponent");
comp = new IsKillComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsListingComponent");
comp = new IsListingComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsLogComponent");
comp = new IsLogComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsLootboxComponent");
comp = new IsLootboxComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsNodeComponent");
comp = new IsNodeComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsNPCComponent");
comp = new IsNPCComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsPetComponent");
comp = new IsPetComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsProductionComponent");
comp = new IsProductionComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsRegistryComponent");
comp = new IsRegistryComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsRelationshipComponent");
comp = new IsRelationshipComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsRepeatableComponent");
comp = new IsRepeatableComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsRequirementComponent");
comp = new IsRequirementComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsRewardComponent");
comp = new IsRewardComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsRoomComponent");
comp = new IsRoomComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsObjectiveComponent");
comp = new IsObjectiveComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsQuestComponent");
comp = new IsQuestComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsScoreComponent");
comp = new IsScoreComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IsSkillComponent");
comp = new IsSkillComponent(address(result.world));
console.log(address(comp));

console.log("Deploying KeysComponent");
comp = new KeysComponent(address(result.world));
console.log(address(comp));

console.log("Deploying LevelComponent");
comp = new LevelComponent(address(result.world));
console.log(address(comp));

console.log("Deploying LocationComponent");
comp = new LocationComponent(address(result.world));
console.log(address(comp));

console.log("Deploying IndexRoomComponent");
comp = new IndexRoomComponent(address(result.world));
console.log(address(comp));

console.log("Deploying LogicTypeComponent");
comp = new LogicTypeComponent(address(result.world));
console.log(address(comp));

console.log("Deploying MaxComponent");
comp = new MaxComponent(address(result.world));
console.log(address(comp));

console.log("Deploying MediaURIComponent");
comp = new MediaURIComponent(address(result.world));
console.log(address(comp));

console.log("Deploying NameComponent");
comp = new NameComponent(address(result.world));
console.log(address(comp));

console.log("Deploying PowerComponent");
comp = new PowerComponent(address(result.world));
console.log(address(comp));

console.log("Deploying PriceBuyComponent");
comp = new PriceBuyComponent(address(result.world));
console.log(address(comp));

console.log("Deploying PriceSellComponent");
comp = new PriceSellComponent(address(result.world));
console.log(address(comp));

console.log("Deploying ProxyPermissionsFarm20Component");
comp = new ProxyPermissionsFarm20Component(address(result.world));
console.log(address(comp));

console.log("Deploying ProxyPermissionsERC721Component");
comp = new ProxyPermissionsERC721Component(address(result.world));
console.log(address(comp));

console.log("Deploying ProxyPermissionsMint20Component");
comp = new ProxyPermissionsMint20Component(address(result.world));
console.log(address(comp));

console.log("Deploying QuestPointComponent");
comp = new QuestPointComponent(address(result.world));
console.log(address(comp));

console.log("Deploying RarityComponent");
comp = new RarityComponent(address(result.world));
console.log(address(comp));

console.log("Deploying RateComponent");
comp = new RateComponent(address(result.world));
console.log(address(comp));

console.log("Deploying RerollComponent");
comp = new RerollComponent(address(result.world));
console.log(address(comp));

console.log("Deploying SkillPointComponent");
comp = new SkillPointComponent(address(result.world));
console.log(address(comp));

console.log("Deploying SlotsComponent");
comp = new SlotsComponent(address(result.world));
console.log(address(comp));

console.log("Deploying StaminaComponent");
comp = new StaminaComponent(address(result.world));
console.log(address(comp));

console.log("Deploying StateComponent");
comp = new StateComponent(address(result.world));
console.log(address(comp));

console.log("Deploying SubtypeComponent");
comp = new SubtypeComponent(address(result.world));
console.log(address(comp));

console.log("Deploying TimeComponent");
comp = new TimeComponent(address(result.world));
console.log(address(comp));

console.log("Deploying TimelockComponent");
comp = new TimelockComponent(address(result.world));
console.log(address(comp));

console.log("Deploying TimeLastActionComponent");
comp = new TimeLastActionComponent(address(result.world));
console.log(address(comp));

console.log("Deploying TimeLastComponent");
comp = new TimeLastComponent(address(result.world));
console.log(address(comp));

console.log("Deploying TimeStartComponent");
comp = new TimeStartComponent(address(result.world));
console.log(address(comp));

console.log("Deploying TypeComponent");
comp = new TypeComponent(address(result.world));
console.log(address(comp));

console.log("Deploying ValueComponent");
comp = new ValueComponent(address(result.world));
console.log(address(comp));

console.log("Deploying ViolenceComponent");
comp = new ViolenceComponent(address(result.world));
console.log(address(comp));

console.log("Deploying WeightsComponent");
comp = new WeightsComponent(address(result.world));
console.log(address(comp));

console.log("Deploying WhitelistComponent");
comp = new WhitelistComponent(address(result.world));
console.log(address(comp));

}

deploySystems(address(result.world), true);
}


function authorizeWriter(
IUint256Component components,
uint256 componentId,
address writer
) internal {
Component(getAddressById(components, componentId)).authorizeWriter(writer);
}

function deploySystems(address _world, bool init) internal {
World world = World(_world);
// Deploy systems
ISystem system;
IUint256Component components = world.components();

console.log("Deploying _devGiveTokensSystem");
system = new _devGiveTokensSystem(world, address(components));
world.registerSystem(address(system), _devGiveTokensSystemID);
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
console.log(address(system));

console.log("Deploying _ConfigSetSystem");
system = new _ConfigSetSystem(world, address(components));
world.registerSystem(address(system), _ConfigSetSystemID);
authorizeWriter(components, BareValueComponentID, address(system));
console.log(address(system));

console.log("Deploying _ListingSetSystem");
system = new _ListingSetSystem(world, address(components));
world.registerSystem(address(system), _ListingSetSystemID);
authorizeWriter(components, IsListingComponentID, address(system));
authorizeWriter(components, IndexItemComponentID, address(system));
authorizeWriter(components, IndexNPCComponentID, address(system));
authorizeWriter(components, PriceBuyComponentID, address(system));
authorizeWriter(components, PriceSellComponentID, address(system));
console.log(address(system));

console.log("Deploying _NodeCreateSystem");
system = new _NodeCreateSystem(world, address(components));
world.registerSystem(address(system), _NodeCreateSystemID);
authorizeWriter(components, IsNodeComponentID, address(system));
authorizeWriter(components, AffinityComponentID, address(system));
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, IndexNodeComponentID, address(system));
authorizeWriter(components, IndexRoomComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
console.log(address(system));

console.log("Deploying _NodeDeleteSystem");
system = new _NodeDeleteSystem(world, address(components));
world.registerSystem(address(system), _NodeDeleteSystemID);
authorizeWriter(components, IsNodeComponentID, address(system));
authorizeWriter(components, AffinityComponentID, address(system));
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, IndexNodeComponentID, address(system));
authorizeWriter(components, IndexRoomComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
console.log(address(system));

console.log("Deploying _NPCCreateSystem");
system = new _NPCCreateSystem(world, address(components));
world.registerSystem(address(system), _NPCCreateSystemID);
authorizeWriter(components, IsNPCComponentID, address(system));
authorizeWriter(components, IndexNPCComponentID, address(system));
authorizeWriter(components, IndexRoomComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
console.log(address(system));

console.log("Deploying _NPCSetRoomSystem");
system = new _NPCSetRoomSystem(world, address(components));
world.registerSystem(address(system), _NPCSetRoomSystemID);
authorizeWriter(components, IndexRoomComponentID, address(system));
console.log(address(system));

console.log("Deploying _NPCSetNameSystem");
system = new _NPCSetNameSystem(world, address(components));
world.registerSystem(address(system), _NPCSetNameSystemID);
authorizeWriter(components, NameComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryCreateItemConsumableSystem");
system = new _RegistryCreateItemConsumableSystem(world, address(components));
world.registerSystem(address(system), _RegistryCreateItemConsumableSystemID);
authorizeWriter(components, IsConsumableComponentID, address(system));
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsFungibleComponentID, address(system));
authorizeWriter(components, IndexItemComponentID, address(system));
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, MediaURIComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryCreateFoodSystem");
system = new _RegistryCreateFoodSystem(world, address(components));
world.registerSystem(address(system), _RegistryCreateFoodSystemID);
authorizeWriter(components, IndexItemComponentID, address(system));
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsConsumableComponentID, address(system));
authorizeWriter(components, IsFungibleComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, ExperienceComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, MediaURIComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryCreateLootboxSystem");
system = new _RegistryCreateLootboxSystem(world, address(components));
world.registerSystem(address(system), _RegistryCreateLootboxSystemID);
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsConsumableComponentID, address(system));
authorizeWriter(components, IsFungibleComponentID, address(system));
authorizeWriter(components, IsLootboxComponentID, address(system));
authorizeWriter(components, IndexItemComponentID, address(system));
authorizeWriter(components, KeysComponentID, address(system));
authorizeWriter(components, WeightsComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, MediaURIComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryCreateQuestSystem");
system = new _RegistryCreateQuestSystem(world, address(components));
world.registerSystem(address(system), _RegistryCreateQuestSystemID);
authorizeWriter(components, AddressOperatorComponentID, address(system));
authorizeWriter(components, AddressOwnerComponentID, address(system));
authorizeWriter(components, AffinityComponentID, address(system));
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BalancesComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, BlacklistComponentID, address(system));
authorizeWriter(components, BlockRevealComponentID, address(system));
authorizeWriter(components, CanNameComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, CostComponentID, address(system));
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, EpochComponentID, address(system));
authorizeWriter(components, ExitsComponentID, address(system));
authorizeWriter(components, ExperienceComponentID, address(system));
authorizeWriter(components, FavoriteFoodComponentID, address(system));
authorizeWriter(components, ForComponentID, address(system));
authorizeWriter(components, GachaOrderComponentID, address(system));
authorizeWriter(components, HarmonyComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdDelegateeComponentID, address(system));
authorizeWriter(components, IdDelegatorComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IdNodeComponentID, address(system));
authorizeWriter(components, IdPetComponentID, address(system));
authorizeWriter(components, IdSourceComponentID, address(system));
authorizeWriter(components, IdTargetComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, IndexAccountComponentID, address(system));
authorizeWriter(components, IndexBackgroundComponentID, address(system));
authorizeWriter(components, IndexBodyComponentID, address(system));
authorizeWriter(components, IndexColorComponentID, address(system));
authorizeWriter(components, IndexFaceComponentID, address(system));
authorizeWriter(components, IndexFarcasterComponentID, address(system));
authorizeWriter(components, IndexHandComponentID, address(system));
authorizeWriter(components, IndexItemComponentID, address(system));
authorizeWriter(components, IndexNodeComponentID, address(system));
authorizeWriter(components, IndexNPCComponentID, address(system));
authorizeWriter(components, IndexObjectiveComponentID, address(system));
authorizeWriter(components, IndexPetComponentID, address(system));
authorizeWriter(components, IndexRelationshipComponentID, address(system));
authorizeWriter(components, IndexQuestComponentID, address(system));
authorizeWriter(components, IndexSkillComponentID, address(system));
authorizeWriter(components, IndexSourceComponentID, address(system));
authorizeWriter(components, IndexTraitComponentID, address(system));
authorizeWriter(components, IsAccountComponentID, address(system));
authorizeWriter(components, IsBonusComponentID, address(system));
authorizeWriter(components, IsCompleteComponentID, address(system));
authorizeWriter(components, IsConditionComponentID, address(system));
authorizeWriter(components, IsConsumableComponentID, address(system));
authorizeWriter(components, IsEffectComponentID, address(system));
authorizeWriter(components, IsEquippedComponentID, address(system));
authorizeWriter(components, IsFriendshipComponentID, address(system));
authorizeWriter(components, IsFungibleComponentID, address(system));
authorizeWriter(components, IsInventoryComponentID, address(system));
authorizeWriter(components, IsKillComponentID, address(system));
authorizeWriter(components, IsListingComponentID, address(system));
authorizeWriter(components, IsLogComponentID, address(system));
authorizeWriter(components, IsLootboxComponentID, address(system));
authorizeWriter(components, IsNodeComponentID, address(system));
authorizeWriter(components, IsNPCComponentID, address(system));
authorizeWriter(components, IsPetComponentID, address(system));
authorizeWriter(components, IsProductionComponentID, address(system));
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsRelationshipComponentID, address(system));
authorizeWriter(components, IsRepeatableComponentID, address(system));
authorizeWriter(components, IsRequirementComponentID, address(system));
authorizeWriter(components, IsRewardComponentID, address(system));
authorizeWriter(components, IsRoomComponentID, address(system));
authorizeWriter(components, IsObjectiveComponentID, address(system));
authorizeWriter(components, IsQuestComponentID, address(system));
authorizeWriter(components, IsScoreComponentID, address(system));
authorizeWriter(components, IsSkillComponentID, address(system));
authorizeWriter(components, KeysComponentID, address(system));
authorizeWriter(components, LevelComponentID, address(system));
authorizeWriter(components, LocationComponentID, address(system));
authorizeWriter(components, IndexRoomComponentID, address(system));
authorizeWriter(components, LogicTypeComponentID, address(system));
authorizeWriter(components, MaxComponentID, address(system));
authorizeWriter(components, MediaURIComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, PowerComponentID, address(system));
authorizeWriter(components, PriceBuyComponentID, address(system));
authorizeWriter(components, PriceSellComponentID, address(system));
authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
authorizeWriter(components, QuestPointComponentID, address(system));
authorizeWriter(components, RarityComponentID, address(system));
authorizeWriter(components, RateComponentID, address(system));
authorizeWriter(components, RerollComponentID, address(system));
authorizeWriter(components, SkillPointComponentID, address(system));
authorizeWriter(components, SlotsComponentID, address(system));
authorizeWriter(components, StaminaComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, SubtypeComponentID, address(system));
authorizeWriter(components, TimeComponentID, address(system));
authorizeWriter(components, TimelockComponentID, address(system));
authorizeWriter(components, TimeLastActionComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
authorizeWriter(components, ViolenceComponentID, address(system));
authorizeWriter(components, WeightsComponentID, address(system));
authorizeWriter(components, WhitelistComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryCreateQuestObjectiveSystem");
system = new _RegistryCreateQuestObjectiveSystem(world, address(components));
world.registerSystem(address(system), _RegistryCreateQuestObjectiveSystemID);
authorizeWriter(components, AddressOperatorComponentID, address(system));
authorizeWriter(components, AddressOwnerComponentID, address(system));
authorizeWriter(components, AffinityComponentID, address(system));
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BalancesComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, BlacklistComponentID, address(system));
authorizeWriter(components, BlockRevealComponentID, address(system));
authorizeWriter(components, CanNameComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, CostComponentID, address(system));
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, EpochComponentID, address(system));
authorizeWriter(components, ExitsComponentID, address(system));
authorizeWriter(components, ExperienceComponentID, address(system));
authorizeWriter(components, FavoriteFoodComponentID, address(system));
authorizeWriter(components, ForComponentID, address(system));
authorizeWriter(components, GachaOrderComponentID, address(system));
authorizeWriter(components, HarmonyComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdDelegateeComponentID, address(system));
authorizeWriter(components, IdDelegatorComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IdNodeComponentID, address(system));
authorizeWriter(components, IdPetComponentID, address(system));
authorizeWriter(components, IdSourceComponentID, address(system));
authorizeWriter(components, IdTargetComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, IndexAccountComponentID, address(system));
authorizeWriter(components, IndexBackgroundComponentID, address(system));
authorizeWriter(components, IndexBodyComponentID, address(system));
authorizeWriter(components, IndexColorComponentID, address(system));
authorizeWriter(components, IndexFaceComponentID, address(system));
authorizeWriter(components, IndexFarcasterComponentID, address(system));
authorizeWriter(components, IndexHandComponentID, address(system));
authorizeWriter(components, IndexItemComponentID, address(system));
authorizeWriter(components, IndexNodeComponentID, address(system));
authorizeWriter(components, IndexNPCComponentID, address(system));
authorizeWriter(components, IndexObjectiveComponentID, address(system));
authorizeWriter(components, IndexPetComponentID, address(system));
authorizeWriter(components, IndexRelationshipComponentID, address(system));
authorizeWriter(components, IndexQuestComponentID, address(system));
authorizeWriter(components, IndexSkillComponentID, address(system));
authorizeWriter(components, IndexSourceComponentID, address(system));
authorizeWriter(components, IndexTraitComponentID, address(system));
authorizeWriter(components, IsAccountComponentID, address(system));
authorizeWriter(components, IsBonusComponentID, address(system));
authorizeWriter(components, IsCompleteComponentID, address(system));
authorizeWriter(components, IsConditionComponentID, address(system));
authorizeWriter(components, IsConsumableComponentID, address(system));
authorizeWriter(components, IsEffectComponentID, address(system));
authorizeWriter(components, IsEquippedComponentID, address(system));
authorizeWriter(components, IsFriendshipComponentID, address(system));
authorizeWriter(components, IsFungibleComponentID, address(system));
authorizeWriter(components, IsInventoryComponentID, address(system));
authorizeWriter(components, IsKillComponentID, address(system));
authorizeWriter(components, IsListingComponentID, address(system));
authorizeWriter(components, IsLogComponentID, address(system));
authorizeWriter(components, IsLootboxComponentID, address(system));
authorizeWriter(components, IsNodeComponentID, address(system));
authorizeWriter(components, IsNPCComponentID, address(system));
authorizeWriter(components, IsPetComponentID, address(system));
authorizeWriter(components, IsProductionComponentID, address(system));
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsRelationshipComponentID, address(system));
authorizeWriter(components, IsRepeatableComponentID, address(system));
authorizeWriter(components, IsRequirementComponentID, address(system));
authorizeWriter(components, IsRewardComponentID, address(system));
authorizeWriter(components, IsRoomComponentID, address(system));
authorizeWriter(components, IsObjectiveComponentID, address(system));
authorizeWriter(components, IsQuestComponentID, address(system));
authorizeWriter(components, IsScoreComponentID, address(system));
authorizeWriter(components, IsSkillComponentID, address(system));
authorizeWriter(components, KeysComponentID, address(system));
authorizeWriter(components, LevelComponentID, address(system));
authorizeWriter(components, LocationComponentID, address(system));
authorizeWriter(components, IndexRoomComponentID, address(system));
authorizeWriter(components, LogicTypeComponentID, address(system));
authorizeWriter(components, MaxComponentID, address(system));
authorizeWriter(components, MediaURIComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, PowerComponentID, address(system));
authorizeWriter(components, PriceBuyComponentID, address(system));
authorizeWriter(components, PriceSellComponentID, address(system));
authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
authorizeWriter(components, QuestPointComponentID, address(system));
authorizeWriter(components, RarityComponentID, address(system));
authorizeWriter(components, RateComponentID, address(system));
authorizeWriter(components, RerollComponentID, address(system));
authorizeWriter(components, SkillPointComponentID, address(system));
authorizeWriter(components, SlotsComponentID, address(system));
authorizeWriter(components, StaminaComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, SubtypeComponentID, address(system));
authorizeWriter(components, TimeComponentID, address(system));
authorizeWriter(components, TimelockComponentID, address(system));
authorizeWriter(components, TimeLastActionComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
authorizeWriter(components, ViolenceComponentID, address(system));
authorizeWriter(components, WeightsComponentID, address(system));
authorizeWriter(components, WhitelistComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryCreateQuestRequirementSystem");
system = new _RegistryCreateQuestRequirementSystem(world, address(components));
world.registerSystem(address(system), _RegistryCreateQuestRequirementSystemID);
authorizeWriter(components, AddressOperatorComponentID, address(system));
authorizeWriter(components, AddressOwnerComponentID, address(system));
authorizeWriter(components, AffinityComponentID, address(system));
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BalancesComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, BlacklistComponentID, address(system));
authorizeWriter(components, BlockRevealComponentID, address(system));
authorizeWriter(components, CanNameComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, CostComponentID, address(system));
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, EpochComponentID, address(system));
authorizeWriter(components, ExitsComponentID, address(system));
authorizeWriter(components, ExperienceComponentID, address(system));
authorizeWriter(components, FavoriteFoodComponentID, address(system));
authorizeWriter(components, ForComponentID, address(system));
authorizeWriter(components, GachaOrderComponentID, address(system));
authorizeWriter(components, HarmonyComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdDelegateeComponentID, address(system));
authorizeWriter(components, IdDelegatorComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IdNodeComponentID, address(system));
authorizeWriter(components, IdPetComponentID, address(system));
authorizeWriter(components, IdSourceComponentID, address(system));
authorizeWriter(components, IdTargetComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, IndexAccountComponentID, address(system));
authorizeWriter(components, IndexBackgroundComponentID, address(system));
authorizeWriter(components, IndexBodyComponentID, address(system));
authorizeWriter(components, IndexColorComponentID, address(system));
authorizeWriter(components, IndexFaceComponentID, address(system));
authorizeWriter(components, IndexFarcasterComponentID, address(system));
authorizeWriter(components, IndexHandComponentID, address(system));
authorizeWriter(components, IndexItemComponentID, address(system));
authorizeWriter(components, IndexNodeComponentID, address(system));
authorizeWriter(components, IndexNPCComponentID, address(system));
authorizeWriter(components, IndexObjectiveComponentID, address(system));
authorizeWriter(components, IndexPetComponentID, address(system));
authorizeWriter(components, IndexRelationshipComponentID, address(system));
authorizeWriter(components, IndexQuestComponentID, address(system));
authorizeWriter(components, IndexSkillComponentID, address(system));
authorizeWriter(components, IndexSourceComponentID, address(system));
authorizeWriter(components, IndexTraitComponentID, address(system));
authorizeWriter(components, IsAccountComponentID, address(system));
authorizeWriter(components, IsBonusComponentID, address(system));
authorizeWriter(components, IsCompleteComponentID, address(system));
authorizeWriter(components, IsConditionComponentID, address(system));
authorizeWriter(components, IsConsumableComponentID, address(system));
authorizeWriter(components, IsEffectComponentID, address(system));
authorizeWriter(components, IsEquippedComponentID, address(system));
authorizeWriter(components, IsFriendshipComponentID, address(system));
authorizeWriter(components, IsFungibleComponentID, address(system));
authorizeWriter(components, IsInventoryComponentID, address(system));
authorizeWriter(components, IsKillComponentID, address(system));
authorizeWriter(components, IsListingComponentID, address(system));
authorizeWriter(components, IsLogComponentID, address(system));
authorizeWriter(components, IsLootboxComponentID, address(system));
authorizeWriter(components, IsNodeComponentID, address(system));
authorizeWriter(components, IsNPCComponentID, address(system));
authorizeWriter(components, IsPetComponentID, address(system));
authorizeWriter(components, IsProductionComponentID, address(system));
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsRelationshipComponentID, address(system));
authorizeWriter(components, IsRepeatableComponentID, address(system));
authorizeWriter(components, IsRequirementComponentID, address(system));
authorizeWriter(components, IsRewardComponentID, address(system));
authorizeWriter(components, IsRoomComponentID, address(system));
authorizeWriter(components, IsObjectiveComponentID, address(system));
authorizeWriter(components, IsQuestComponentID, address(system));
authorizeWriter(components, IsScoreComponentID, address(system));
authorizeWriter(components, IsSkillComponentID, address(system));
authorizeWriter(components, KeysComponentID, address(system));
authorizeWriter(components, LevelComponentID, address(system));
authorizeWriter(components, LocationComponentID, address(system));
authorizeWriter(components, IndexRoomComponentID, address(system));
authorizeWriter(components, LogicTypeComponentID, address(system));
authorizeWriter(components, MaxComponentID, address(system));
authorizeWriter(components, MediaURIComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, PowerComponentID, address(system));
authorizeWriter(components, PriceBuyComponentID, address(system));
authorizeWriter(components, PriceSellComponentID, address(system));
authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
authorizeWriter(components, QuestPointComponentID, address(system));
authorizeWriter(components, RarityComponentID, address(system));
authorizeWriter(components, RateComponentID, address(system));
authorizeWriter(components, RerollComponentID, address(system));
authorizeWriter(components, SkillPointComponentID, address(system));
authorizeWriter(components, SlotsComponentID, address(system));
authorizeWriter(components, StaminaComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, SubtypeComponentID, address(system));
authorizeWriter(components, TimeComponentID, address(system));
authorizeWriter(components, TimelockComponentID, address(system));
authorizeWriter(components, TimeLastActionComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
authorizeWriter(components, ViolenceComponentID, address(system));
authorizeWriter(components, WeightsComponentID, address(system));
authorizeWriter(components, WhitelistComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryCreateQuestRewardSystem");
system = new _RegistryCreateQuestRewardSystem(world, address(components));
world.registerSystem(address(system), _RegistryCreateQuestRewardSystemID);
authorizeWriter(components, AddressOperatorComponentID, address(system));
authorizeWriter(components, AddressOwnerComponentID, address(system));
authorizeWriter(components, AffinityComponentID, address(system));
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BalancesComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, BlacklistComponentID, address(system));
authorizeWriter(components, BlockRevealComponentID, address(system));
authorizeWriter(components, CanNameComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, CostComponentID, address(system));
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, EpochComponentID, address(system));
authorizeWriter(components, ExitsComponentID, address(system));
authorizeWriter(components, ExperienceComponentID, address(system));
authorizeWriter(components, FavoriteFoodComponentID, address(system));
authorizeWriter(components, ForComponentID, address(system));
authorizeWriter(components, GachaOrderComponentID, address(system));
authorizeWriter(components, HarmonyComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdDelegateeComponentID, address(system));
authorizeWriter(components, IdDelegatorComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IdNodeComponentID, address(system));
authorizeWriter(components, IdPetComponentID, address(system));
authorizeWriter(components, IdSourceComponentID, address(system));
authorizeWriter(components, IdTargetComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, IndexAccountComponentID, address(system));
authorizeWriter(components, IndexBackgroundComponentID, address(system));
authorizeWriter(components, IndexBodyComponentID, address(system));
authorizeWriter(components, IndexColorComponentID, address(system));
authorizeWriter(components, IndexFaceComponentID, address(system));
authorizeWriter(components, IndexFarcasterComponentID, address(system));
authorizeWriter(components, IndexHandComponentID, address(system));
authorizeWriter(components, IndexItemComponentID, address(system));
authorizeWriter(components, IndexNodeComponentID, address(system));
authorizeWriter(components, IndexNPCComponentID, address(system));
authorizeWriter(components, IndexObjectiveComponentID, address(system));
authorizeWriter(components, IndexPetComponentID, address(system));
authorizeWriter(components, IndexRelationshipComponentID, address(system));
authorizeWriter(components, IndexQuestComponentID, address(system));
authorizeWriter(components, IndexSkillComponentID, address(system));
authorizeWriter(components, IndexSourceComponentID, address(system));
authorizeWriter(components, IndexTraitComponentID, address(system));
authorizeWriter(components, IsAccountComponentID, address(system));
authorizeWriter(components, IsBonusComponentID, address(system));
authorizeWriter(components, IsCompleteComponentID, address(system));
authorizeWriter(components, IsConditionComponentID, address(system));
authorizeWriter(components, IsConsumableComponentID, address(system));
authorizeWriter(components, IsEffectComponentID, address(system));
authorizeWriter(components, IsEquippedComponentID, address(system));
authorizeWriter(components, IsFriendshipComponentID, address(system));
authorizeWriter(components, IsFungibleComponentID, address(system));
authorizeWriter(components, IsInventoryComponentID, address(system));
authorizeWriter(components, IsKillComponentID, address(system));
authorizeWriter(components, IsListingComponentID, address(system));
authorizeWriter(components, IsLogComponentID, address(system));
authorizeWriter(components, IsLootboxComponentID, address(system));
authorizeWriter(components, IsNodeComponentID, address(system));
authorizeWriter(components, IsNPCComponentID, address(system));
authorizeWriter(components, IsPetComponentID, address(system));
authorizeWriter(components, IsProductionComponentID, address(system));
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsRelationshipComponentID, address(system));
authorizeWriter(components, IsRepeatableComponentID, address(system));
authorizeWriter(components, IsRequirementComponentID, address(system));
authorizeWriter(components, IsRewardComponentID, address(system));
authorizeWriter(components, IsRoomComponentID, address(system));
authorizeWriter(components, IsObjectiveComponentID, address(system));
authorizeWriter(components, IsQuestComponentID, address(system));
authorizeWriter(components, IsScoreComponentID, address(system));
authorizeWriter(components, IsSkillComponentID, address(system));
authorizeWriter(components, KeysComponentID, address(system));
authorizeWriter(components, LevelComponentID, address(system));
authorizeWriter(components, LocationComponentID, address(system));
authorizeWriter(components, IndexRoomComponentID, address(system));
authorizeWriter(components, LogicTypeComponentID, address(system));
authorizeWriter(components, MaxComponentID, address(system));
authorizeWriter(components, MediaURIComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, PowerComponentID, address(system));
authorizeWriter(components, PriceBuyComponentID, address(system));
authorizeWriter(components, PriceSellComponentID, address(system));
authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
authorizeWriter(components, QuestPointComponentID, address(system));
authorizeWriter(components, RarityComponentID, address(system));
authorizeWriter(components, RateComponentID, address(system));
authorizeWriter(components, RerollComponentID, address(system));
authorizeWriter(components, SkillPointComponentID, address(system));
authorizeWriter(components, SlotsComponentID, address(system));
authorizeWriter(components, StaminaComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, SubtypeComponentID, address(system));
authorizeWriter(components, TimeComponentID, address(system));
authorizeWriter(components, TimelockComponentID, address(system));
authorizeWriter(components, TimeLastActionComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
authorizeWriter(components, ViolenceComponentID, address(system));
authorizeWriter(components, WeightsComponentID, address(system));
authorizeWriter(components, WhitelistComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryCreateRelationshipSystem");
system = new _RegistryCreateRelationshipSystem(world, address(components));
world.registerSystem(address(system), _RegistryCreateRelationshipSystemID);
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsRelationshipComponentID, address(system));
authorizeWriter(components, IndexNPCComponentID, address(system));
authorizeWriter(components, IndexRelationshipComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, BlacklistComponentID, address(system));
authorizeWriter(components, WhitelistComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryCreateReviveSystem");
system = new _RegistryCreateReviveSystem(world, address(components));
world.registerSystem(address(system), _RegistryCreateReviveSystemID);
authorizeWriter(components, IndexItemComponentID, address(system));
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsConsumableComponentID, address(system));
authorizeWriter(components, IsFungibleComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, MediaURIComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryCreateSkillSystem");
system = new _RegistryCreateSkillSystem(world, address(components));
world.registerSystem(address(system), _RegistryCreateSkillSystemID);
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsSkillComponentID, address(system));
authorizeWriter(components, IndexSkillComponentID, address(system));
authorizeWriter(components, CostComponentID, address(system));
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, ForComponentID, address(system));
authorizeWriter(components, MaxComponentID, address(system));
authorizeWriter(components, MediaURIComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryCreateSkillEffectSystem");
system = new _RegistryCreateSkillEffectSystem(world, address(components));
world.registerSystem(address(system), _RegistryCreateSkillEffectSystemID);
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsEffectComponentID, address(system));
authorizeWriter(components, IndexSkillComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, LogicTypeComponentID, address(system));
authorizeWriter(components, SubtypeComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryCreateSkillRequirementSystem");
system = new _RegistryCreateSkillRequirementSystem(world, address(components));
world.registerSystem(address(system), _RegistryCreateSkillRequirementSystemID);
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsRequirementComponentID, address(system));
authorizeWriter(components, IndexSkillComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryCreateTraitSystem");
system = new _RegistryCreateTraitSystem(world, address(components));
world.registerSystem(address(system), _RegistryCreateTraitSystemID);
authorizeWriter(components, AddressOperatorComponentID, address(system));
authorizeWriter(components, AddressOwnerComponentID, address(system));
authorizeWriter(components, AffinityComponentID, address(system));
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BalancesComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, BlacklistComponentID, address(system));
authorizeWriter(components, BlockRevealComponentID, address(system));
authorizeWriter(components, CanNameComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, CostComponentID, address(system));
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, EpochComponentID, address(system));
authorizeWriter(components, ExitsComponentID, address(system));
authorizeWriter(components, ExperienceComponentID, address(system));
authorizeWriter(components, FavoriteFoodComponentID, address(system));
authorizeWriter(components, ForComponentID, address(system));
authorizeWriter(components, GachaOrderComponentID, address(system));
authorizeWriter(components, HarmonyComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdDelegateeComponentID, address(system));
authorizeWriter(components, IdDelegatorComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IdNodeComponentID, address(system));
authorizeWriter(components, IdPetComponentID, address(system));
authorizeWriter(components, IdSourceComponentID, address(system));
authorizeWriter(components, IdTargetComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, IndexAccountComponentID, address(system));
authorizeWriter(components, IndexBackgroundComponentID, address(system));
authorizeWriter(components, IndexBodyComponentID, address(system));
authorizeWriter(components, IndexColorComponentID, address(system));
authorizeWriter(components, IndexFaceComponentID, address(system));
authorizeWriter(components, IndexFarcasterComponentID, address(system));
authorizeWriter(components, IndexHandComponentID, address(system));
authorizeWriter(components, IndexItemComponentID, address(system));
authorizeWriter(components, IndexNodeComponentID, address(system));
authorizeWriter(components, IndexNPCComponentID, address(system));
authorizeWriter(components, IndexObjectiveComponentID, address(system));
authorizeWriter(components, IndexPetComponentID, address(system));
authorizeWriter(components, IndexRelationshipComponentID, address(system));
authorizeWriter(components, IndexQuestComponentID, address(system));
authorizeWriter(components, IndexSkillComponentID, address(system));
authorizeWriter(components, IndexSourceComponentID, address(system));
authorizeWriter(components, IndexTraitComponentID, address(system));
authorizeWriter(components, IsAccountComponentID, address(system));
authorizeWriter(components, IsBonusComponentID, address(system));
authorizeWriter(components, IsCompleteComponentID, address(system));
authorizeWriter(components, IsConditionComponentID, address(system));
authorizeWriter(components, IsConsumableComponentID, address(system));
authorizeWriter(components, IsEffectComponentID, address(system));
authorizeWriter(components, IsEquippedComponentID, address(system));
authorizeWriter(components, IsFriendshipComponentID, address(system));
authorizeWriter(components, IsFungibleComponentID, address(system));
authorizeWriter(components, IsInventoryComponentID, address(system));
authorizeWriter(components, IsKillComponentID, address(system));
authorizeWriter(components, IsListingComponentID, address(system));
authorizeWriter(components, IsLogComponentID, address(system));
authorizeWriter(components, IsLootboxComponentID, address(system));
authorizeWriter(components, IsNodeComponentID, address(system));
authorizeWriter(components, IsNPCComponentID, address(system));
authorizeWriter(components, IsPetComponentID, address(system));
authorizeWriter(components, IsProductionComponentID, address(system));
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsRelationshipComponentID, address(system));
authorizeWriter(components, IsRepeatableComponentID, address(system));
authorizeWriter(components, IsRequirementComponentID, address(system));
authorizeWriter(components, IsRewardComponentID, address(system));
authorizeWriter(components, IsRoomComponentID, address(system));
authorizeWriter(components, IsObjectiveComponentID, address(system));
authorizeWriter(components, IsQuestComponentID, address(system));
authorizeWriter(components, IsScoreComponentID, address(system));
authorizeWriter(components, IsSkillComponentID, address(system));
authorizeWriter(components, KeysComponentID, address(system));
authorizeWriter(components, LevelComponentID, address(system));
authorizeWriter(components, LocationComponentID, address(system));
authorizeWriter(components, IndexRoomComponentID, address(system));
authorizeWriter(components, LogicTypeComponentID, address(system));
authorizeWriter(components, MaxComponentID, address(system));
authorizeWriter(components, MediaURIComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, PowerComponentID, address(system));
authorizeWriter(components, PriceBuyComponentID, address(system));
authorizeWriter(components, PriceSellComponentID, address(system));
authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
authorizeWriter(components, QuestPointComponentID, address(system));
authorizeWriter(components, RarityComponentID, address(system));
authorizeWriter(components, RateComponentID, address(system));
authorizeWriter(components, RerollComponentID, address(system));
authorizeWriter(components, SkillPointComponentID, address(system));
authorizeWriter(components, SlotsComponentID, address(system));
authorizeWriter(components, StaminaComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, SubtypeComponentID, address(system));
authorizeWriter(components, TimeComponentID, address(system));
authorizeWriter(components, TimelockComponentID, address(system));
authorizeWriter(components, TimeLastActionComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
authorizeWriter(components, ViolenceComponentID, address(system));
authorizeWriter(components, WeightsComponentID, address(system));
authorizeWriter(components, WhitelistComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryDeleteTraitSystem");
system = new _RegistryDeleteTraitSystem(world, address(components));
world.registerSystem(address(system), _RegistryDeleteTraitSystemID);
authorizeWriter(components, IndexBodyComponentID, address(system));
authorizeWriter(components, IndexBackgroundComponentID, address(system));
authorizeWriter(components, IndexColorComponentID, address(system));
authorizeWriter(components, IndexFaceComponentID, address(system));
authorizeWriter(components, IndexHandComponentID, address(system));
authorizeWriter(components, IndexTraitComponentID, address(system));
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, RarityComponentID, address(system));
authorizeWriter(components, AffinityComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, HarmonyComponentID, address(system));
authorizeWriter(components, PowerComponentID, address(system));
authorizeWriter(components, SlotsComponentID, address(system));
authorizeWriter(components, ViolenceComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryDeleteItemSystem");
system = new _RegistryDeleteItemSystem(world, address(components));
world.registerSystem(address(system), _RegistryDeleteItemSystemID);
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, ExperienceComponentID, address(system));
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsFungibleComponentID, address(system));
authorizeWriter(components, IndexItemComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, IsLootboxComponentID, address(system));
authorizeWriter(components, IsConsumableComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, PowerComponentID, address(system));
authorizeWriter(components, ViolenceComponentID, address(system));
authorizeWriter(components, HarmonyComponentID, address(system));
authorizeWriter(components, MediaURIComponentID, address(system));
authorizeWriter(components, SlotsComponentID, address(system));
authorizeWriter(components, KeysComponentID, address(system));
authorizeWriter(components, WeightsComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryDeleteQuestSystem");
system = new _RegistryDeleteQuestSystem(world, address(components));
world.registerSystem(address(system), _RegistryDeleteQuestSystemID);
authorizeWriter(components, AddressOperatorComponentID, address(system));
authorizeWriter(components, AddressOwnerComponentID, address(system));
authorizeWriter(components, AffinityComponentID, address(system));
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BalancesComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, BlacklistComponentID, address(system));
authorizeWriter(components, BlockRevealComponentID, address(system));
authorizeWriter(components, CanNameComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, CostComponentID, address(system));
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, EpochComponentID, address(system));
authorizeWriter(components, ExitsComponentID, address(system));
authorizeWriter(components, ExperienceComponentID, address(system));
authorizeWriter(components, FavoriteFoodComponentID, address(system));
authorizeWriter(components, ForComponentID, address(system));
authorizeWriter(components, GachaOrderComponentID, address(system));
authorizeWriter(components, HarmonyComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdDelegateeComponentID, address(system));
authorizeWriter(components, IdDelegatorComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IdNodeComponentID, address(system));
authorizeWriter(components, IdPetComponentID, address(system));
authorizeWriter(components, IdSourceComponentID, address(system));
authorizeWriter(components, IdTargetComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, IndexAccountComponentID, address(system));
authorizeWriter(components, IndexBackgroundComponentID, address(system));
authorizeWriter(components, IndexBodyComponentID, address(system));
authorizeWriter(components, IndexColorComponentID, address(system));
authorizeWriter(components, IndexFaceComponentID, address(system));
authorizeWriter(components, IndexFarcasterComponentID, address(system));
authorizeWriter(components, IndexHandComponentID, address(system));
authorizeWriter(components, IndexItemComponentID, address(system));
authorizeWriter(components, IndexNodeComponentID, address(system));
authorizeWriter(components, IndexNPCComponentID, address(system));
authorizeWriter(components, IndexObjectiveComponentID, address(system));
authorizeWriter(components, IndexPetComponentID, address(system));
authorizeWriter(components, IndexRelationshipComponentID, address(system));
authorizeWriter(components, IndexQuestComponentID, address(system));
authorizeWriter(components, IndexSkillComponentID, address(system));
authorizeWriter(components, IndexSourceComponentID, address(system));
authorizeWriter(components, IndexTraitComponentID, address(system));
authorizeWriter(components, IsAccountComponentID, address(system));
authorizeWriter(components, IsBonusComponentID, address(system));
authorizeWriter(components, IsCompleteComponentID, address(system));
authorizeWriter(components, IsConditionComponentID, address(system));
authorizeWriter(components, IsConsumableComponentID, address(system));
authorizeWriter(components, IsEffectComponentID, address(system));
authorizeWriter(components, IsEquippedComponentID, address(system));
authorizeWriter(components, IsFriendshipComponentID, address(system));
authorizeWriter(components, IsFungibleComponentID, address(system));
authorizeWriter(components, IsInventoryComponentID, address(system));
authorizeWriter(components, IsKillComponentID, address(system));
authorizeWriter(components, IsListingComponentID, address(system));
authorizeWriter(components, IsLogComponentID, address(system));
authorizeWriter(components, IsLootboxComponentID, address(system));
authorizeWriter(components, IsNodeComponentID, address(system));
authorizeWriter(components, IsNPCComponentID, address(system));
authorizeWriter(components, IsPetComponentID, address(system));
authorizeWriter(components, IsProductionComponentID, address(system));
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsRelationshipComponentID, address(system));
authorizeWriter(components, IsRepeatableComponentID, address(system));
authorizeWriter(components, IsRequirementComponentID, address(system));
authorizeWriter(components, IsRewardComponentID, address(system));
authorizeWriter(components, IsRoomComponentID, address(system));
authorizeWriter(components, IsObjectiveComponentID, address(system));
authorizeWriter(components, IsQuestComponentID, address(system));
authorizeWriter(components, IsScoreComponentID, address(system));
authorizeWriter(components, IsSkillComponentID, address(system));
authorizeWriter(components, KeysComponentID, address(system));
authorizeWriter(components, LevelComponentID, address(system));
authorizeWriter(components, LocationComponentID, address(system));
authorizeWriter(components, IndexRoomComponentID, address(system));
authorizeWriter(components, LogicTypeComponentID, address(system));
authorizeWriter(components, MaxComponentID, address(system));
authorizeWriter(components, MediaURIComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, PowerComponentID, address(system));
authorizeWriter(components, PriceBuyComponentID, address(system));
authorizeWriter(components, PriceSellComponentID, address(system));
authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
authorizeWriter(components, QuestPointComponentID, address(system));
authorizeWriter(components, RarityComponentID, address(system));
authorizeWriter(components, RateComponentID, address(system));
authorizeWriter(components, RerollComponentID, address(system));
authorizeWriter(components, SkillPointComponentID, address(system));
authorizeWriter(components, SlotsComponentID, address(system));
authorizeWriter(components, StaminaComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, SubtypeComponentID, address(system));
authorizeWriter(components, TimeComponentID, address(system));
authorizeWriter(components, TimelockComponentID, address(system));
authorizeWriter(components, TimeLastActionComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
authorizeWriter(components, ViolenceComponentID, address(system));
authorizeWriter(components, WeightsComponentID, address(system));
authorizeWriter(components, WhitelistComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryDeleteSkillSystem");
system = new _RegistryDeleteSkillSystem(world, address(components));
world.registerSystem(address(system), _RegistryDeleteSkillSystemID);
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsSkillComponentID, address(system));
authorizeWriter(components, IsEffectComponentID, address(system));
authorizeWriter(components, IsRequirementComponentID, address(system));
authorizeWriter(components, IndexSkillComponentID, address(system));
authorizeWriter(components, CostComponentID, address(system));
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, ForComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, LogicTypeComponentID, address(system));
authorizeWriter(components, MaxComponentID, address(system));
authorizeWriter(components, MediaURIComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, SubtypeComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
console.log(address(system));

console.log("Deploying _RegistryUpdateRelationshipSystem");
system = new _RegistryUpdateRelationshipSystem(world, address(components));
world.registerSystem(address(system), _RegistryUpdateRelationshipSystemID);
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, BlacklistComponentID, address(system));
authorizeWriter(components, WhitelistComponentID, address(system));
console.log(address(system));

console.log("Deploying _RoomCreateGateSystem");
system = new _RoomCreateGateSystem(world, address(components));
world.registerSystem(address(system), _RoomCreateGateSystemID);
authorizeWriter(components, IsConditionComponentID, address(system));
authorizeWriter(components, IndexRoomComponentID, address(system));
authorizeWriter(components, IndexSourceComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, LogicTypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
console.log(address(system));

console.log("Deploying _RoomCreateSystem");
system = new _RoomCreateSystem(world, address(components));
world.registerSystem(address(system), _RoomCreateSystemID);
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, ExitsComponentID, address(system));
authorizeWriter(components, IsRoomComponentID, address(system));
authorizeWriter(components, IndexRoomComponentID, address(system));
authorizeWriter(components, LocationComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
console.log(address(system));

console.log("Deploying _RoomDeleteSystem");
system = new _RoomDeleteSystem(world, address(components));
world.registerSystem(address(system), _RoomDeleteSystemID);
authorizeWriter(components, IndexRoomComponentID, address(system));
authorizeWriter(components, IndexSourceComponentID, address(system));
authorizeWriter(components, IsRoomComponentID, address(system));
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, ExitsComponentID, address(system));
authorizeWriter(components, LocationComponentID, address(system));
authorizeWriter(components, LogicTypeComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
console.log(address(system));

console.log("Deploying AccountFundSystem");
system = new AccountFundSystem(world, address(components));
world.registerSystem(address(system), AccountFundSystemID);
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, EpochComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IsScoreComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
console.log(address(system));

console.log("Deploying AccountMoveSystem");
system = new AccountMoveSystem(world, address(components));
world.registerSystem(address(system), AccountMoveSystemID);
authorizeWriter(components, IndexRoomComponentID, address(system));
authorizeWriter(components, StaminaComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeLastActionComponentID, address(system));
console.log(address(system));

console.log("Deploying AccountRegisterSystem");
system = new AccountRegisterSystem(world, address(components));
world.registerSystem(address(system), AccountRegisterSystemID);
authorizeWriter(components, IsAccountComponentID, address(system));
authorizeWriter(components, IndexAccountComponentID, address(system));
authorizeWriter(components, AddressOperatorComponentID, address(system));
authorizeWriter(components, AddressOwnerComponentID, address(system));
authorizeWriter(components, FavoriteFoodComponentID, address(system));
authorizeWriter(components, IndexRoomComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, StaminaComponentID, address(system));
authorizeWriter(components, TimeLastActionComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
console.log(address(system));

console.log("Deploying AccountSetNameSystem");
system = new AccountSetNameSystem(world, address(components));
world.registerSystem(address(system), AccountSetNameSystemID);
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
console.log(address(system));

console.log("Deploying AccountSetOperatorSystem");
system = new AccountSetOperatorSystem(world, address(components));
world.registerSystem(address(system), AccountSetOperatorSystemID);
authorizeWriter(components, AddressOperatorComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
console.log(address(system));

console.log("Deploying AccountSetFarcasterDataSystem");
system = new AccountSetFarcasterDataSystem(world, address(components));
world.registerSystem(address(system), AccountSetFarcasterDataSystemID);
authorizeWriter(components, IndexFarcasterComponentID, address(system));
authorizeWriter(components, MediaURIComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
console.log(address(system));

console.log("Deploying AccountUpgradeSkillSystem");
system = new AccountUpgradeSkillSystem(world, address(components));
world.registerSystem(address(system), AccountUpgradeSkillSystemID);
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IndexSkillComponentID, address(system));
authorizeWriter(components, IsBonusComponentID, address(system));
authorizeWriter(components, IsSkillComponentID, address(system));
authorizeWriter(components, SkillPointComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
console.log(address(system));

console.log("Deploying Farm20ProxySystem");
system = new Farm20ProxySystem(world, address(components));
world.registerSystem(address(system), Farm20ProxySystemID);
console.log(address(system));

console.log("Deploying Farm20DepositSystem");
system = new Farm20DepositSystem(world, address(components));
world.registerSystem(address(system), Farm20DepositSystemID);
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
console.log(address(system));

console.log("Deploying Farm20WithdrawSystem");
system = new Farm20WithdrawSystem(world, address(components));
world.registerSystem(address(system), Farm20WithdrawSystemID);
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimelockComponentID, address(system));
console.log(address(system));

console.log("Deploying FriendAcceptSystem");
system = new FriendAcceptSystem(world, address(components));
world.registerSystem(address(system), FriendAcceptSystemID);
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdTargetComponentID, address(system));
authorizeWriter(components, IsFriendshipComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
console.log(address(system));

console.log("Deploying FriendBlockSystem");
system = new FriendBlockSystem(world, address(components));
world.registerSystem(address(system), FriendBlockSystemID);
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdTargetComponentID, address(system));
authorizeWriter(components, IsFriendshipComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
console.log(address(system));

console.log("Deploying FriendCancelSystem");
system = new FriendCancelSystem(world, address(components));
world.registerSystem(address(system), FriendCancelSystemID);
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdTargetComponentID, address(system));
authorizeWriter(components, IsFriendshipComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
console.log(address(system));

console.log("Deploying FriendRequestSystem");
system = new FriendRequestSystem(world, address(components));
world.registerSystem(address(system), FriendRequestSystemID);
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdTargetComponentID, address(system));
authorizeWriter(components, IsFriendshipComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
console.log(address(system));

console.log("Deploying ListingBuySystem");
system = new ListingBuySystem(world, address(components));
world.registerSystem(address(system), ListingBuySystemID);
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IndexItemComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, IsFungibleComponentID, address(system));
authorizeWriter(components, IsInventoryComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
console.log(address(system));

console.log("Deploying ListingSellSystem");
system = new ListingSellSystem(world, address(components));
world.registerSystem(address(system), ListingSellSystemID);
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
console.log(address(system));

console.log("Deploying LootboxExecuteRevealSystem");
system = new LootboxExecuteRevealSystem(world, address(components));
world.registerSystem(address(system), LootboxExecuteRevealSystemID);
authorizeWriter(components, BlockRevealComponentID, address(system));
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BalancesComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IndexItemComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, IsLootboxComponentID, address(system));
authorizeWriter(components, IsLogComponentID, address(system));
authorizeWriter(components, IsInventoryComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, TimeComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
console.log(address(system));

console.log("Deploying LootboxStartRevealSystem");
system = new LootboxStartRevealSystem(world, address(components));
world.registerSystem(address(system), LootboxStartRevealSystemID);
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BlockRevealComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IndexItemComponentID, address(system));
authorizeWriter(components, IsLootboxComponentID, address(system));
authorizeWriter(components, IsLogComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
console.log(address(system));

console.log("Deploying Mint20ProxySystem");
system = new Mint20ProxySystem(world, address(components));
world.registerSystem(address(system), Mint20ProxySystemID);
console.log(address(system));

console.log("Deploying Mint20MintSystem");
system = new Mint20MintSystem(world, address(components));
world.registerSystem(address(system), Mint20MintSystemID);
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdPetComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
console.log(address(system));

console.log("Deploying NodeCollectSystem");
system = new NodeCollectSystem(world, address(components));
world.registerSystem(address(system), NodeCollectSystemID);
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, EpochComponentID, address(system));
authorizeWriter(components, ExperienceComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, IsScoreComponentID, address(system));
authorizeWriter(components, TimeLastActionComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
console.log(address(system));

console.log("Deploying Pet721IsInWorldSystem");
system = new Pet721IsInWorldSystem(world, address(components));
world.registerSystem(address(system), Pet721IsInWorldSystemID);
console.log(address(system));

console.log("Deploying Pet721MetadataSystem");
system = new Pet721MetadataSystem(world, address(components));
world.registerSystem(address(system), Pet721MetadataSystemID);
console.log(address(system));

console.log("Deploying Pet721ProxySystem");
system = new Pet721ProxySystem(world, address(components));
world.registerSystem(address(system), Pet721ProxySystemID);
console.log(address(system));

console.log("Deploying Pet721UnstakeSystem");
system = new Pet721UnstakeSystem(world, address(components));
world.registerSystem(address(system), Pet721UnstakeSystemID);
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
console.log(address(system));

console.log("Deploying Pet721StakeSystem");
system = new Pet721StakeSystem(world, address(components));
world.registerSystem(address(system), Pet721StakeSystemID);
authorizeWriter(components, AddressOperatorComponentID, address(system));
authorizeWriter(components, AddressOwnerComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IsAccountComponentID, address(system));
authorizeWriter(components, IndexRoomComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
authorizeWriter(components, StaminaComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
console.log(address(system));

console.log("Deploying PetFeedSystem");
system = new PetFeedSystem(world, address(components));
world.registerSystem(address(system), PetFeedSystemID);
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, EpochComponentID, address(system));
authorizeWriter(components, ExperienceComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, IsScoreComponentID, address(system));
authorizeWriter(components, RateComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
console.log(address(system));

console.log("Deploying PetGachaMintSystem");
system = new PetGachaMintSystem(world, address(components));
world.registerSystem(address(system), PetGachaMintSystemID);
authorizeWriter(components, BlockRevealComponentID, address(system));
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, RerollComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
console.log(address(system));

console.log("Deploying PetGachaRerollSystem");
system = new PetGachaRerollSystem(world, address(components));
world.registerSystem(address(system), PetGachaRerollSystemID);
authorizeWriter(components, BlockRevealComponentID, address(system));
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, GachaOrderComponentID, address(system));
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, RerollComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
console.log(address(system));

console.log("Deploying PetGachaRevealSystem");
system = new PetGachaRevealSystem(world, address(components));
world.registerSystem(address(system), PetGachaRevealSystemID);
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BlockRevealComponentID, address(system));
authorizeWriter(components, GachaOrderComponentID, address(system));
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, RerollComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
console.log(address(system));

console.log("Deploying PetLevelSystem");
system = new PetLevelSystem(world, address(components));
world.registerSystem(address(system), PetLevelSystemID);
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, ExperienceComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, LevelComponentID, address(system));
authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
authorizeWriter(components, RateComponentID, address(system));
authorizeWriter(components, SkillPointComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
console.log(address(system));

console.log("Deploying PetNameSystem");
system = new PetNameSystem(world, address(components));
world.registerSystem(address(system), PetNameSystemID);
authorizeWriter(components, CanNameComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
console.log(address(system));

console.log("Deploying PetReviveSystem");
system = new PetReviveSystem(world, address(components));
world.registerSystem(address(system), PetReviveSystemID);
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
console.log(address(system));

console.log("Deploying PetSetAccountSystem");
system = new PetSetAccountSystem(world, address(components));
world.registerSystem(address(system), PetSetAccountSystemID);
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
console.log(address(system));

console.log("Deploying PetUpgradeSkillSystem");
system = new PetUpgradeSkillSystem(world, address(components));
world.registerSystem(address(system), PetUpgradeSkillSystemID);
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IndexSkillComponentID, address(system));
authorizeWriter(components, IsBonusComponentID, address(system));
authorizeWriter(components, IsSkillComponentID, address(system));
authorizeWriter(components, HarmonyComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, PowerComponentID, address(system));
authorizeWriter(components, RateComponentID, address(system));
authorizeWriter(components, SkillPointComponentID, address(system));
authorizeWriter(components, SlotsComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
authorizeWriter(components, ViolenceComponentID, address(system));
console.log(address(system));

console.log("Deploying PetUseItemSystem");
system = new PetUseItemSystem(world, address(components));
world.registerSystem(address(system), PetUseItemSystemID);
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, CanNameComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
console.log(address(system));

console.log("Deploying ProductionCollectSystem");
system = new ProductionCollectSystem(world, address(components));
world.registerSystem(address(system), ProductionCollectSystemID);
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, EpochComponentID, address(system));
authorizeWriter(components, ExperienceComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, IsScoreComponentID, address(system));
authorizeWriter(components, RateComponentID, address(system));
authorizeWriter(components, TimeLastActionComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
console.log(address(system));

console.log("Deploying ProductionLiquidateSystem");
system = new ProductionLiquidateSystem(world, address(components));
world.registerSystem(address(system), ProductionLiquidateSystemID);
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IdNodeComponentID, address(system));
authorizeWriter(components, IdSourceComponentID, address(system));
authorizeWriter(components, IdTargetComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, IndexNodeComponentID, address(system));
authorizeWriter(components, IsKillComponentID, address(system));
authorizeWriter(components, IsScoreComponentID, address(system));
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, EpochComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, RateComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, TimeComponentID, address(system));
authorizeWriter(components, TimeLastActionComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
console.log(address(system));

console.log("Deploying ProductionStartSystem");
system = new ProductionStartSystem(world, address(components));
world.registerSystem(address(system), ProductionStartSystemID);
authorizeWriter(components, IsProductionComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, IdNodeComponentID, address(system));
authorizeWriter(components, IdPetComponentID, address(system));
authorizeWriter(components, IndexNodeComponentID, address(system));
authorizeWriter(components, RateComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, TimeLastActionComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
console.log(address(system));

console.log("Deploying ProductionStopSystem");
system = new ProductionStopSystem(world, address(components));
world.registerSystem(address(system), ProductionStopSystemID);
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, EpochComponentID, address(system));
authorizeWriter(components, ExperienceComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, IsScoreComponentID, address(system));
authorizeWriter(components, RateComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, TimeLastActionComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
console.log(address(system));

console.log("Deploying QuestAcceptSystem");
system = new QuestAcceptSystem(world, address(components));
world.registerSystem(address(system), QuestAcceptSystemID);
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IndexQuestComponentID, address(system));
authorizeWriter(components, IndexObjectiveComponentID, address(system));
authorizeWriter(components, IsCompleteComponentID, address(system));
authorizeWriter(components, IsQuestComponentID, address(system));
authorizeWriter(components, IsRepeatableComponentID, address(system));
authorizeWriter(components, IsObjectiveComponentID, address(system));
authorizeWriter(components, TimeLastActionComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
console.log(address(system));

console.log("Deploying QuestCompleteSystem");
system = new QuestCompleteSystem(world, address(components));
world.registerSystem(address(system), QuestCompleteSystemID);
authorizeWriter(components, AddressOperatorComponentID, address(system));
authorizeWriter(components, AddressOwnerComponentID, address(system));
authorizeWriter(components, AffinityComponentID, address(system));
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BalancesComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, BlacklistComponentID, address(system));
authorizeWriter(components, BlockRevealComponentID, address(system));
authorizeWriter(components, CanNameComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, CostComponentID, address(system));
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, EpochComponentID, address(system));
authorizeWriter(components, ExitsComponentID, address(system));
authorizeWriter(components, ExperienceComponentID, address(system));
authorizeWriter(components, FavoriteFoodComponentID, address(system));
authorizeWriter(components, ForComponentID, address(system));
authorizeWriter(components, GachaOrderComponentID, address(system));
authorizeWriter(components, HarmonyComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdDelegateeComponentID, address(system));
authorizeWriter(components, IdDelegatorComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IdNodeComponentID, address(system));
authorizeWriter(components, IdPetComponentID, address(system));
authorizeWriter(components, IdSourceComponentID, address(system));
authorizeWriter(components, IdTargetComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, IndexAccountComponentID, address(system));
authorizeWriter(components, IndexBackgroundComponentID, address(system));
authorizeWriter(components, IndexBodyComponentID, address(system));
authorizeWriter(components, IndexColorComponentID, address(system));
authorizeWriter(components, IndexFaceComponentID, address(system));
authorizeWriter(components, IndexFarcasterComponentID, address(system));
authorizeWriter(components, IndexHandComponentID, address(system));
authorizeWriter(components, IndexItemComponentID, address(system));
authorizeWriter(components, IndexNodeComponentID, address(system));
authorizeWriter(components, IndexNPCComponentID, address(system));
authorizeWriter(components, IndexObjectiveComponentID, address(system));
authorizeWriter(components, IndexPetComponentID, address(system));
authorizeWriter(components, IndexRelationshipComponentID, address(system));
authorizeWriter(components, IndexQuestComponentID, address(system));
authorizeWriter(components, IndexSkillComponentID, address(system));
authorizeWriter(components, IndexSourceComponentID, address(system));
authorizeWriter(components, IndexTraitComponentID, address(system));
authorizeWriter(components, IsAccountComponentID, address(system));
authorizeWriter(components, IsBonusComponentID, address(system));
authorizeWriter(components, IsCompleteComponentID, address(system));
authorizeWriter(components, IsConditionComponentID, address(system));
authorizeWriter(components, IsConsumableComponentID, address(system));
authorizeWriter(components, IsEffectComponentID, address(system));
authorizeWriter(components, IsEquippedComponentID, address(system));
authorizeWriter(components, IsFriendshipComponentID, address(system));
authorizeWriter(components, IsFungibleComponentID, address(system));
authorizeWriter(components, IsInventoryComponentID, address(system));
authorizeWriter(components, IsKillComponentID, address(system));
authorizeWriter(components, IsListingComponentID, address(system));
authorizeWriter(components, IsLogComponentID, address(system));
authorizeWriter(components, IsLootboxComponentID, address(system));
authorizeWriter(components, IsNodeComponentID, address(system));
authorizeWriter(components, IsNPCComponentID, address(system));
authorizeWriter(components, IsPetComponentID, address(system));
authorizeWriter(components, IsProductionComponentID, address(system));
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsRelationshipComponentID, address(system));
authorizeWriter(components, IsRepeatableComponentID, address(system));
authorizeWriter(components, IsRequirementComponentID, address(system));
authorizeWriter(components, IsRewardComponentID, address(system));
authorizeWriter(components, IsRoomComponentID, address(system));
authorizeWriter(components, IsObjectiveComponentID, address(system));
authorizeWriter(components, IsQuestComponentID, address(system));
authorizeWriter(components, IsScoreComponentID, address(system));
authorizeWriter(components, IsSkillComponentID, address(system));
authorizeWriter(components, KeysComponentID, address(system));
authorizeWriter(components, LevelComponentID, address(system));
authorizeWriter(components, LocationComponentID, address(system));
authorizeWriter(components, IndexRoomComponentID, address(system));
authorizeWriter(components, LogicTypeComponentID, address(system));
authorizeWriter(components, MaxComponentID, address(system));
authorizeWriter(components, MediaURIComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, PowerComponentID, address(system));
authorizeWriter(components, PriceBuyComponentID, address(system));
authorizeWriter(components, PriceSellComponentID, address(system));
authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
authorizeWriter(components, QuestPointComponentID, address(system));
authorizeWriter(components, RarityComponentID, address(system));
authorizeWriter(components, RateComponentID, address(system));
authorizeWriter(components, RerollComponentID, address(system));
authorizeWriter(components, SkillPointComponentID, address(system));
authorizeWriter(components, SlotsComponentID, address(system));
authorizeWriter(components, StaminaComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, SubtypeComponentID, address(system));
authorizeWriter(components, TimeComponentID, address(system));
authorizeWriter(components, TimelockComponentID, address(system));
authorizeWriter(components, TimeLastActionComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
authorizeWriter(components, ViolenceComponentID, address(system));
authorizeWriter(components, WeightsComponentID, address(system));
authorizeWriter(components, WhitelistComponentID, address(system));
console.log(address(system));

console.log("Deploying QuestDropSystem");
system = new QuestDropSystem(world, address(components));
world.registerSystem(address(system), QuestDropSystemID);
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IndexQuestComponentID, address(system));
authorizeWriter(components, IndexObjectiveComponentID, address(system));
authorizeWriter(components, IsCompleteComponentID, address(system));
authorizeWriter(components, IsQuestComponentID, address(system));
authorizeWriter(components, IsRepeatableComponentID, address(system));
authorizeWriter(components, IsObjectiveComponentID, address(system));
authorizeWriter(components, TimeLastActionComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
console.log(address(system));

console.log("Deploying RelationshipAdvanceSystem");
system = new RelationshipAdvanceSystem(world, address(components));
world.registerSystem(address(system), RelationshipAdvanceSystemID);
authorizeWriter(components, IsRelationshipComponentID, address(system));
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IndexNPCComponentID, address(system));
authorizeWriter(components, IndexRelationshipComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
console.log(address(system));

console.log("Deploying SkillUpgradeSystem");
system = new SkillUpgradeSystem(world, address(components));
world.registerSystem(address(system), SkillUpgradeSystemID);
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IndexSkillComponentID, address(system));
authorizeWriter(components, IsBonusComponentID, address(system));
authorizeWriter(components, IsSkillComponentID, address(system));
authorizeWriter(components, HarmonyComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, PowerComponentID, address(system));
authorizeWriter(components, RateComponentID, address(system));
authorizeWriter(components, SkillPointComponentID, address(system));
authorizeWriter(components, SlotsComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
authorizeWriter(components, ViolenceComponentID, address(system));
console.log(address(system));

console.log("Deploying _721BatchMinterSystem");
system = new _721BatchMinterSystem(world, address(components));
world.registerSystem(address(system), _721BatchMinterSystemID);
authorizeWriter(components, AddressOperatorComponentID, address(system));
authorizeWriter(components, AddressOwnerComponentID, address(system));
authorizeWriter(components, AffinityComponentID, address(system));
authorizeWriter(components, BalanceComponentID, address(system));
authorizeWriter(components, BalancesComponentID, address(system));
authorizeWriter(components, BareValueComponentID, address(system));
authorizeWriter(components, BlacklistComponentID, address(system));
authorizeWriter(components, BlockRevealComponentID, address(system));
authorizeWriter(components, CanNameComponentID, address(system));
authorizeWriter(components, CoinComponentID, address(system));
authorizeWriter(components, CostComponentID, address(system));
authorizeWriter(components, DescriptionComponentID, address(system));
authorizeWriter(components, EpochComponentID, address(system));
authorizeWriter(components, ExitsComponentID, address(system));
authorizeWriter(components, ExperienceComponentID, address(system));
authorizeWriter(components, FavoriteFoodComponentID, address(system));
authorizeWriter(components, ForComponentID, address(system));
authorizeWriter(components, GachaOrderComponentID, address(system));
authorizeWriter(components, HarmonyComponentID, address(system));
authorizeWriter(components, HealthComponentID, address(system));
authorizeWriter(components, IdAccountComponentID, address(system));
authorizeWriter(components, IdDelegateeComponentID, address(system));
authorizeWriter(components, IdDelegatorComponentID, address(system));
authorizeWriter(components, IdHolderComponentID, address(system));
authorizeWriter(components, IdNodeComponentID, address(system));
authorizeWriter(components, IdPetComponentID, address(system));
authorizeWriter(components, IdSourceComponentID, address(system));
authorizeWriter(components, IdTargetComponentID, address(system));
authorizeWriter(components, IndexComponentID, address(system));
authorizeWriter(components, IndexAccountComponentID, address(system));
authorizeWriter(components, IndexBackgroundComponentID, address(system));
authorizeWriter(components, IndexBodyComponentID, address(system));
authorizeWriter(components, IndexColorComponentID, address(system));
authorizeWriter(components, IndexFaceComponentID, address(system));
authorizeWriter(components, IndexFarcasterComponentID, address(system));
authorizeWriter(components, IndexHandComponentID, address(system));
authorizeWriter(components, IndexItemComponentID, address(system));
authorizeWriter(components, IndexNodeComponentID, address(system));
authorizeWriter(components, IndexNPCComponentID, address(system));
authorizeWriter(components, IndexObjectiveComponentID, address(system));
authorizeWriter(components, IndexPetComponentID, address(system));
authorizeWriter(components, IndexRelationshipComponentID, address(system));
authorizeWriter(components, IndexQuestComponentID, address(system));
authorizeWriter(components, IndexSkillComponentID, address(system));
authorizeWriter(components, IndexSourceComponentID, address(system));
authorizeWriter(components, IndexTraitComponentID, address(system));
authorizeWriter(components, IsAccountComponentID, address(system));
authorizeWriter(components, IsBonusComponentID, address(system));
authorizeWriter(components, IsCompleteComponentID, address(system));
authorizeWriter(components, IsConditionComponentID, address(system));
authorizeWriter(components, IsConsumableComponentID, address(system));
authorizeWriter(components, IsEffectComponentID, address(system));
authorizeWriter(components, IsEquippedComponentID, address(system));
authorizeWriter(components, IsFriendshipComponentID, address(system));
authorizeWriter(components, IsFungibleComponentID, address(system));
authorizeWriter(components, IsInventoryComponentID, address(system));
authorizeWriter(components, IsKillComponentID, address(system));
authorizeWriter(components, IsListingComponentID, address(system));
authorizeWriter(components, IsLogComponentID, address(system));
authorizeWriter(components, IsLootboxComponentID, address(system));
authorizeWriter(components, IsNodeComponentID, address(system));
authorizeWriter(components, IsNPCComponentID, address(system));
authorizeWriter(components, IsPetComponentID, address(system));
authorizeWriter(components, IsProductionComponentID, address(system));
authorizeWriter(components, IsRegistryComponentID, address(system));
authorizeWriter(components, IsRelationshipComponentID, address(system));
authorizeWriter(components, IsRepeatableComponentID, address(system));
authorizeWriter(components, IsRequirementComponentID, address(system));
authorizeWriter(components, IsRewardComponentID, address(system));
authorizeWriter(components, IsRoomComponentID, address(system));
authorizeWriter(components, IsObjectiveComponentID, address(system));
authorizeWriter(components, IsQuestComponentID, address(system));
authorizeWriter(components, IsScoreComponentID, address(system));
authorizeWriter(components, IsSkillComponentID, address(system));
authorizeWriter(components, KeysComponentID, address(system));
authorizeWriter(components, LevelComponentID, address(system));
authorizeWriter(components, LocationComponentID, address(system));
authorizeWriter(components, IndexRoomComponentID, address(system));
authorizeWriter(components, LogicTypeComponentID, address(system));
authorizeWriter(components, MaxComponentID, address(system));
authorizeWriter(components, MediaURIComponentID, address(system));
authorizeWriter(components, NameComponentID, address(system));
authorizeWriter(components, PowerComponentID, address(system));
authorizeWriter(components, PriceBuyComponentID, address(system));
authorizeWriter(components, PriceSellComponentID, address(system));
authorizeWriter(components, ProxyPermissionsFarm20ComponentID, address(system));
authorizeWriter(components, ProxyPermissionsERC721ComponentID, address(system));
authorizeWriter(components, ProxyPermissionsMint20ComponentID, address(system));
authorizeWriter(components, QuestPointComponentID, address(system));
authorizeWriter(components, RarityComponentID, address(system));
authorizeWriter(components, RateComponentID, address(system));
authorizeWriter(components, RerollComponentID, address(system));
authorizeWriter(components, SkillPointComponentID, address(system));
authorizeWriter(components, SlotsComponentID, address(system));
authorizeWriter(components, StaminaComponentID, address(system));
authorizeWriter(components, StateComponentID, address(system));
authorizeWriter(components, SubtypeComponentID, address(system));
authorizeWriter(components, TimeComponentID, address(system));
authorizeWriter(components, TimelockComponentID, address(system));
authorizeWriter(components, TimeLastActionComponentID, address(system));
authorizeWriter(components, TimeLastComponentID, address(system));
authorizeWriter(components, TimeStartComponentID, address(system));
authorizeWriter(components, TypeComponentID, address(system));
authorizeWriter(components, ValueComponentID, address(system));
authorizeWriter(components, ViolenceComponentID, address(system));
authorizeWriter(components, WeightsComponentID, address(system));
authorizeWriter(components, WhitelistComponentID, address(system));
console.log(address(system));

}
}