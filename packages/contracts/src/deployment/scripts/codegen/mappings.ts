import { rm, writeFile } from 'fs/promises';
import { glob } from 'glob';
import path from 'path';
import { deferred } from '../../utils/deferred';
import { extractIdFromFile } from '../../utils/ids';
import { clientDir, deploymentDir, systemsDir } from './paths';

export async function genClientSystemData(clear?: boolean) {
  const outputDir = clientDir + 'types/';
  if (clear) {
    console.log('Clearing system type output files', outputDir);
    await rm(path.join(outputDir, '/SystemTypes.ts'), { force: true });
    await rm(path.join(outputDir, '/SystemAbis.mjs'), { force: true });
    await rm(path.join(outputDir, '/SystemMappings.ts'), { force: true });
  }

  const { systems, ids } = await getSystemMetadata(systemsDir);
  const abis = systems.map((system) => `../abi/${system}.json`);
  const types = systems.map((system) => `./ethers-contracts/${system}.ts`);

  const SystemMappings = genSystemMappings(systems, ids);
  const SystemTypes = genSystemTypes(systems, ids, types);
  const SystemAbis = genSystemAbis(systems, ids, abis);

  await writeFile(`${outputDir}/SystemTypes.ts`, SystemTypes);
  await writeFile(`${outputDir}/SystemAbis.mjs`, SystemAbis);
  await writeFile(`${outputDir}/SystemMappings.ts`, SystemMappings);
}

export async function genContractSystemData(clear?: boolean) {
  const outputDir = deploymentDir + 'contracts/mappings/';
  if (clear) {
    console.log('Clearing system type output files', outputDir);
    await rm(path.join(outputDir, '/SystemAbis.ts'), { force: true });
    await rm(path.join(outputDir, '/SystemMappings.ts'), { force: true });
  }

  const { systems, ids } = await getSystemMetadata(systemsDir);
  const abis = systems.map((system) => `../../../../out/${system}.sol/${system}.json`);

  const SystemAbis = genSystemAbis(systems, ids, abis);
  const SystemMappings = genSystemMappings(systems, ids);

  await writeFile(`${outputDir}SystemAbis.ts`, SystemAbis);
  await writeFile(`${outputDir}SystemMappings.ts`, SystemMappings);
}

/////////////
// INTERNAL

async function getSystemMetadata(systemsDir: string) {
  const systemsPath = `${systemsDir}*.sol`;
  let systems: string[] = [];
  let ids: string[] = [];

  const [resolve, , promise] = deferred<void>();
  glob(systemsPath, {}, (_: any, matches: string[]) => {
    systems = matches.map((path) => {
      const fragments = path.split('/');
      return fragments[fragments.length - 1].split('.sol')[0];
    });

    ids = matches.map((path, index) => {
      const id = extractIdFromFile(path);
      if (!id) {
        // console.log("Path:", path);
        // console.log("ID:", id);
        throw new Error(
          'No ID found for' +
            matches[index] +
            '. Make sure your system source file includes a ID definition (uint256 constant ID = uint256(keccak256(<ID>));)'
        );
      }
      return id;
    });

    resolve();
  });

  await promise; // Make the callback synchronous

  return { systems, ids };
}

function genSystemMappings(systems: string[], ids: string[]) {
  return `// Autogenerated using mud system-types
  export const systemToId = {
  ${systems.map((system, index) => `  ${system}: "${ids[index]}",`).join('\n')}
  };
  
  export const idToSystem = {
  ${ids.map((id, index) => `  "${id}": "${systems[index]}",`).join('\n')}
  };
    `;
}

function genSystemTypes(systems: string[], ids: string[], typePaths: string[]) {
  return `// Autogenerated using mud system-types
${typePaths
  .map((path, index) => `import { ${systems[index]} } from "${path.replace('.ts', '')}";`)
  .join('\n')}

export type SystemTypes = {
${systems.map((system, index) => `  "${ids[index]}": ${system};`).join('\n')}
};
`;
}

function genSystemAbis(systems: string[], ids: string[], abis: string[]) {
  return `// Autogenerated using mud system-types
${abis.map((path, index) => `import ${systems[index]} from "${path}";`).join('\n')}

export const SystemAbis = {
${systems.map((system, index) => `  "${ids[index]}": ${system}.abi,`).join('\n')}
};
`;
}
