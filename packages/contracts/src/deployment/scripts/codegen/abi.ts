import { readFile, rm, writeFile } from 'fs/promises';
import { glob } from 'glob';
import path from 'path';
import { deferred } from '../../utils/deferred';
import { extractIdFromFile } from '../../utils/ids';
import { clientDir, deploymentDir } from './paths';

export async function generateSystemTypes(
  inputDir: string,
  outputDir: string,
  options?: { clear?: boolean }
) {
  if (options?.clear) {
    console.log('Clearing system type output files', outputDir);
    await rm(path.join(outputDir, '/SystemTypes.ts'), { force: true });
    // await rm(path.join(outputDir, "/SystemAbis.mts"), { force: true });
    await rm(path.join(outputDir, '/SystemAbis.mjs'), { force: true });
    await rm(path.join(outputDir, '/SystemMappings.ts'), { force: true });
  }

  let abis: string[] = [];
  let systems: string[] = [];
  let ids: string[] = [];
  let typePaths: string[] = [];

  const systemsPath = `${inputDir}/*.sol`;

  const [resolve, , promise] = deferred<void>();
  glob(systemsPath, {}, (_: any, matches: string[]) => {
    systems = matches.map((path) => {
      const fragments = path.split('/');
      return fragments[fragments.length - 1].split('.sol')[0];
    });

    ids = matches.map((path, index) => {
      const id = extractIdFromFile(path);
      if (!id) {
        // console.log("Path:", path);
        // console.log("ID:", id);
        throw new Error(
          'No ID found for' +
            matches[index] +
            '. Make sure your system source file includes a ID definition (uint256 constant ID = uint256(keccak256(<ID>));)'
        );
      }
      return id;
    });

    abis = systems.map((system) => `../abi/${system}.json`);

    typePaths = systems.map((system) => `./ethers-contracts/${system}.ts`);

    resolve();
  });

  // Make the callback synchronous
  await promise;

  const SystemMappings = `// Autogenerated using mud system-types
export const systemToId = {
${systems.map((system, index) => `  ${system}: "${ids[index]}",`).join('\n')}
};

export const idToSystem = {
${ids.map((id, index) => `  "${id}": "${systems[index]}",`).join('\n')}
};
  `;

  const SystemTypes = `// Autogenerated using mud system-types
${typePaths
  .map((path, index) => `import { ${systems[index]} } from "${path.replace('.ts', '')}";`)
  .join('\n')}

export type SystemTypes = {
${systems.map((system, index) => `  "${ids[index]}": ${system};`).join('\n')}
};
`;

  const SystemAbis = `// Autogenerated using mud system-types
${abis.map((path, index) => `import ${systems[index]} from "${path}";`).join('\n')}

export const SystemAbis = {
${systems.map((system, index) => `  "${ids[index]}": ${system}.abi,`).join('\n')}
};
`;

  await writeFile(`${outputDir}/SystemTypes.ts`, SystemTypes);
  // await writeFile(`${outputDir}/SystemAbis.mts`, SystemAbis);
  await writeFile(`${outputDir}/SystemAbis.mjs`, SystemAbis);
  await writeFile(`${outputDir}/SystemMappings.ts`, SystemMappings);
}

/**
 * Generate SystemAbis.ts & SystemMappings.ts from client system config
 * Copies over mud autogen system abis into a here
 * needed to bypass esm/cjs/node stuff
 */
export async function generateAbiMappings() {
  // copying ABIs
  const outPath = path.join(deploymentDir, 'world/mappings/SystemAbis.ts');
  const original = await readFile(path.join(clientDir, 'types/SystemAbis.mjs'), {
    encoding: 'utf8',
  });
  const result = original.replace(/..\/abi/g, '../../../../../client/abi');
  await writeFile(outPath, result);

  // copying mappings
  const outPathMapping = path.join(deploymentDir, 'world/mappings/SystemMappings.ts');
  const mappings = await readFile(path.join(clientDir, 'types/SystemMappings.ts'), {
    encoding: 'utf8',
  });
  await writeFile(outPathMapping, mappings);

  return;
}
