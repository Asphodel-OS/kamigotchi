// Autogenerated using mud component-types
import { World } from '@mud-classic/recs';
import {
  defineBoolComponent,
  defineLoadingStateComponent,
  defineNumberArrayComponent,
  defineNumberComponent,
  defineStatComponent,
  defineStringComponent,
  defineTimelockComponent,
} from './definitions';

export type Components = ReturnType<typeof createComponents>;

// define functions for registration
export function createComponents(world: World) {
  return {
    OperatorAddress: defineStringComponent(world, 'OperatorAddress', 'component.address.operator'),
    OwnerAddress: defineStringComponent(world, 'OwnerAddress', 'component.address.owner'),
    Affinity: defineStringComponent(world, 'Affinity', 'component.affiinity'),
    Blacklist: defineNumberArrayComponent(world, 'Blacklist', 'component.blacklist'),
    RevealBlock: defineNumberComponent(world, 'RevealBlock', 'component.block.reveal'),
    OperatorCache: defineNumberComponent(world, 'OperatorCache', 'component.cache.operator'),
    Cost: defineNumberComponent(world, 'Cost', 'component.cost'),
    DescriptionAlt: defineStringComponent(world, 'DescriptionAlt', 'component.description.alt'),
    Description: defineStringComponent(world, 'Description', 'component.description'),
    Exits: defineNumberArrayComponent(world, 'Exits', 'component.exits'),
    Experience: defineNumberComponent(world, 'Experience', 'component.experience'),
    FarcasterIndex: defineNumberComponent(world, 'FarcasterIndex', 'component.index.farcaster'),
    For: defineNumberComponent(world, 'For', 'component.for'),
    HasFlag: defineBoolComponent(world, 'HasFlag', 'component.has.flag'),
    Hash: defineStringComponent(world, 'Hash', 'component.hash'),
    Harmony: defineStatComponent(world, 'Harmony', 'component.stat.harmony'),
    Health: defineStatComponent(world, 'Health', 'component.stat.health'),
    AccountID: defineStringComponent(world, 'AccountID', 'component.id.account'),
    DelegateeID: defineStringComponent(world, 'DelegateeID', 'component.id.delegatee'),
    DelegatorID: defineStringComponent(world, 'DelegatorID', 'component.id.delegator'),
    HolderID: defineStringComponent(world, 'HolderID', 'component.id.holder'),
    PointerID: defineStringComponent(world, 'PointerID', 'component.id.pointer'),
    OwnsInventoryID: defineStringComponent(world, 'OwnsInventoryID', 'component.id.inventory.owns'),
    OwnsQuestID: defineStringComponent(world, 'OwnsQuestID', 'component.id.quest.owns'),
    OwnsRelationshipID: defineStringComponent(world, 'OwnsRelationshipID', 'component.id.relationship.owns'),
    OwnsPetID: defineStringComponent(world, 'OwnsPetID', 'component.id.pet.owns'),
    NodeID: defineStringComponent(world, 'NodeID', 'component.id.node'),
    PetID: defineStringComponent(world, 'PetID', 'component.id.pet'),
    RoomID: defineStringComponent(world, 'RoomID', 'component.id.room'),
    SourceID: defineStringComponent(world, 'SourceID', 'component.id.source'),
    ScoreTypeID: defineStringComponent(world, 'ScoreTypeID', 'component.id.score.type'),
    TargetID: defineStringComponent(world, 'TargetID', 'component.id.target'),
    Index: defineNumberComponent(world, 'Index', 'component.index'),
    AccountIndex: defineNumberComponent(world, 'AccountIndex', 'component.index.account'),
    BackgroundIndex: defineNumberComponent(world, 'BackgroundIndex', 'component.index.background'),
    BodyIndex: defineNumberComponent(world, 'BodyIndex', 'component.index.body'),
    ColorIndex: defineNumberComponent(world, 'ColorIndex', 'component.index.color'),
    FaceIndex: defineNumberComponent(world, 'FaceIndex', 'component.index.face'),
    HandIndex: defineNumberComponent(world, 'HandIndex', 'component.index.hand'),
    ItemIndex: defineNumberComponent(world, 'ItemIndex', 'component.index.item'),
    NodeIndex: defineNumberComponent(world, 'NodeIndex', 'component.index.node'),
    NPCIndex: defineNumberComponent(world, 'NPCIndex', 'component.index.npc'),
    PetIndex: defineNumberComponent(world, 'PetIndex', 'component.index.pet'),
    QuestIndex: defineNumberComponent(world, 'QuestIndex', 'component.index.quest'),
    RelationshipIndex: defineNumberComponent(world, 'RelationshipIndex', 'component.index.relationship'),
    RoomIndex: defineNumberComponent(world, 'RoomIndex', 'component.index.room'),
    SkillIndex: defineNumberComponent(world, 'SkillIndex', 'component.index.skill'),
    IsAccount: defineBoolComponent(world, 'IsAccount', 'component.is.account'),
    IsBonus: defineBoolComponent(world, 'IsBonus', 'component.is.bonus'),
    IsComplete: defineBoolComponent(world, 'IsComplete', 'component.is.complete'),
    IsConsumable: defineBoolComponent(world, 'IsConsumable', 'component.is.consumable'),
    IsEffect: defineBoolComponent(world, 'IsEffect', 'component.is.effect'),
    IsEquipped: defineBoolComponent(world, 'IsEquipped', 'component.is.equipped'),
    IsFriendship: defineBoolComponent(world, 'IsFriendship', 'component.is.friendship'),
    IsInventory: defineBoolComponent(world, 'IsInventory', 'component.is.inventory'),
    IsGoal: defineBoolComponent(world, 'IsGoal', 'component.is.goal'),
    IsKill: defineBoolComponent(world, 'IsKill', 'component.is.kill'),
    IsListing: defineBoolComponent(world, 'IsListing', 'component.is.listing'),
    IsLog: defineBoolComponent(world, 'IsLog', 'component.is.log'),
    IsLootbox: defineBoolComponent(world, 'IsLootbox', 'component.is.lootbox'),
    IsNode: defineBoolComponent(world, 'IsNode', 'component.is.node'),
    IsNPC: defineBoolComponent(world, 'IsNPC', 'component.is.npc'),
    IsPet: defineBoolComponent(world, 'IsPet', 'component.is.pet'),
    IsProduction: defineBoolComponent(world, 'IsProduction', 'component.is.production'),
    IsRegistry: defineBoolComponent(world, 'IsRegistry', 'component.is.registry'),
    IsRelationship: defineBoolComponent(world, 'IsRelationship', 'component.is.relationship'),
    IsRepeatable: defineBoolComponent(world, 'IsRepeatable', 'component.is.repeatable'),
    IsRequirement: defineBoolComponent(world, 'IsRequirement', 'component.is.requirement'),
    IsReward: defineBoolComponent(world, 'IsReward', 'component.is.reward'),
    IsRoom: defineBoolComponent(world, 'IsRoom', 'component.is.room'),
    IsObjective: defineBoolComponent(world, 'IsObjective', 'component.is.objective'),
    IsQuest: defineBoolComponent(world, 'IsQuest', 'component.is.quest'),
    IsSkill: defineBoolComponent(world, 'IsSkill', 'component.is.skill'),
    Keys: defineNumberArrayComponent(world, 'Keys', 'component.keys'),
    Level: defineNumberComponent(world, 'Level', 'component.level'),
    Location: defineStringComponent(world, 'Location', 'component.location'),
    LogicType: defineStringComponent(world, 'LogicType', 'component.logictype'),
    Max: defineNumberComponent(world, 'Max', 'component.max'),
    MediaURI: defineStringComponent(world, 'MediaURI', 'component.mediaURI'),
    Name: defineStringComponent(world, 'Name', 'component.name'),
    Power: defineStatComponent(world, 'Power', 'component.stat.power'),
    PriceBuy: defineNumberComponent(world, 'PriceBuy', 'component.price.buy'),
    PriceSell: defineNumberComponent(world, 'PriceSell', 'component.price.sell'),
    ProxyPermissionsFarm20: defineBoolComponent(world, 'ProxyPermissionsFarm20', 'components.proxy.Permissions.Farm20'),
    ProxyPermissionsERC721: defineBoolComponent(world, 'ProxyPermissionsERC721', 'components.proxy.Permissions.ERC721'),
    ProxyPermissionsMint20: defineBoolComponent(world, 'ProxyPermissionsMint20', 'components.proxy.Permissions.Mint20'),
    Rarity: defineNumberComponent(world, 'Rarity', 'component.rarity'),
    Rate: defineNumberComponent(world, 'Rate', 'component.rate'),
    Reroll: defineNumberComponent(world, 'Reroll', 'component.reroll'),
    SkillPoint: defineNumberComponent(world, 'SkillPoint', 'component.skill.point'),
    Slots: defineStatComponent(world, 'Slots', 'component.stat.slots'),
    Stamina: defineStatComponent(world, 'Stamina', 'component.stat.stamina'),
    State: defineStringComponent(world, 'State', 'component.state'),
    Subtype: defineStringComponent(world, 'Subtype', 'component.subtype'),
    Time: defineNumberComponent(world, 'Time', 'component.Time'),
    LastActionTime: defineNumberComponent(world, 'LastActionTime', 'component.Time.LastAction'),
    LastTime: defineNumberComponent(world, 'LastTime', 'component.Time.Last'),
    Timelock: defineTimelockComponent(world, 'Timelock', 'component.Timelock'),
    ResetTime: defineNumberComponent(world, 'ResetTime', 'component.Time.Reset'),
    StartTime: defineNumberComponent(world, 'StartTime', 'component.Time.Start'),
    Type: defineStringComponent(world, 'Type', 'component.type'),
    Value: defineNumberComponent(world, 'Value', 'component.value'),
    Values: defineNumberArrayComponent(world, 'Values', 'component.values'),
    ValueSigned: defineNumberComponent(world, 'ValueSigned', 'component.value.signed'),
    Violence: defineStatComponent(world, 'Violence', 'component.stat.violence'),
    Weights: defineNumberArrayComponent(world, 'Weights', 'component.weights'),
    Whitelist: defineNumberArrayComponent(world, 'Whitelist', 'component.whitelist'),

LoadingState: defineLoadingStateComponent(world),
  }
}