import { initCache } from 'cache/';
import { ECSStateReply } from 'engine/types/ecs-snapshot';
import { StateEntry } from './types';

// TODO: define this type more explicitly
export type StateStore = Awaited<ReturnType<typeof get>>;
export type StateStores = {
  ComponentValues: StateEntry;
  BlockNumber: number;
  Mappings: string[];
  Snapshot: ECSStateReply;
  LastKamigazeBlock: number;
  LastKamigazeEntity: number;
  LastKamigazeComponent: number;
  KamigazeNonce: number;
};

// load in a StateStore from its computed ID
export const get = (chainID: number, worldAddress: string, version: number, idb?: IDBFactory) => {
  const id = getID('ECSCache', chainID, worldAddress, version);
  return initCache<StateStores>(
    id,
    [
      // TODO: clean this up with autogenerated keys from StateStores Type
      'ComponentValues',
      'BlockNumber',
      'Mappings',
      'Snapshot',
      'LastKamigazeBlock',
      'LastKamigazeEntity',
      'LastKamigazeComponent',
      'KamigazeNonce',
    ],
    version,
    idb
  );
};

export const getBlockNumber = async (cache: StateStore): Promise<number> => {
  return (await cache.get('BlockNumber', 'current')) ?? 0;
};

// get the ID of a state cache based on its params
export const getID = (
  namespace: string,
  chainID: number,
  worldAddress: string,
  version: number
) => {
  return `${namespace}-${chainID}-${worldAddress}-v${version}`;
};
