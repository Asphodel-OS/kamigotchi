// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.27.3
// source: kamigaze.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "kamigaze";

/** Base type */
export interface Entity {
  idx: number;
  id: Uint8Array;
}

export interface Component {
  idx: number;
  id: Uint8Array;
}

export interface State {
  packedIdx: number;
  data: Uint8Array;
}

/** Replies */
export interface EntitiesResponse {
  entities: Entity[];
}

export interface ComponentsResponse {
  components: Component[];
}

export interface BlockResponse {
  blockNumber: number;
}

export interface StateResponse {
  state: State[];
}

/** Requests */
export interface BlockRequest {
}

export interface ComponentsRequest {
  fromIdx: number;
}

export interface EntitiesRequest {
  fromIdx: number;
  numChunks?: number | undefined;
}

export interface StateRequest {
  fromBlock: number;
  numChunks?: number | undefined;
  removals?: boolean | undefined;
}

function createBaseEntity(): Entity {
  return { idx: 0, id: new Uint8Array(0) };
}

export const Entity: MessageFns<Entity> = {
  encode(message: Entity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idx !== 0) {
      writer.uint32(8).uint32(message.idx);
    }
    if (message.id.length !== 0) {
      writer.uint32(18).bytes(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Entity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.idx = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Entity>): Entity {
    return Entity.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Entity>): Entity {
    const message = createBaseEntity();
    message.idx = object.idx ?? 0;
    message.id = object.id ?? new Uint8Array(0);
    return message;
  },
};

function createBaseComponent(): Component {
  return { idx: 0, id: new Uint8Array(0) };
}

export const Component: MessageFns<Component> = {
  encode(message: Component, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.idx !== 0) {
      writer.uint32(8).uint32(message.idx);
    }
    if (message.id.length !== 0) {
      writer.uint32(18).bytes(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Component {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComponent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.idx = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Component>): Component {
    return Component.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Component>): Component {
    const message = createBaseComponent();
    message.idx = object.idx ?? 0;
    message.id = object.id ?? new Uint8Array(0);
    return message;
  },
};

function createBaseState(): State {
  return { packedIdx: 0, data: new Uint8Array(0) };
}

export const State: MessageFns<State> = {
  encode(message: State, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.packedIdx !== 0) {
      writer.uint32(8).uint32(message.packedIdx);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): State {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.packedIdx = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<State>): State {
    return State.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<State>): State {
    const message = createBaseState();
    message.packedIdx = object.packedIdx ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseEntitiesResponse(): EntitiesResponse {
  return { entities: [] };
}

export const EntitiesResponse: MessageFns<EntitiesResponse> = {
  encode(message: EntitiesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entities) {
      Entity.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntitiesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntitiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entities.push(Entity.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<EntitiesResponse>): EntitiesResponse {
    return EntitiesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EntitiesResponse>): EntitiesResponse {
    const message = createBaseEntitiesResponse();
    message.entities = object.entities?.map((e) => Entity.fromPartial(e)) || [];
    return message;
  },
};

function createBaseComponentsResponse(): ComponentsResponse {
  return { components: [] };
}

export const ComponentsResponse: MessageFns<ComponentsResponse> = {
  encode(message: ComponentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.components) {
      Component.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ComponentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComponentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.components.push(Component.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ComponentsResponse>): ComponentsResponse {
    return ComponentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ComponentsResponse>): ComponentsResponse {
    const message = createBaseComponentsResponse();
    message.components = object.components?.map((e) => Component.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBlockResponse(): BlockResponse {
  return { blockNumber: 0 };
}

export const BlockResponse: MessageFns<BlockResponse> = {
  encode(message: BlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockNumber !== 0) {
      writer.uint32(8).uint64(message.blockNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.blockNumber = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BlockResponse>): BlockResponse {
    return BlockResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BlockResponse>): BlockResponse {
    const message = createBaseBlockResponse();
    message.blockNumber = object.blockNumber ?? 0;
    return message;
  },
};

function createBaseStateResponse(): StateResponse {
  return { state: [] };
}

export const StateResponse: MessageFns<StateResponse> = {
  encode(message: StateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.state) {
      State.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.state.push(State.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<StateResponse>): StateResponse {
    return StateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StateResponse>): StateResponse {
    const message = createBaseStateResponse();
    message.state = object.state?.map((e) => State.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBlockRequest(): BlockRequest {
  return {};
}

export const BlockRequest: MessageFns<BlockRequest> = {
  encode(_: BlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BlockRequest>): BlockRequest {
    return BlockRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<BlockRequest>): BlockRequest {
    const message = createBaseBlockRequest();
    return message;
  },
};

function createBaseComponentsRequest(): ComponentsRequest {
  return { fromIdx: 0 };
}

export const ComponentsRequest: MessageFns<ComponentsRequest> = {
  encode(message: ComponentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fromIdx !== 0) {
      writer.uint32(8).uint32(message.fromIdx);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ComponentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComponentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fromIdx = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ComponentsRequest>): ComponentsRequest {
    return ComponentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ComponentsRequest>): ComponentsRequest {
    const message = createBaseComponentsRequest();
    message.fromIdx = object.fromIdx ?? 0;
    return message;
  },
};

function createBaseEntitiesRequest(): EntitiesRequest {
  return { fromIdx: 0, numChunks: undefined };
}

export const EntitiesRequest: MessageFns<EntitiesRequest> = {
  encode(message: EntitiesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fromIdx !== 0) {
      writer.uint32(8).uint32(message.fromIdx);
    }
    if (message.numChunks !== undefined) {
      writer.uint32(16).uint32(message.numChunks);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EntitiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntitiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fromIdx = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.numChunks = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<EntitiesRequest>): EntitiesRequest {
    return EntitiesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EntitiesRequest>): EntitiesRequest {
    const message = createBaseEntitiesRequest();
    message.fromIdx = object.fromIdx ?? 0;
    message.numChunks = object.numChunks ?? undefined;
    return message;
  },
};

function createBaseStateRequest(): StateRequest {
  return { fromBlock: 0, numChunks: undefined, removals: undefined };
}

export const StateRequest: MessageFns<StateRequest> = {
  encode(message: StateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fromBlock !== 0) {
      writer.uint32(8).uint32(message.fromBlock);
    }
    if (message.numChunks !== undefined) {
      writer.uint32(16).uint32(message.numChunks);
    }
    if (message.removals !== undefined) {
      writer.uint32(24).bool(message.removals);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fromBlock = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.numChunks = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.removals = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<StateRequest>): StateRequest {
    return StateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StateRequest>): StateRequest {
    const message = createBaseStateRequest();
    message.fromBlock = object.fromBlock ?? 0;
    message.numChunks = object.numChunks ?? undefined;
    message.removals = object.removals ?? undefined;
    return message;
  },
};

export type StateSnapshotServiceDefinition = typeof StateSnapshotServiceDefinition;
export const StateSnapshotServiceDefinition = {
  name: "StateSnapshotService",
  fullName: "kamigaze.StateSnapshotService",
  methods: {
    /** Requests the latest block number based on the latest ECS state. */
    getStateBlock: {
      name: "GetStateBlock",
      requestType: BlockRequest,
      requestStream: false,
      responseType: BlockResponse,
      responseStream: false,
      options: {},
    },
    /** components */
    getComponents: {
      name: "GetComponents",
      requestType: ComponentsRequest,
      requestStream: false,
      responseType: ComponentsResponse,
      responseStream: false,
      options: {},
    },
    /** entities */
    getEntities: {
      name: "GetEntities",
      requestType: EntitiesRequest,
      requestStream: false,
      responseType: EntitiesResponse,
      responseStream: true,
      options: {},
    },
    /** Get state entries */
    getStateValues: {
      name: "GetStateValues",
      requestType: StateRequest,
      requestStream: false,
      responseType: StateResponse,
      responseStream: true,
      options: {},
    },
    /** Get state entry removals */
    getStateRemovals: {
      name: "GetStateRemovals",
      requestType: StateRequest,
      requestStream: false,
      responseType: StateResponse,
      responseStream: true,
      options: {},
    },
    /** Get State consolidated */
    getState: {
      name: "GetState",
      requestType: StateRequest,
      requestStream: false,
      responseType: StateResponse,
      responseStream: true,
      options: {},
    },
  },
} as const;

export interface StateSnapshotServiceImplementation<CallContextExt = {}> {
  /** Requests the latest block number based on the latest ECS state. */
  getStateBlock(request: BlockRequest, context: CallContext & CallContextExt): Promise<DeepPartial<BlockResponse>>;
  /** components */
  getComponents(
    request: ComponentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ComponentsResponse>>;
  /** entities */
  getEntities(
    request: EntitiesRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<EntitiesResponse>>;
  /** Get state entries */
  getStateValues(
    request: StateRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<StateResponse>>;
  /** Get state entry removals */
  getStateRemovals(
    request: StateRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<StateResponse>>;
  /** Get State consolidated */
  getState(
    request: StateRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<StateResponse>>;
}

export interface StateSnapshotServiceClient<CallOptionsExt = {}> {
  /** Requests the latest block number based on the latest ECS state. */
  getStateBlock(request: DeepPartial<BlockRequest>, options?: CallOptions & CallOptionsExt): Promise<BlockResponse>;
  /** components */
  getComponents(
    request: DeepPartial<ComponentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ComponentsResponse>;
  /** entities */
  getEntities(
    request: DeepPartial<EntitiesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<EntitiesResponse>;
  /** Get state entries */
  getStateValues(
    request: DeepPartial<StateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<StateResponse>;
  /** Get state entry removals */
  getStateRemovals(
    request: DeepPartial<StateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<StateResponse>;
  /** Get State consolidated */
  getState(request: DeepPartial<StateRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<StateResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
