// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: kamiden.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import { type CallContext, type CallOptions } from 'nice-grpc-common';

export const protobufPackage = 'kamiden';

/** Base type */
export interface Message {
  RoomIndex: number;
  AccountId: string;
  Message: string;
  /** optional uint64 BlockNumber = 5; */
  Timestamp: number;
}

export interface RoomRequest {
  RoomIndex: number;
}

export interface RoomResponse {
  Messages: Message[];
}

export interface StreamRequest {}

export interface StreamResponse {
  Messages: Message[];
}

function createBaseMessage(): Message {
  return { RoomIndex: 0, AccountId: '', Message: '', Timestamp: 0 };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.RoomIndex !== 0) {
      writer.uint32(8).uint32(message.RoomIndex);
    }
    if (message.AccountId !== '') {
      writer.uint32(18).string(message.AccountId);
    }
    if (message.Message !== '') {
      writer.uint32(26).string(message.Message);
    }
    if (message.Timestamp !== 0) {
      writer.uint32(32).uint64(message.Timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.RoomIndex = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.AccountId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.Message = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.Timestamp = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Message>): Message {
    return Message.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Message>): Message {
    const message = createBaseMessage();
    message.RoomIndex = object.RoomIndex ?? 0;
    message.AccountId = object.AccountId ?? '';
    message.Message = object.Message ?? '';
    message.Timestamp = object.Timestamp ?? 0;
    return message;
  },
};

function createBaseRoomRequest(): RoomRequest {
  return { RoomIndex: 0 };
}

export const RoomRequest: MessageFns<RoomRequest> = {
  encode(message: RoomRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.RoomIndex !== 0) {
      writer.uint32(8).uint32(message.RoomIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.RoomIndex = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RoomRequest>): RoomRequest {
    return RoomRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RoomRequest>): RoomRequest {
    const message = createBaseRoomRequest();
    message.RoomIndex = object.RoomIndex ?? 0;
    return message;
  },
};

function createBaseRoomResponse(): RoomResponse {
  return { Messages: [] };
}

export const RoomResponse: MessageFns<RoomResponse> = {
  encode(message: RoomResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Messages) {
      Message.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Messages.push(Message.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RoomResponse>): RoomResponse {
    return RoomResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RoomResponse>): RoomResponse {
    const message = createBaseRoomResponse();
    message.Messages = object.Messages?.map((e) => Message.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamRequest(): StreamRequest {
  return {};
}

export const StreamRequest: MessageFns<StreamRequest> = {
  encode(_: StreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<StreamRequest>): StreamRequest {
    return StreamRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<StreamRequest>): StreamRequest {
    const message = createBaseStreamRequest();
    return message;
  },
};

function createBaseStreamResponse(): StreamResponse {
  return { Messages: [] };
}

export const StreamResponse: MessageFns<StreamResponse> = {
  encode(message: StreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Messages) {
      Message.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Messages.push(Message.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<StreamResponse>): StreamResponse {
    return StreamResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamResponse>): StreamResponse {
    const message = createBaseStreamResponse();
    message.Messages = object.Messages?.map((e) => Message.fromPartial(e)) || [];
    return message;
  },
};

/** Replies */
export type KamidenServiceDefinition = typeof KamidenServiceDefinition;
export const KamidenServiceDefinition = {
  name: 'KamidenService',
  fullName: 'kamiden.KamidenService',
  methods: {
    /** Requests the latest block number based on the latest ECS state. */
    getRoomMessages: {
      name: 'GetRoomMessages',
      requestType: RoomRequest,
      requestStream: false,
      responseType: RoomResponse,
      responseStream: false,
      options: {},
    },
    /** Stream */
    subscribeToStream: {
      name: 'SubscribeToStream',
      requestType: StreamRequest,
      requestStream: false,
      responseType: StreamResponse,
      responseStream: true,
      options: {},
    },
  },
} as const;

export interface KamidenServiceImplementation<CallContextExt = {}> {
  /** Requests the latest block number based on the latest ECS state. */
  getRoomMessages(
    request: RoomRequest,
    context: CallContext & CallContextExt
  ): Promise<DeepPartial<RoomResponse>>;
  /** Stream */
  subscribeToStream(
    request: StreamRequest,
    context: CallContext & CallContextExt
  ): ServerStreamingMethodResult<DeepPartial<StreamResponse>>;
}

export interface KamidenServiceClient<CallOptionsExt = {}> {
  /** Requests the latest block number based on the latest ECS state. */
  getRoomMessages(
    request: DeepPartial<RoomRequest>,
    options?: CallOptions & CallOptionsExt
  ): Promise<RoomResponse>;
  /** Stream */
  subscribeToStream(
    request: DeepPartial<StreamRequest>,
    options?: CallOptions & CallOptionsExt
  ): AsyncIterable<StreamResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error('Value is larger than Number.MAX_SAFE_INTEGER');
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error('Value is smaller than Number.MIN_SAFE_INTEGER');
  }
  return num;
}

export type ServerStreamingMethodResult<Response> = {
  [Symbol.asyncIterator](): AsyncIterator<Response, void>;
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
