/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  EntityTypeComponent,
  EntityTypeComponentInterface,
} from "../EntityTypeComponent";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "world",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "authorizeWriter",
    inputs: [
      {
        name: "writer",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "cancelOwnershipHandover",
    inputs: [],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "completeOwnershipHandover",
    inputs: [
      {
        name: "pendingOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "extract",
    inputs: [
      {
        name: "entity",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "extractBatch",
    inputs: [
      {
        name: "entities",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    outputs: [
      {
        name: "",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "extractRaw",
    inputs: [
      {
        name: "entity",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "extractRawBatch",
    inputs: [
      {
        name: "entities",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes[]",
        internalType: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "get",
    inputs: [
      {
        name: "entity",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getBatch",
    inputs: [
      {
        name: "entities",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    outputs: [
      {
        name: "",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getEntities",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getEntitiesWithValue",
    inputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getRaw",
    inputs: [
      {
        name: "entity",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getRawBatch",
    inputs: [
      {
        name: "entities",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes[]",
        internalType: "bytes[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "has",
    inputs: [
      {
        name: "entity",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "id",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "result",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ownershipHandoverExpiresAt",
    inputs: [
      {
        name: "pendingOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "result",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "registerWorld",
    inputs: [
      {
        name: "_world",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "remove",
    inputs: [
      {
        name: "entity",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "removeBatch",
    inputs: [
      {
        name: "entities",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "requestOwnershipHandover",
    inputs: [],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "set",
    inputs: [
      {
        name: "entity",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "value",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "set",
    inputs: [
      {
        name: "entity",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "value",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setBatch",
    inputs: [
      {
        name: "entities",
        type: "uint256[]",
        internalType: "uint256[]",
      },
      {
        name: "values",
        type: "bytes[]",
        internalType: "bytes[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setBatch",
    inputs: [
      {
        name: "entities",
        type: "uint256[]",
        internalType: "uint256[]",
      },
      {
        name: "values",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "unauthorizeWriter",
    inputs: [
      {
        name: "writer",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "world",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "writeAccess",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "OwnershipHandoverCanceled",
    inputs: [
      {
        name: "pendingOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipHandoverRequested",
    inputs: [
      {
        name: "pendingOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "oldOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AlreadyInitialized",
    inputs: [],
  },
  {
    type: "error",
    name: "BareComponent__NotImplemented",
    inputs: [],
  },
  {
    type: "error",
    name: "BatchOp_UnexpectedLength",
    inputs: [],
  },
  {
    type: "error",
    name: "NewOwnerIsZeroAddress",
    inputs: [],
  },
  {
    type: "error",
    name: "NoHandoverRequest",
    inputs: [],
  },
  {
    type: "error",
    name: "OwnableWritable__NotWriter",
    inputs: [],
  },
  {
    type: "error",
    name: "Unauthorized",
    inputs: [],
  },
  {
    type: "error",
    name: "ZeroValueNotAllowed",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200218f3803806200218f83398101604081905262000034916200016e565b807f5d88ced8d8e079072bf73f49fc87661b519c50d79482941abb852ba2b10909cd818162000063336200008e565b60028190556001600160a01b0382161562000083576200008382620000ca565b5050505050620001a0565b6001600160a01b0316638b78c6d8198190558060007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a350565b620000d462000150565b600080546001600160a01b0319166001600160a01b038316908117909155600254604051630f30347760e41b8152306004820152602481019190915263f303477090604401600060405180830381600087803b1580156200013457600080fd5b505af115801562000149573d6000803e3d6000fd5b5050505050565b638b78c6d8195433146200016c576382b429006000526004601cfd5b565b6000602082840312156200018157600080fd5b81516001600160a01b03811681146200019957600080fd5b9392505050565b611fdf80620001b06000396000f3fe6080604052600436106101cd5760003560e01c80638b282947116100f7578063cccf7a8e11610095578063e9ff6c7611610064578063e9ff6c7614610558578063f04e283e14610578578063f2fde38b1461058b578063fee81cf41461059e57600080fd5b8063cccf7a8e146104d8578063dc5c22cd146104f8578063dd98e3c914610518578063e4b6aecf1461053857600080fd5b80639d2c76b4116100d15780639d2c76b414610454578063af640d0f14610474578063b361be4614610498578063bf4fe57e146104b857600080fd5b80638b282947146103e05780638da5cb5b146104005780639507d39a1461043457600080fd5b80634cc822151161016f578063715018a61161013e578063715018a61461035b5780638482643e1461036357806385b3978214610383578063861eb905146103b057600080fd5b80634cc82215146102f35780634fef6a381461031357806354d1f13d14610333578063643719771461033b57600080fd5b806325692962116101ab578063256929621461025757806330b67baa1461025f57806331b933b9146102b15780634323c4ef146102d357600080fd5b8063088dd0b9146101d257806312b111551461020857806313ca8b6a14610235575b600080fd5b3480156101de57600080fd5b506101f26101ed3660046117e1565b6105d1565b6040516101ff919061188c565b60405180910390f35b34801561021457600080fd5b506102286102233660046117e1565b6105ea565b6040516101ff919061190c565b34801561024157600080fd5b50610255610250366004611a16565b610634565b005b610255610681565b34801561026b57600080fd5b5060005461028c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ff565b3480156102bd57600080fd5b506102c66106d1565b6040516101ff9190611aeb565b3480156102df57600080fd5b506102286102ee3660046117e1565b610705565b3480156102ff57600080fd5b5061025561030e366004611b2f565b610851565b34801561031f57600080fd5b5061025561032e366004611b48565b61089c565b610255610912565b34801561034757600080fd5b50610255610356366004611b85565b61094e565b61025561099f565b34801561036f57600080fd5b5061025561037e3660046117e1565b6109b3565b34801561038f57600080fd5b506103a361039e366004611b2f565b6109fb565b6040516101ff9190611bcc565b3480156103bc57600080fd5b506103d06103cb366004611b48565b610a4d565b60405190151581526020016101ff565b3480156103ec57600080fd5b506102556103fb366004611b85565b610adc565b34801561040c57600080fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739275461028c565b34801561044057600080fd5b506103a361044f366004611b2f565b610b25565b34801561046057600080fd5b5061025561046f366004611b48565b610b33565b34801561048057600080fd5b5061048a60025481565b6040519081526020016101ff565b3480156104a457600080fd5b506102c66104b3366004611bdf565b6106d1565b3480156104c457600080fd5b506102556104d3366004611b48565b610bf4565b3480156104e457600080fd5b506103d06104f3366004611b2f565b610c67565b34801561050457600080fd5b506101f26105133660046117e1565b610c89565b34801561052457600080fd5b506103a3610533366004611b2f565b610cd6565b34801561054457600080fd5b50610255610553366004611c14565b610ce1565b34801561056457600080fd5b506103a3610573366004611b2f565b610d32565b610255610586366004611b48565b610d7c565b610255610599366004611b48565b610db9565b3480156105aa57600080fd5b5061048a6105b9366004611b48565b63389a75e1600c908152600091909152602090205490565b60606105e46105df83610de0565b610f25565b92915050565b60606105f533610a4d565b61062b576040517f406ed3da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105e482610fd7565b61063d33610a4d565b610673576040517f406ed3da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61067d8282610fef565b5050565b60006202a30067ffffffffffffffff164201905063389a75e1600c5233600052806020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d600080a250565b60606040517f17d5b8e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60606000825167ffffffffffffffff811115610723576107236116d4565b60405190808252806020026020018201604052801561075657816020015b60608152602001906001900390816107415790505b50905060005b835181101561084a576001600085838151811061077b5761077b611cd8565b60200260200101518152602001908152602001600020805461079c90611d07565b80601f01602080910402602001604051908101604052809291908181526020018280546107c890611d07565b80156108155780601f106107ea57610100808354040283529160200191610815565b820191906000526020600020905b8154815290600101906020018083116107f857829003601f168201915b505050505082828151811061082c5761082c611cd8565b6020026020010181905250808061084290611d5a565b91505061075c565b5092915050565b61085a33610a4d565b610890576040517f406ed3da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610899816111cd565b50565b6108a461123b565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f8ffeadc5cba727b8cc3cdef48739619490ea317fdb3baae1259089d06f92c9096020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b63389a75e1600c523360005260006020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92600080a2565b61095733610a4d565b61098d576040517f406ed3da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61067d8261099a83611271565b61129a565b6109a761123b565b6109b1600061137c565b565b6109bc33610a4d565b6109f2576040517f406ed3da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610899816113e2565b6060610a0633610a4d565b610a3c576040517f406ed3da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105e4610a48836114fc565b61151c565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f8ffeadc5cba727b8cc3cdef48739619490ea317fdb3baae1259089d06f92c909602052604081205460ff16806105e45750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739275473ffffffffffffffffffffffffffffffffffffffff91821691161490565b610ae533610a4d565b610b1b576040517f406ed3da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61067d828261129a565b60606105e4610a4883611532565b610b3b61123b565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556002546040517ff3034770000000000000000000000000000000000000000000000000000000008152306004820152602481019190915263f3034770906044015b600060405180830381600087803b158015610bd957600080fd5b505af1158015610bed573d6000803e3d6000fd5b5050505050565b610bfc61123b565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f8ffeadc5cba727b8cc3cdef48739619490ea317fdb3baae1259089d06f92c9096020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b60008181526001602052604081208054610c8090611d07565b15159392505050565b6060610c9433610a4d565b610cca576040517f406ed3da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105e46105df83610fd7565b60606105e482611532565b610cea33610a4d565b610d20576040517f406ed3da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61067d82610d2d836115d4565b610fef565b6060610d3d33610a4d565b610d73576040517f406ed3da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105e4826114fc565b610d8461123b565b63389a75e1600c52806000526020600c208054421115610dac57636f5e88186000526004601cfd5b600090556108998161137c565b610dc161123b565b8060601b610dd757637448fbae6000526004601cfd5b6108998161137c565b60606000825167ffffffffffffffff811115610dfe57610dfe6116d4565b604051908082528060200260200182016040528015610e3157816020015b6060815260200190600190039081610e1c5790505b50905060005b835181101561084a5760016000858381518110610e5657610e56611cd8565b602002602001015181526020019081526020016000208054610e7790611d07565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea390611d07565b8015610ef05780601f10610ec557610100808354040283529160200191610ef0565b820191906000526020600020905b815481529060010190602001808311610ed357829003601f168201915b5050505050828281518110610f0757610f07611cd8565b60200260200101819052508080610f1d90611d5a565b915050610e37565b60606000825167ffffffffffffffff811115610f4357610f436116d4565b604051908082528060200260200182016040528015610f7657816020015b6060815260200190600190039081610f615790505b50905060005b835181101561084a57610fa7848281518110610f9a57610f9a611cd8565b602002602001015161151c565b828281518110610fb957610fb9611cd8565b60200260200101819052508080610fcf90611d5a565b915050610f7c565b60606000610fe483610de0565b90506105e4836113e2565b805182511461102a576040517fc291f68400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b82518110156110ef5781818151811061104857611048611cd8565b60200260200101515160000361108a576040517f9cf8540c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81818151811061109c5761109c611cd8565b6020026020010151600160008584815181106110ba576110ba611cd8565b6020026020010151815260200190815260200160002090816110dc9190611dff565b50806110e781611d5a565b91505061102d565b506000805473ffffffffffffffffffffffffffffffffffffffff16905b83518110156111c7578173ffffffffffffffffffffffffffffffffffffffff1663cfd3c57f85838151811061114357611143611cd8565b602002602001015185848151811061115d5761115d611cd8565b60200260200101516040518363ffffffff1660e01b8152600401611182929190611f19565b600060405180830381600087803b15801561119c57600080fd5b505af11580156111b0573d6000803e3d6000fd5b5050505080806111bf90611d5a565b91505061110c565b50505050565b60008181526001602052604081206111e491611686565b6000546040517f0de3b7b50000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff90911690630de3b7b590602401610bbf565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739275433146109b1576382b429006000526004601cfd5b6060816040516020016112849190611bcc565b6040516020818303038152906040529050919050565b80516000036112d5576040517f9cf8540c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281526001602052604090206112ed8282611dff565b506000546040517fcfd3c57f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063cfd3c57f906113469085908590600401611f19565b600060405180830381600087803b15801561136057600080fd5b505af1158015611374573d6000803e3d6000fd5b505050505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927805473ffffffffffffffffffffffffffffffffffffffff9092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a355565b60005b8151811015611438576001600083838151811061140457611404611cd8565b6020026020010151815260200190815260200160002060006114269190611686565b8061143081611d5a565b9150506113e5565b506000805473ffffffffffffffffffffffffffffffffffffffff16905b82518110156114f7578173ffffffffffffffffffffffffffffffffffffffff16630de3b7b584838151811061148c5761148c611cd8565b60200260200101516040518263ffffffff1660e01b81526004016114b291815260200190565b600060405180830381600087803b1580156114cc57600080fd5b505af11580156114e0573d6000803e3d6000fd5b5050505080806114ef90611d5a565b915050611455565b505050565b6060600061150983611532565b8051909150156105e4576105e4836111cd565b6060818060200190518101906105e49190611f32565b600081815260016020526040902080546060919061154f90611d07565b80601f016020809104026020016040519081016040528092919081815260200182805461157b90611d07565b80156115c85780601f1061159d576101008083540402835291602001916115c8565b820191906000526020600020905b8154815290600101906020018083116115ab57829003601f168201915b50505050509050919050565b60606000825167ffffffffffffffff8111156115f2576115f26116d4565b60405190808252806020026020018201604052801561162557816020015b60608152602001906001900390816116105790505b50905060005b835181101561084a5761165684828151811061164957611649611cd8565b6020026020010151611271565b82828151811061166857611668611cd8565b6020026020010181905250808061167e90611d5a565b91505061162b565b50805461169290611d07565b6000825580601f106116a2575050565b601f01602090049060005260206000209081019061089991905b808211156116d057600081556001016116bc565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561174a5761174a6116d4565b604052919050565b600067ffffffffffffffff82111561176c5761176c6116d4565b5060051b60200190565b600082601f83011261178757600080fd5b8135602061179c61179783611752565b611703565b82815260059290921b840181019181810190868411156117bb57600080fd5b8286015b848110156117d657803583529183019183016117bf565b509695505050505050565b6000602082840312156117f357600080fd5b813567ffffffffffffffff81111561180a57600080fd5b61181684828501611776565b949350505050565b60005b83811015611839578181015183820152602001611821565b50506000910152565b6000815180845261185a81602086016020860161181e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156118ff577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526118ed858351611842565b945092850192908501906001016118b3565b5092979650505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156118ff577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261196d858351611842565b94509285019290850190600101611933565b600067ffffffffffffffff821115611999576119996116d4565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126119d657600080fd5b81356119e46117978261197f565b8181528460208386010111156119f957600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215611a2957600080fd5b823567ffffffffffffffff80821115611a4157600080fd5b611a4d86838701611776565b9350602091508185013581811115611a6457600080fd5b8501601f81018713611a7557600080fd5b8035611a8361179782611752565b81815260059190911b82018401908481019089831115611aa257600080fd5b8584015b83811015611ada57803586811115611abe5760008081fd5b611acc8c89838901016119c5565b845250918601918601611aa6565b508096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611b2357835183529284019291840191600101611b07565b50909695505050505050565b600060208284031215611b4157600080fd5b5035919050565b600060208284031215611b5a57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114611b7e57600080fd5b9392505050565b60008060408385031215611b9857600080fd5b82359150602083013567ffffffffffffffff811115611bb657600080fd5b611bc2858286016119c5565b9150509250929050565b602081526000611b7e6020830184611842565b600060208284031215611bf157600080fd5b813567ffffffffffffffff811115611c0857600080fd5b611816848285016119c5565b60008060408385031215611c2757600080fd5b823567ffffffffffffffff80821115611c3f57600080fd5b611c4b86838701611776565b9350602091508185013581811115611c6257600080fd5b8501601f81018713611c7357600080fd5b8035611c8161179782611752565b81815260059190911b82018401908481019089831115611ca057600080fd5b8584015b83811015611ada57803586811115611cbc5760008081fd5b611cca8c89838901016119c5565b845250918601918601611ca4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680611d1b57607f821691505b602082108103611d54577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611db2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b601f8211156114f757600081815260208120601f850160051c81016020861015611de05750805b601f850160051c820191505b8181101561137457828155600101611dec565b815167ffffffffffffffff811115611e1957611e196116d4565b611e2d81611e278454611d07565b84611db9565b602080601f831160018114611e805760008415611e4a5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555611374565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015611ecd57888601518255948401946001909101908401611eae565b5085821015611f0957878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b8281526040602082015260006118166040830184611842565b600060208284031215611f4457600080fd5b815167ffffffffffffffff811115611f5b57600080fd5b8201601f81018413611f6c57600080fd5b8051611f7a6117978261197f565b818152856020838501011115611f8f57600080fd5b611fa082602083016020860161181e565b9594505050505056fea2646970667358221220d3a4fb27239c82837fa8ecc3a4c6ac558fdc8b54835523a49c2f6c0dd2c9761c64736f6c63430008110033";

type EntityTypeComponentConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EntityTypeComponentConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EntityTypeComponent__factory extends ContractFactory {
  constructor(...args: EntityTypeComponentConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    world: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<EntityTypeComponent> {
    return super.deploy(world, overrides || {}) as Promise<EntityTypeComponent>;
  }
  override getDeployTransaction(
    world: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(world, overrides || {});
  }
  override attach(address: string): EntityTypeComponent {
    return super.attach(address) as EntityTypeComponent;
  }
  override connect(signer: Signer): EntityTypeComponent__factory {
    return super.connect(signer) as EntityTypeComponent__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EntityTypeComponentInterface {
    return new utils.Interface(_abi) as EntityTypeComponentInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EntityTypeComponent {
    return new Contract(address, _abi, signerOrProvider) as EntityTypeComponent;
  }
}
